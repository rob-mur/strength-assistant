cb6c65f54491fd0f6be55d608ec9e94c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ConstitutionalAmendmentManager = require("../../src/constitution/ConstitutionalAmendmentManager");
describe('ConstitutionalAmendmentManager Unit Tests', function () {
  var manager;
  beforeEach(function () {
    manager = new _ConstitutionalAmendmentManager.ConstitutionalAmendmentManagerImpl();
  });
  describe('Constructor and Initial State', function () {
    it('should initialize with current constitutional requirements', function () {
      var requirements = manager.getCurrentRequirements();
      expect(requirements.version).toBe('2.5.0');
      expect(requirements.requirementsBySection).toBeDefined();
      expect(requirements.prohibitionsBySection).toBeDefined();
      expect(requirements.activeEnforcements).toBeDefined();
    });
    it('should have TypeScript testing requirements in initial state', function () {
      var requirements = manager.getCurrentRequirements();
      var testingRequirements = requirements.requirementsBySection['Testing (NON-NEGOTIABLE)'];
      expect(testingRequirements).toContain('TypeScript compilation MUST succeed before test execution');
      expect(testingRequirements).toContain('devbox run test MUST pass completely before any commit');
      expect(testingRequirements).toContain('Pre-commit hooks MUST validate TypeScript compilation');
    });
    it('should have TypeScript testing prohibitions in initial state', function () {
      var requirements = manager.getCurrentRequirements();
      var testingProhibitions = requirements.prohibitionsBySection['Testing (NON-NEGOTIABLE)'];
      expect(testingProhibitions).toContain('Committing code that breaks TypeScript compilation');
      expect(testingProhibitions).toContain('Implementation before test');
      expect(testingProhibitions).toContain('Skipping RED phase');
    });
    it('should have active enforcement mechanisms configured', function () {
      var requirements = manager.getCurrentRequirements();
      expect(requirements.activeEnforcements.length).toBeGreaterThan(0);
      var preCommitHook = requirements.activeEnforcements.find(function (e) {
        return e.type === 'pre-commit-hook';
      });
      expect(preCommitHook).toBeDefined();
      expect(preCommitHook == null ? void 0 : preCommitHook.active).toBe(true);
      expect(preCommitHook == null ? void 0 : preCommitHook.configuration.onFailure).toBe('block');
    });
  });
  describe('proposeAmendment', function () {
    it('should create tracking info for new amendments', (0, _asyncToGenerator2.default)(function* () {
      var amendment = {
        id: 'test-amendment-001',
        title: 'Test Amendment',
        description: 'Test amendment description',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: ['Test requirement'],
        newProhibitions: ['Test prohibition'],
        enforcementMechanisms: [],
        rationale: 'Test rationale',
        expectedImpact: 'Test impact'
      };
      var trackingInfo = yield manager.proposeAmendment(amendment);
      expect(trackingInfo.amendmentId).toBe(amendment.id);
      expect(trackingInfo.status).toBe('proposed');
      expect(trackingInfo.createdAt).toBeInstanceOf(Date);
      expect(trackingInfo.updatedAt).toBeInstanceOf(Date);
      expect(trackingInfo.reviews).toEqual([]);
      expect(trackingInfo.version).toBe('2.5.0');
    }));
    it('should handle multiple amendments with unique tracking', (0, _asyncToGenerator2.default)(function* () {
      var amendment1 = {
        id: 'amendment-001',
        title: 'First Amendment',
        description: 'First test amendment',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: ['Requirement 1'],
        newProhibitions: ['Prohibition 1'],
        enforcementMechanisms: [],
        rationale: 'Rationale 1',
        expectedImpact: 'Impact 1'
      };
      var amendment2 = {
        id: 'amendment-002',
        title: 'Second Amendment',
        description: 'Second test amendment',
        section: 'Simplicity',
        newRequirements: ['Requirement 2'],
        newProhibitions: ['Prohibition 2'],
        enforcementMechanisms: [],
        rationale: 'Rationale 2',
        expectedImpact: 'Impact 2'
      };
      var tracking1 = yield manager.proposeAmendment(amendment1);
      var tracking2 = yield manager.proposeAmendment(amendment2);
      expect(tracking1.amendmentId).toBe('amendment-001');
      expect(tracking2.amendmentId).toBe('amendment-002');
      expect(tracking1.createdAt).toBeInstanceOf(Date);
      expect(tracking2.createdAt).toBeInstanceOf(Date);
    }));
    it('should set timestamps correctly', (0, _asyncToGenerator2.default)(function* () {
      var beforeTime = new Date();
      var amendment = {
        id: 'timestamp-test',
        title: 'Timestamp Test',
        description: 'Testing timestamp behavior',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: [],
        newProhibitions: [],
        enforcementMechanisms: [],
        rationale: 'Test timestamps',
        expectedImpact: 'Verify timing'
      };
      var trackingInfo = yield manager.proposeAmendment(amendment);
      var afterTime = new Date();
      expect(trackingInfo.createdAt.getTime()).toBeGreaterThanOrEqual(beforeTime.getTime());
      expect(trackingInfo.createdAt.getTime()).toBeLessThanOrEqual(afterTime.getTime());
      expect(trackingInfo.updatedAt.getTime()).toBe(trackingInfo.createdAt.getTime());
    }));
  });
  describe('reviewAmendment', function () {
    var amendmentId;
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      var amendment = {
        id: 'review-test-amendment',
        title: 'Review Test Amendment',
        description: 'Amendment for testing review functionality',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: ['Review test requirement'],
        newProhibitions: ['Review test prohibition'],
        enforcementMechanisms: [],
        rationale: 'Test review process',
        expectedImpact: 'Validate review workflow'
      };
      var tracking = yield manager.proposeAmendment(amendment);
      amendmentId = tracking.amendmentId;
    }));
    it('should process approval reviews correctly', (0, _asyncToGenerator2.default)(function* () {
      var review = {
        reviewerId: 'reviewer-001',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Amendment looks good',
        suggestions: ['Consider performance impact']
      };
      var updatedTracking = yield manager.reviewAmendment(amendmentId, review);
      expect(updatedTracking.status).toBe('approved');
      expect(updatedTracking.reviews).toHaveLength(1);
      expect(updatedTracking.reviews[0]).toEqual(review);
      expect(updatedTracking.updatedAt.getTime()).toBeGreaterThanOrEqual(updatedTracking.createdAt.getTime());
    }));
    it('should process rejection reviews correctly', (0, _asyncToGenerator2.default)(function* () {
      var review = {
        reviewerId: 'reviewer-002',
        reviewedAt: new Date(),
        decision: 'reject',
        comments: 'Amendment scope too broad',
        suggestions: ['Narrow the scope', 'Focus on specific issues']
      };
      var updatedTracking = yield manager.reviewAmendment(amendmentId, review);
      expect(updatedTracking.status).toBe('rejected');
      expect(updatedTracking.reviews[0].decision).toBe('reject');
      expect(updatedTracking.reviews[0].comments).toBe('Amendment scope too broad');
    }));
    it('should process change request reviews correctly', (0, _asyncToGenerator2.default)(function* () {
      var review = {
        reviewerId: 'reviewer-003',
        reviewedAt: new Date(),
        decision: 'request-changes',
        comments: 'Need more specific enforcement mechanisms',
        suggestions: ['Add detailed enforcement steps', 'Define success metrics']
      };
      var updatedTracking = yield manager.reviewAmendment(amendmentId, review);
      expect(updatedTracking.status).toBe('under-review');
      expect(updatedTracking.reviews[0].decision).toBe('request-changes');
    }));
    it('should handle multiple reviews', (0, _asyncToGenerator2.default)(function* () {
      var review1 = {
        reviewerId: 'reviewer-001',
        reviewedAt: new Date(),
        decision: 'request-changes',
        comments: 'First review comments'
      };
      var review2 = {
        reviewerId: 'reviewer-002',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Second review comments'
      };
      yield manager.reviewAmendment(amendmentId, review1);
      var finalTracking = yield manager.reviewAmendment(amendmentId, review2);
      expect(finalTracking.reviews).toHaveLength(2);
      expect(finalTracking.status).toBe('approved');
      expect(finalTracking.reviews[0].reviewerId).toBe('reviewer-001');
      expect(finalTracking.reviews[1].reviewerId).toBe('reviewer-002');
    }));
    it('should throw error for non-existent amendment', (0, _asyncToGenerator2.default)(function* () {
      var review = {
        reviewerId: 'reviewer-404',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'This should fail'
      };
      yield expect(manager.reviewAmendment('non-existent-id', review)).rejects.toThrow('Amendment non-existent-id not found');
    }));
    it('should update timestamps on review', (0, _asyncToGenerator2.default)(function* () {
      var originalTracking = yield manager.reviewAmendment(amendmentId, {
        reviewerId: 'reviewer-001',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Initial review'
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var secondTracking = yield manager.reviewAmendment(amendmentId, {
        reviewerId: 'reviewer-002',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Second review'
      });
      expect(secondTracking.updatedAt.getTime()).toBeGreaterThanOrEqual(originalTracking.updatedAt.getTime());
    }));
  });
  describe('enactAmendment', function () {
    var approvedAmendmentId;
    var unapprovedAmendmentId;
    beforeEach((0, _asyncToGenerator2.default)(function* () {
      var approvedAmendment = {
        id: 'approved-amendment',
        title: 'Approved Amendment',
        description: 'Amendment for enactment testing',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: ['Enactment test requirement'],
        newProhibitions: ['Enactment test prohibition'],
        enforcementMechanisms: [{
          type: 'pre-commit-hook',
          description: 'Test enforcement',
          configuration: {
            command: 'test-command',
            onFailure: 'block'
          }
        }],
        rationale: 'Test enactment',
        expectedImpact: 'Validate enactment process'
      };
      yield manager.proposeAmendment(approvedAmendment);
      yield manager.reviewAmendment(approvedAmendment.id, {
        reviewerId: 'test-reviewer',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Approved for testing'
      });
      approvedAmendmentId = approvedAmendment.id;
      var unapprovedAmendment = {
        id: 'unapproved-amendment',
        title: 'Unapproved Amendment',
        description: 'Amendment that should not be enacted',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: [],
        newProhibitions: [],
        enforcementMechanisms: [],
        rationale: 'Test rejection',
        expectedImpact: 'Should fail enactment'
      };
      yield manager.proposeAmendment(unapprovedAmendment);
      unapprovedAmendmentId = unapprovedAmendment.id;
    }));
    it('should enact approved amendments successfully', (0, _asyncToGenerator2.default)(function* () {
      var enforcementConfig = yield manager.enactAmendment(approvedAmendmentId);
      expect(enforcementConfig.amendmentId).toBe(approvedAmendmentId);
      expect(enforcementConfig.mechanisms).toBeDefined();
      expect(Array.isArray(enforcementConfig.mechanisms)).toBe(true);
      expect(enforcementConfig.gracePeriodDays).toBe(0);
      expect(enforcementConfig.monitoring).toBeDefined();
      expect(enforcementConfig.monitoring.enableMetrics).toBe(true);
      expect(enforcementConfig.monitoring.reportingInterval).toBe('daily');
      expect(enforcementConfig.monitoring.alertThresholds.violationCount).toBe(1);
    }));
    it('should update amendment status to enacted', (0, _asyncToGenerator2.default)(function* () {
      yield manager.enactAmendment(approvedAmendmentId);
      expect(true).toBe(true);
    }));
    it('should throw error for unapproved amendments', (0, _asyncToGenerator2.default)(function* () {
      yield expect(manager.enactAmendment(unapprovedAmendmentId)).rejects.toThrow('Amendment unapproved-amendment must be approved before enactment');
    }));
    it('should throw error for non-existent amendments', (0, _asyncToGenerator2.default)(function* () {
      yield expect(manager.enactAmendment('non-existent-amendment')).rejects.toThrow('Amendment non-existent-amendment not found');
    }));
    it('should configure zero-tolerance enforcement for TypeScript', (0, _asyncToGenerator2.default)(function* () {
      var enforcementConfig = yield manager.enactAmendment(approvedAmendmentId);
      expect(enforcementConfig.gracePeriodDays).toBe(0);
      expect(enforcementConfig.monitoring.alertThresholds.violationCount).toBe(1);
      expect(enforcementConfig.monitoring.alertThresholds.timeWindow).toBe('1hour');
    }));
  });
  describe('getCurrentRequirements', function () {
    it('should return immutable copy of requirements', function () {
      var requirements1 = manager.getCurrentRequirements();
      var requirements2 = manager.getCurrentRequirements();
      expect(requirements1).toEqual(requirements2);
      expect(requirements1).not.toBe(requirements2);
      requirements1.version = 'modified';
      var requirements3 = manager.getCurrentRequirements();
      expect(requirements3.version).toBe('2.5.0');
    });
    it('should include all constitutional sections', function () {
      var requirements = manager.getCurrentRequirements();
      var expectedSections = ['Testing (NON-NEGOTIABLE)', 'Simplicity', 'Architecture', 'Observability', 'Versioning'];
      for (var section of expectedSections) {
        expect(requirements.requirementsBySection[section]).toBeDefined();
        expect(requirements.prohibitionsBySection[section]).toBeDefined();
        expect(Array.isArray(requirements.requirementsBySection[section])).toBe(true);
        expect(Array.isArray(requirements.prohibitionsBySection[section])).toBe(true);
      }
    });
    it('should have consistent enforcement mechanisms', function () {
      var requirements = manager.getCurrentRequirements();
      for (var enforcement of requirements.activeEnforcements) {
        expect(enforcement.type).toBeDefined();
        expect(enforcement.configuration).toBeDefined();
        expect(typeof enforcement.active).toBe('boolean');
        expect(enforcement.configuration.onFailure).toMatch(/^(block|warn|report)$/);
      }
    });
  });
  describe('validateCompliance', function () {
    it('should validate codebase TypeScript compliance', (0, _asyncToGenerator2.default)(function* () {
      var target = {
        type: 'codebase',
        identifier: 'test-codebase',
        aspects: ['typescript']
      };
      var result = yield manager.validateCompliance(target);
      expect(result).toBeDefined();
      expect(typeof result.compliant).toBe('boolean');
      expect(Array.isArray(result.violations)).toBe(true);
      expect(typeof result.score).toBe('number');
      expect(result.score).toBeGreaterThanOrEqual(0);
      expect(result.score).toBeLessThanOrEqual(100);
      expect(Array.isArray(result.recommendations)).toBe(true);
      expect(result.validatedAt).toBeInstanceOf(Date);
    }));
    it('should validate testing compliance', (0, _asyncToGenerator2.default)(function* () {
      var target = {
        type: 'codebase',
        identifier: 'test-testing',
        aspects: ['testing']
      };
      var result = yield manager.validateCompliance(target);
      expect(result).toBeDefined();
      if (!result.compliant) {
        var testViolations = result.violations.filter(function (v) {
          return v.requirement.includes('devbox run test');
        });
        if (testViolations.length > 0) {
          expect(testViolations[0].severity).toBe('critical');
        }
      }
    }));
    it('should provide appropriate recommendations for violations', (0, _asyncToGenerator2.default)(function* () {
      var target = {
        type: 'codebase',
        identifier: 'test-recommendations',
        aspects: ['typescript', 'testing']
      };
      var result = yield manager.validateCompliance(target);
      if (result.violations.length > 0) {
        expect(result.recommendations.length).toBeGreaterThan(0);
        for (var recommendation of result.recommendations) {
          expect(typeof recommendation).toBe('string');
          expect(recommendation.length).toBeGreaterThan(0);
        }
        var hasTypeScriptRecommendation = result.recommendations.some(function (r) {
          return r.includes('TypeScript') || r.includes('compilation');
        });
        expect(hasTypeScriptRecommendation).toBe(true);
      }
    }));
    it('should calculate compliance score correctly', (0, _asyncToGenerator2.default)(function* () {
      var target = {
        type: 'codebase',
        identifier: 'test-scoring',
        aspects: ['typescript', 'testing']
      };
      var result = yield manager.validateCompliance(target);
      expect(result.score).toBeGreaterThanOrEqual(0);
      expect(result.score).toBeLessThanOrEqual(100);
      if (result.compliant) {
        expect(result.score).toBe(100);
        expect(result.violations).toHaveLength(0);
      } else {
        expect(result.score).toBeLessThan(100);
        expect(result.violations.length).toBeGreaterThan(0);
      }
    }));
    it('should handle different compliance target types', (0, _asyncToGenerator2.default)(function* () {
      var targets = [{
        type: 'codebase',
        identifier: 'code',
        aspects: ['typescript']
      }, {
        type: 'configuration',
        identifier: 'config',
        aspects: ['typescript']
      }, {
        type: 'process',
        identifier: 'proc',
        aspects: ['testing']
      }];
      for (var target of targets) {
        var result = yield manager.validateCompliance(target);
        expect(result).toBeDefined();
        expect(typeof result.compliant).toBe('boolean');
      }
    }));
  });
  describe('Edge Cases and Error Handling', function () {
    it('should handle empty amendment fields gracefully', (0, _asyncToGenerator2.default)(function* () {
      var amendment = {
        id: 'empty-amendment',
        title: '',
        description: '',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: [],
        newProhibitions: [],
        enforcementMechanisms: [],
        rationale: '',
        expectedImpact: ''
      };
      var tracking = yield manager.proposeAmendment(amendment);
      expect(tracking.amendmentId).toBe('empty-amendment');
      expect(tracking.status).toBe('proposed');
    }));
    it('should handle review without suggestions', (0, _asyncToGenerator2.default)(function* () {
      var amendment = {
        id: 'no-suggestions-amendment',
        title: 'No Suggestions Amendment',
        description: 'Testing review without suggestions',
        section: 'Testing (NON-NEGOTIABLE)',
        newRequirements: [],
        newProhibitions: [],
        enforcementMechanisms: [],
        rationale: 'Test',
        expectedImpact: 'Test'
      };
      yield manager.proposeAmendment(amendment);
      var review = {
        reviewerId: 'reviewer-minimal',
        reviewedAt: new Date(),
        decision: 'approve',
        comments: 'Looks good'
      };
      var tracking = yield manager.reviewAmendment(amendment.id, review);
      expect(tracking.reviews[0].suggestions).toBeUndefined();
    }));
    it('should handle compliance validation errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var target = {
        type: 'codebase',
        identifier: 'error-test',
        aspects: ['typescript', 'testing']
      };
      var result = yield manager.validateCompliance(target);
      expect(result).toBeDefined();
      expect(typeof result.compliant).toBe('boolean');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,