d2abf28d1d8433442f743bb84218fb1a
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};
var ANDROID_BASE_DENSITY = 160;
function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }
  if (Number.isFinite(scale) && scale > 0) {
    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
  }
  throw new Error('no such scale ' + scale.toString());
}
var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'webp', 'xml']);
function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }
  return 'drawable-' + suffix;
}
function getAndroidResourceIdentifier(asset) {
  return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^(?:assets|assetsunstable_path)_/, '');
}
function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  return basePath.startsWith('/') ? basePath.slice(1) : basePath;
}
module.exports = {
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmRyb2lkU2NhbGVTdWZmaXgiLCJBTkRST0lEX0JBU0VfREVOU0lUWSIsImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwidG9TdHJpbmciLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIk1hdGgiLCJyb3VuZCIsIkVycm9yIiwiZHJhd2FibGVGaWxlVHlwZXMiLCJTZXQiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiYXNzZXQiLCJoYXMiLCJ0eXBlIiwic3VmZml4IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJiYXNlUGF0aCIsImh0dHBTZXJ2ZXJMb2NhdGlvbiIsInN0YXJ0c1dpdGgiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwYXRoLXN1cHBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyo6OiBpbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnLi9yZWdpc3RyeS5qcyc7ICovXG5cbmNvbnN0IGFuZHJvaWRTY2FsZVN1ZmZpeCA9IHtcbiAgJzAuNzUnOiAnbGRwaScsXG4gICcxJzogJ21kcGknLFxuICAnMS41JzogJ2hkcGknLFxuICAnMic6ICd4aGRwaScsXG4gICczJzogJ3h4aGRwaScsXG4gICc0JzogJ3h4eGhkcGknLFxufTtcblxuY29uc3QgQU5EUk9JRF9CQVNFX0RFTlNJVFkgPSAxNjA7XG5cbi8qKlxuICogRklYTUU6IHVzaW5nIG51bWJlciB0byByZXByZXNlbnQgZGlzY3JldGUgc2NhbGUgbnVtYmVycyBpcyBmcmFnaWxlIGluIGVzc2VuY2UgYmVjYXVzZSBvZlxuICogZmxvYXRpbmcgcG9pbnQgbnVtYmVycyBpbXByZWNpc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlIC8qOiBudW1iZXIgKi8pIC8qOiBzdHJpbmcgKi8ge1xuICBpZiAoc2NhbGUudG9TdHJpbmcoKSBpbiBhbmRyb2lkU2NhbGVTdWZmaXgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtY29tcHV0ZWQtcHJvcF1cbiAgICByZXR1cm4gYW5kcm9pZFNjYWxlU3VmZml4W3NjYWxlLnRvU3RyaW5nKCldO1xuICB9XG4gIC8vIE5PVEU6IEFuZHJvaWQgR3JhZGxlIFBsdWdpbiBkb2VzIG5vdCBmdWxseSBzdXBwb3J0IHRoZSBubm5kcGkgZm9ybWF0LlxuICAvLyBTZWUgaHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvNzI4ODQ0MzVcbiAgaWYgKE51bWJlci5pc0Zpbml0ZShzY2FsZSkgJiYgc2NhbGUgPiAwKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoc2NhbGUgKiBBTkRST0lEX0JBU0VfREVOU0lUWSkgKyAnZHBpJztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ25vIHN1Y2ggc2NhbGUgJyArIHNjYWxlLnRvU3RyaW5nKCkpO1xufVxuXG4vLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL3Jlc291cmNlcy9kcmF3YWJsZS1yZXNvdXJjZS5odG1sXG5jb25zdCBkcmF3YWJsZUZpbGVUeXBlcyA9IG5ldyBTZXQoW1xuICAnZ2lmJyxcbiAgJ2pwZWcnLFxuICAnanBnJyxcbiAgJ2t0eCcsXG4gICdwbmcnLFxuICAnd2VicCcsXG4gICd4bWwnLFxuXSk7XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUoXG4gIGFzc2V0IC8qOiBQYWNrYWdlckFzc2V0ICovLFxuICBzY2FsZSAvKjogbnVtYmVyICovLFxuKSAvKjogc3RyaW5nICovIHtcbiAgaWYgKCFkcmF3YWJsZUZpbGVUeXBlcy5oYXMoYXNzZXQudHlwZSkpIHtcbiAgICByZXR1cm4gJ3Jhdyc7XG4gIH1cbiAgY29uc3Qgc3VmZml4ID0gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlKTtcbiAgaWYgKCFzdWZmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkRvbid0IGtub3cgd2hpY2ggYW5kcm9pZCBkcmF3YWJsZSBzdWZmaXggdG8gdXNlIGZvciBzY2FsZTogXCIgK1xuICAgICAgICBzY2FsZSArXG4gICAgICAgICdcXG5Bc3NldDogJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGFzc2V0LCBudWxsLCAnXFx0JykgK1xuICAgICAgICAnXFxuUG9zc2libGUgc2NhbGVzIGFyZTonICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYW5kcm9pZFNjYWxlU3VmZml4LCBudWxsLCAnXFx0JyksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gJ2RyYXdhYmxlLScgKyBzdWZmaXg7XG59XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoXG4gIGFzc2V0IC8qOiBQYWNrYWdlckFzc2V0ICovLFxuKSAvKjogc3RyaW5nICovIHtcbiAgcmV0dXJuIChnZXRCYXNlUGF0aChhc3NldCkgKyAnLycgKyBhc3NldC5uYW1lKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpIC8vIEVuY29kZSBmb2xkZXIgc3RydWN0dXJlIGluIGZpbGUgbmFtZVxuICAgIC5yZXBsYWNlKC8oW15hLXowLTlfXSkvZywgJycpIC8vIFJlbW92ZSBpbGxlZ2FsIGNoYXJzXG4gICAgLnJlcGxhY2UoL14oPzphc3NldHN8YXNzZXRzdW5zdGFibGVfcGF0aClfLywgJycpOyAvLyBSZW1vdmUgXCJhc3NldHNfXCIgb3IgXCJhc3NldHN1bnN0YWJsZV9wYXRoX1wiIHByZWZpeFxufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGF0aChhc3NldCAvKjogUGFja2FnZXJBc3NldCAqLykgLyo6IHN0cmluZyAqLyB7XG4gIGNvbnN0IGJhc2VQYXRoID0gYXNzZXQuaHR0cFNlcnZlckxvY2F0aW9uO1xuICByZXR1cm4gYmFzZVBhdGguc3RhcnRzV2l0aCgnLycpID8gYmFzZVBhdGguc2xpY2UoMSkgOiBiYXNlUGF0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUsXG4gIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIsXG4gIGdldEJhc2VQYXRoLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFJWixJQUFNQSxrQkFBa0IsR0FBRztFQUN6QixNQUFNLEVBQUUsTUFBTTtFQUNkLEdBQUcsRUFBRSxNQUFNO0VBQ1gsS0FBSyxFQUFFLE1BQU07RUFDYixHQUFHLEVBQUUsT0FBTztFQUNaLEdBQUcsRUFBRSxRQUFRO0VBQ2IsR0FBRyxFQUFFO0FBQ1AsQ0FBQztBQUVELElBQU1DLG9CQUFvQixHQUFHLEdBQUc7QUFNaEMsU0FBU0MscUJBQXFCQSxDQUFDQyxLQUFLLEVBQThCO0VBQ2hFLElBQUlBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsSUFBSUosa0JBQWtCLEVBQUU7SUFFMUMsT0FBT0Esa0JBQWtCLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztFQUM3QztFQUdBLElBQUlDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDSCxLQUFLLENBQUMsSUFBSUEsS0FBSyxHQUFHLENBQUMsRUFBRTtJQUN2QyxPQUFPSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0wsS0FBSyxHQUFHRixvQkFBb0IsQ0FBQyxHQUFHLEtBQUs7RUFDekQ7RUFDQSxNQUFNLElBQUlRLEtBQUssQ0FBQyxnQkFBZ0IsR0FBR04sS0FBSyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3REO0FBR0EsSUFBTU0saUJBQWlCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQ2hDLEtBQUssRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsTUFBTSxFQUNOLEtBQUssQ0FDTixDQUFDO0FBRUYsU0FBU0MsNEJBQTRCQSxDQUNuQ0MsS0FBSyxFQUNMVixLQUFLLEVBQ1M7RUFDZCxJQUFJLENBQUNPLGlCQUFpQixDQUFDSSxHQUFHLENBQUNELEtBQUssQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDdEMsT0FBTyxLQUFLO0VBQ2Q7RUFDQSxJQUFNQyxNQUFNLEdBQUdkLHFCQUFxQixDQUFDQyxLQUFLLENBQUM7RUFDM0MsSUFBSSxDQUFDYSxNQUFNLEVBQUU7SUFDWCxNQUFNLElBQUlQLEtBQUssQ0FDYiw2REFBNkQsR0FDM0ROLEtBQUssR0FDTCxXQUFXLEdBQ1hjLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUNqQyx3QkFBd0IsR0FDeEJJLElBQUksQ0FBQ0MsU0FBUyxDQUFDbEIsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FDakQsQ0FBQztFQUNIO0VBQ0EsT0FBTyxXQUFXLEdBQUdnQixNQUFNO0FBQzdCO0FBRUEsU0FBU0csNEJBQTRCQSxDQUNuQ04sS0FBSyxFQUNTO0VBQ2QsT0FBTyxDQUFDTyxXQUFXLENBQUNQLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBR0EsS0FBSyxDQUFDUSxJQUFJLEVBQzFDQyxXQUFXLENBQUMsQ0FBQyxDQUNiQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUNuQkEsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FDNUJBLE9BQU8sQ0FBQyxrQ0FBa0MsRUFBRSxFQUFFLENBQUM7QUFDcEQ7QUFFQSxTQUFTSCxXQUFXQSxDQUFDUCxLQUFLLEVBQXFDO0VBQzdELElBQU1XLFFBQVEsR0FBR1gsS0FBSyxDQUFDWSxrQkFBa0I7RUFDekMsT0FBT0QsUUFBUSxDQUFDRSxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUdGLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHSCxRQUFRO0FBQ2hFO0FBRUFJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZqQiw0QkFBNEIsRUFBNUJBLDRCQUE0QjtFQUM1Qk8sNEJBQTRCLEVBQTVCQSw0QkFBNEI7RUFDNUJDLFdBQVcsRUFBWEE7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119