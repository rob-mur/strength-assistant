56acd51e6f773267fec1ce784c707db7
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initFirebase = exports.getDb = void 0;
exports.initializeFirebaseServices = initializeFirebaseServices;
var _reactNative = require("react-native");
var _logger = require("./logger");
var getFirebaseModule = function getFirebaseModule() {
  if (_reactNative.Platform.OS === "web") {
    return require("./firebase.web");
  } else {
    return require("./firebase.native");
  }
};
var getAuthModule = function getAuthModule() {
  if (_reactNative.Platform.OS === "web") {
    return require("./auth.web");
  } else {
    return require("./auth.native");
  }
};
function initializeFirebaseServices() {
  var startTime = Date.now();
  var platform = _reactNative.Platform.OS === 'web' ? 'Web' : 'Native';
  _logger.logger.info("Starting Firebase services initialization", {
    service: "Firebase Initializer",
    platform: platform,
    operation: "init_all"
  });
  try {
    var firebaseModule = getFirebaseModule();
    var authModule = getAuthModule();
    firebaseModule.initFirebase();
    authModule.initAuth();
    _logger.logger.info("Firebase services initialization complete", {
      service: "Firebase Initializer",
      platform: platform,
      operation: "init_all",
      duration: Date.now() - startTime
    });
  } catch (error) {
    _logger.logger.error("Firebase services initialization failed", {
      service: "Firebase Initializer",
      platform: platform,
      operation: "init_all",
      duration: Date.now() - startTime,
      error: {
        message: error.message,
        stack: error.stack
      }
    });
    throw error;
  }
}
var initFirebase = exports.initFirebase = function initFirebase() {
  return getFirebaseModule().initFirebase();
};
var getDb = exports.getDb = function getDb() {
  return getFirebaseModule().getDb();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2xvZ2dlciIsImdldEZpcmViYXNlTW9kdWxlIiwiUGxhdGZvcm0iLCJPUyIsImdldEF1dGhNb2R1bGUiLCJpbml0aWFsaXplRmlyZWJhc2VTZXJ2aWNlcyIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJwbGF0Zm9ybSIsImxvZ2dlciIsImluZm8iLCJzZXJ2aWNlIiwib3BlcmF0aW9uIiwiZmlyZWJhc2VNb2R1bGUiLCJhdXRoTW9kdWxlIiwiaW5pdEZpcmViYXNlIiwiaW5pdEF1dGgiLCJkdXJhdGlvbiIsImVycm9yIiwibWVzc2FnZSIsInN0YWNrIiwiZXhwb3J0cyIsImdldERiIl0sInNvdXJjZXMiOlsiaW5pdGlhbGl6ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIEZpcmViYXNlSW5pdGlhbGl6ZXIge1xuXHRpbml0RmlyZWJhc2UoKTogdm9pZDtcblx0aW5pdEF1dGgoKTogdm9pZDtcblx0Z2V0RGIoKTogYW55O1xufVxuXG4vLyBVc2UgZHluYW1pYyBpbXBvcnRzIHRvIGF2b2lkIEVTTGludCByZXF1aXJlKCkgd2FybmluZ3NcbmNvbnN0IGdldEZpcmViYXNlTW9kdWxlID0gKCk6IEZpcmViYXNlSW5pdGlhbGl6ZXIgPT4ge1xuXHRpZiAoUGxhdGZvcm0uT1MgPT09IFwid2ViXCIpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuXHRcdHJldHVybiByZXF1aXJlKFwiLi9maXJlYmFzZS53ZWJcIik7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcblx0XHRyZXR1cm4gcmVxdWlyZShcIi4vZmlyZWJhc2UubmF0aXZlXCIpO1xuXHR9XG59O1xuXG5jb25zdCBnZXRBdXRoTW9kdWxlID0gKCk6IGFueSA9PiB7XG5cdGlmIChQbGF0Zm9ybS5PUyA9PT0gXCJ3ZWJcIikge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG5cdFx0cmV0dXJuIHJlcXVpcmUoXCIuL2F1dGgud2ViXCIpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG5cdFx0cmV0dXJuIHJlcXVpcmUoXCIuL2F1dGgubmF0aXZlXCIpO1xuXHR9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUZpcmViYXNlU2VydmljZXMoKTogdm9pZCB7XG5cdGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cdGNvbnN0IHBsYXRmb3JtID0gUGxhdGZvcm0uT1MgPT09ICd3ZWInID8gJ1dlYicgOiAnTmF0aXZlJztcblx0XG5cdGxvZ2dlci5pbmZvKFwiU3RhcnRpbmcgRmlyZWJhc2Ugc2VydmljZXMgaW5pdGlhbGl6YXRpb25cIiwge1xuXHRcdHNlcnZpY2U6IFwiRmlyZWJhc2UgSW5pdGlhbGl6ZXJcIixcblx0XHRwbGF0Zm9ybSxcblx0XHRvcGVyYXRpb246IFwiaW5pdF9hbGxcIlxuXHR9KTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IGZpcmViYXNlTW9kdWxlID0gZ2V0RmlyZWJhc2VNb2R1bGUoKTtcblx0XHRjb25zdCBhdXRoTW9kdWxlID0gZ2V0QXV0aE1vZHVsZSgpO1xuXHRcdFxuXHRcdGZpcmViYXNlTW9kdWxlLmluaXRGaXJlYmFzZSgpO1xuXHRcdGF1dGhNb2R1bGUuaW5pdEF1dGgoKTtcblx0XHRcblx0XHRsb2dnZXIuaW5mbyhcIkZpcmViYXNlIHNlcnZpY2VzIGluaXRpYWxpemF0aW9uIGNvbXBsZXRlXCIsIHtcblx0XHRcdHNlcnZpY2U6IFwiRmlyZWJhc2UgSW5pdGlhbGl6ZXJcIixcblx0XHRcdHBsYXRmb3JtLFxuXHRcdFx0b3BlcmF0aW9uOiBcImluaXRfYWxsXCIsXG5cdFx0XHRkdXJhdGlvbjogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcjogYW55KSB7XG5cdFx0bG9nZ2VyLmVycm9yKFwiRmlyZWJhc2Ugc2VydmljZXMgaW5pdGlhbGl6YXRpb24gZmFpbGVkXCIsIHtcblx0XHRcdHNlcnZpY2U6IFwiRmlyZWJhc2UgSW5pdGlhbGl6ZXJcIixcblx0XHRcdHBsYXRmb3JtLFxuXHRcdFx0b3BlcmF0aW9uOiBcImluaXRfYWxsXCIsXG5cdFx0XHRkdXJhdGlvbjogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSxcblx0XHRcdGVycm9yOiB7XG5cdFx0XHRcdG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG5cdFx0XHRcdHN0YWNrOiBlcnJvci5zdGFja1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBpbml0RmlyZWJhc2UgPSAoKSA9PiBnZXRGaXJlYmFzZU1vZHVsZSgpLmluaXRGaXJlYmFzZSgpO1xuZXhwb3J0IGNvbnN0IGdldERiID0gKCkgPT4gZ2V0RmlyZWJhc2VNb2R1bGUoKS5nZXREYigpOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFTQSxJQUFNRSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFBLEVBQThCO0VBQ3BELElBQUlDLHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEVBQUU7SUFFMUIsT0FBT0osT0FBTyxDQUFDLGdCQUFnQixDQUFDO0VBQ2pDLENBQUMsTUFBTTtJQUVOLE9BQU9BLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztFQUNwQztBQUNELENBQUM7QUFFRCxJQUFNSyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUEsRUFBYztFQUNoQyxJQUFJRixxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxFQUFFO0lBRTFCLE9BQU9KLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDN0IsQ0FBQyxNQUFNO0lBRU4sT0FBT0EsT0FBTyxDQUFDLGVBQWUsQ0FBQztFQUNoQztBQUNELENBQUM7QUFFTSxTQUFTTSwwQkFBMEJBLENBQUEsRUFBUztFQUNsRCxJQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7RUFDNUIsSUFBTUMsUUFBUSxHQUFHUCxxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxRQUFRO0VBRXpETyxjQUFNLENBQUNDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtJQUN4REMsT0FBTyxFQUFFLHNCQUFzQjtJQUMvQkgsUUFBUSxFQUFSQSxRQUFRO0lBQ1JJLFNBQVMsRUFBRTtFQUNaLENBQUMsQ0FBQztFQUVGLElBQUk7SUFDSCxJQUFNQyxjQUFjLEdBQUdiLGlCQUFpQixDQUFDLENBQUM7SUFDMUMsSUFBTWMsVUFBVSxHQUFHWCxhQUFhLENBQUMsQ0FBQztJQUVsQ1UsY0FBYyxDQUFDRSxZQUFZLENBQUMsQ0FBQztJQUM3QkQsVUFBVSxDQUFDRSxRQUFRLENBQUMsQ0FBQztJQUVyQlAsY0FBTSxDQUFDQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7TUFDeERDLE9BQU8sRUFBRSxzQkFBc0I7TUFDL0JILFFBQVEsRUFBUkEsUUFBUTtNQUNSSSxTQUFTLEVBQUUsVUFBVTtNQUNyQkssUUFBUSxFQUFFWCxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUdGO0lBQ3hCLENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQyxPQUFPYSxLQUFVLEVBQUU7SUFDcEJULGNBQU0sQ0FBQ1MsS0FBSyxDQUFDLHlDQUF5QyxFQUFFO01BQ3ZEUCxPQUFPLEVBQUUsc0JBQXNCO01BQy9CSCxRQUFRLEVBQVJBLFFBQVE7TUFDUkksU0FBUyxFQUFFLFVBQVU7TUFDckJLLFFBQVEsRUFBRVgsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHRixTQUFTO01BQ2hDYSxLQUFLLEVBQUU7UUFDTkMsT0FBTyxFQUFFRCxLQUFLLENBQUNDLE9BQU87UUFDdEJDLEtBQUssRUFBRUYsS0FBSyxDQUFDRTtNQUNkO0lBQ0QsQ0FBQyxDQUFDO0lBQ0YsTUFBTUYsS0FBSztFQUNaO0FBQ0Q7QUFFTyxJQUFNSCxZQUFZLEdBQUFNLE9BQUEsQ0FBQU4sWUFBQSxHQUFHLFNBQWZBLFlBQVlBLENBQUE7RUFBQSxPQUFTZixpQkFBaUIsQ0FBQyxDQUFDLENBQUNlLFlBQVksQ0FBQyxDQUFDO0FBQUE7QUFDN0QsSUFBTU8sS0FBSyxHQUFBRCxPQUFBLENBQUFDLEtBQUEsR0FBRyxTQUFSQSxLQUFLQSxDQUFBO0VBQUEsT0FBU3RCLGlCQUFpQixDQUFDLENBQUMsQ0FBQ3NCLEtBQUssQ0FBQyxDQUFDO0FBQUEiLCJpZ25vcmVMaXN0IjpbXX0=