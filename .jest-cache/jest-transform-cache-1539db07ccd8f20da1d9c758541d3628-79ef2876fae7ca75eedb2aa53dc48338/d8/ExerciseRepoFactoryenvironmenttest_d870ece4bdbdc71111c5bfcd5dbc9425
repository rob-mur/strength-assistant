4b8716c67e9e4e1a8ddae22af0bec406
_getJestObj().mock('@/lib/repo/FirebaseExerciseRepo', function () {
  return {
    FirebaseExerciseRepo: {
      getInstance: jest.fn().mockReturnValue({
        type: 'firebase'
      })
    }
  };
});
_getJestObj().mock('@/lib/repo/SupabaseExerciseRepo', function () {
  return {
    SupabaseExerciseRepo: {
      getInstance: jest.fn().mockReturnValue({
        type: 'supabase'
      })
    }
  };
});
_getJestObj().mock('expo-constants', function () {
  return {
    default: {
      expoConfig: {
        extra: {}
      }
    }
  };
});
var _ExerciseRepoFactory = require("@/lib/repo/ExerciseRepoFactory");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseRepoFactory - Environment Variable Handling', function () {
  var originalEnv = process.env;
  beforeEach(function () {
    process.env = Object.assign({}, originalEnv);
    _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
    jest.clearAllMocks();
  });
  afterEach(function () {
    process.env = originalEnv;
  });
  describe('Dynamic environment variable changes', function () {
    test('switches from Firebase to Supabase when env var changes', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      var firebaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(firebaseInstance.type).toBe('firebase');
      _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
      process.env.USE_SUPABASE_DATA = 'true';
      var supabaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(supabaseInstance.type).toBe('supabase');
    });
    test('switches from Supabase to Firebase when env var changes', function () {
      process.env.USE_SUPABASE_DATA = 'true';
      var supabaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(supabaseInstance.type).toBe('supabase');
      _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
      process.env.USE_SUPABASE_DATA = 'false';
      var firebaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(firebaseInstance.type).toBe('firebase');
    });
    test('handles undefined to true transition', function () {
      delete process.env.USE_SUPABASE_DATA;
      var firebaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(firebaseInstance.type).toBe('firebase');
      _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
      process.env.USE_SUPABASE_DATA = 'true';
      var supabaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(supabaseInstance.type).toBe('supabase');
    });
    test('handles true to undefined transition', function () {
      process.env.USE_SUPABASE_DATA = 'true';
      var supabaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(supabaseInstance.type).toBe('supabase');
      _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
      delete process.env.USE_SUPABASE_DATA;
      var firebaseInstance = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(firebaseInstance.type).toBe('firebase');
    });
  });
  describe('getCurrentDataSource with environment changes', function () {
    test('reflects environment variable changes', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
      process.env.USE_SUPABASE_DATA = 'true';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('supabase');
      process.env.USE_SUPABASE_DATA = 'false';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
      delete process.env.USE_SUPABASE_DATA;
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
  });
  describe('Edge cases and error conditions', function () {
    test('handles malformed environment variable values', function () {
      var testCases = ['TRUE', 'True', 'false', 'FALSE', 'yes', 'no', '1', '0', ''];
      testCases.forEach(function (value) {
        _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
        process.env.USE_SUPABASE_DATA = value;
        var expectedResult = value.toLowerCase() === 'true' ? 'supabase' : 'firebase';
        expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe(expectedResult);
      });
    });
    test('prefers process.env over Expo Constants when both are set', function () {
      var Constants = require('expo-constants').default;
      Constants.expoConfig.extra.useSupabaseData = true;
      process.env.USE_SUPABASE_DATA = 'false';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
    test('falls back to Expo Constants when process.env is undefined', function () {
      delete process.env.USE_SUPABASE_DATA;
      var Constants = require('expo-constants').default;
      Constants.expoConfig.extra.useSupabaseData = true;
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('supabase');
    });
    test('handles missing Expo Constants gracefully', function () {
      delete process.env.USE_SUPABASE_DATA;
      var Constants = require('expo-constants').default;
      Constants.expoConfig.extra = {};
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
  });
  describe('Dynamic require behavior', function () {
    test('handles Expo Constants require errors', function () {
      var originalRequire = require;
      var mockRequire = jest.fn().mockImplementation(function (module) {
        if (module === 'expo-constants') {
          throw new Error('Module not found');
        }
        return originalRequire(module);
      });
      global.require = mockRequire;
      delete process.env.USE_SUPABASE_DATA;
      try {
        expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
      } finally {
        global.require = originalRequire;
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,