da13d22338f197cb50d8f23539714e94
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireNativeViewManager = requireNativeViewManager;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = require("react");
var _reactNative = require("react-native");
var _NativeComponentRegistry = require("react-native/Libraries/NativeComponent/NativeComponentRegistry");
var _requireNativeModule = require("./requireNativeModule");
var _jsxRuntime = require("react/jsx-runtime");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var nativeComponentsCache = new Map();
function requireNativeComponent(moduleName, viewName) {
  var _globalThis$expo$__ex, _globalThis$expo;
  var appIdentifier = (_globalThis$expo$__ex = (_globalThis$expo = globalThis.expo) == null ? void 0 : _globalThis$expo['__expo_app_identifier__']) != null ? _globalThis$expo$__ex : '';
  var viewNameSuffix = appIdentifier ? `_${appIdentifier}` : '';
  var nativeViewName = viewName ? `ViewManagerAdapter_${moduleName}_${viewName}${viewNameSuffix}` : `ViewManagerAdapter_${moduleName}${viewNameSuffix}`;
  return (0, _NativeComponentRegistry.get)(nativeViewName, function () {
    var _globalThis$expo2;
    var expoViewConfig = (_globalThis$expo2 = globalThis.expo) == null ? void 0 : _globalThis$expo2.getViewConfig(moduleName, viewName);
    if (!expoViewConfig) {
      console.warn('Unable to get the view config for %s from module &s', viewName != null ? viewName : 'default view', moduleName);
    }
    return Object.assign({
      uiViewClassName: nativeViewName
    }, expoViewConfig);
  });
}
function requireCachedNativeComponent(moduleName, viewName) {
  var cacheKey = `${moduleName}_${viewName}`;
  var cachedNativeComponent = nativeComponentsCache.get(cacheKey);
  if (!cachedNativeComponent) {
    var nativeComponent = requireNativeComponent(moduleName, viewName);
    nativeComponentsCache.set(cacheKey, nativeComponent);
    return nativeComponent;
  }
  return cachedNativeComponent;
}
function requireNativeViewManager(moduleName, viewName) {
  var viewManagersMetadata = _reactNative.NativeModules.NativeUnimoduleProxy.viewManagersMetadata;
  var viewManagerConfig = viewManagersMetadata == null ? void 0 : viewManagersMetadata[moduleName];
  if (__DEV__ && !viewManagerConfig) {
    var exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');
    console.warn(`The native view manager for module(${moduleName}) ${viewName ? ` required by name (${viewName})` : ''}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`);
  }
  var ReactNativeComponent = requireCachedNativeComponent(moduleName, viewName);
  var NativeComponent = function (_PureComponent) {
    function NativeComponent() {
      var _this;
      (0, _classCallCheck2.default)(this, NativeComponent);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, NativeComponent, [].concat(args));
      _this.nativeRef = (0, _react.createRef)();
      _this.nativeTag = null;
      return _this;
    }
    (0, _inherits2.default)(NativeComponent, _PureComponent);
    return (0, _createClass2.default)(NativeComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.nativeTag = (0, _reactNative.findNodeHandle)(this.nativeRef.current);
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsx)(ReactNativeComponent, Object.assign({}, this.props, {
          ref: this.nativeRef
        }));
      }
    }]);
  }(_react.PureComponent);
  NativeComponent.displayName = viewName ? viewName : moduleName;
  try {
    var nativeModule = (0, _requireNativeModule.requireNativeModule)(moduleName);
    var nativeViewPrototype = nativeModule.ViewPrototypes[viewName ? `${moduleName}_${viewName}` : moduleName];
    if (nativeViewPrototype) {
      Object.assign(NativeComponent.prototype, nativeViewPrototype);
    }
  } catch (_unused) {}
  return NativeComponent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,