e9350d76e4e22af9677d158008f7e4e4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _Icon = _interopRequireDefault(require("../Icon"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var ICON_SIZE = 24;
var ListIcon = function ListIcon(_ref) {
  var icon = _ref.icon,
    iconColor = _ref.color,
    style = _ref.style,
    themeOverrides = _ref.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  return React.createElement(_reactNative.View, {
    style: [theme.isV3 ? styles.itemV3 : styles.item, style],
    pointerEvents: "box-none"
  }, React.createElement(_Icon.default, {
    source: icon,
    size: ICON_SIZE,
    color: iconColor,
    theme: theme
  }));
};
var styles = _reactNative.StyleSheet.create({
  item: {
    margin: 8,
    height: 40,
    width: 40,
    alignItems: 'center',
    justifyContent: 'center'
  },
  itemV3: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
ListIcon.displayName = 'List.Icon';
var _default = exports.default = ListIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtaW5nIiwiX0ljb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidCIsIldlYWtNYXAiLCJyIiwibiIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiSUNPTl9TSVpFIiwiTGlzdEljb24iLCJfcmVmIiwiaWNvbiIsImljb25Db2xvciIsImNvbG9yIiwic3R5bGUiLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwidXNlSW50ZXJuYWxUaGVtZSIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiaXNWMyIsInN0eWxlcyIsIml0ZW1WMyIsIml0ZW0iLCJwb2ludGVyRXZlbnRzIiwic291cmNlIiwic2l6ZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJtYXJnaW4iLCJoZWlnaHQiLCJ3aWR0aCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvTGlzdC9MaXN0SWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUEyQyxTQUFBSSx1QkFBQUMsQ0FBQTtFQUFBLE9BQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRyxDQUFBO0VBQUEseUJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFWLHVCQUFBLFlBQUFBLHdCQUFBTSxDQUFBLEVBQUFHLENBQUE7SUFBQSxLQUFBQSxDQUFBLElBQUFILENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLFNBQUFELENBQUE7SUFBQSxJQUFBTyxDQUFBO01BQUFDLENBQUE7TUFBQUMsQ0FBQTtRQUFBQyxTQUFBO1FBQUFSLE9BQUEsRUFBQUY7TUFBQTtJQUFBLGFBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVMsQ0FBQTtJQUFBLElBQUFGLENBQUEsR0FBQUosQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUE7TUFBQSxJQUFBRSxDQUFBLENBQUFJLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTyxDQUFBLENBQUFLLEdBQUEsQ0FBQVosQ0FBQTtNQUFBTyxDQUFBLENBQUFNLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUyxDQUFBO0lBQUE7SUFBQSxTQUFBTixFQUFBLElBQUFILENBQUEsZ0JBQUFHLEVBQUEsT0FBQVcsY0FBQSxDQUFBQyxJQUFBLENBQUFmLENBQUEsRUFBQUcsRUFBQSxPQUFBSyxDQUFBLElBQUFELENBQUEsR0FBQVMsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWxCLENBQUEsRUFBQUcsRUFBQSxPQUFBSyxDQUFBLENBQUFJLEdBQUEsSUFBQUosQ0FBQSxDQUFBSyxHQUFBLElBQUFOLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTixFQUFBLEVBQUFLLENBQUEsSUFBQUMsQ0FBQSxDQUFBTixFQUFBLElBQUFILENBQUEsQ0FBQUcsRUFBQTtJQUFBLE9BQUFNLENBQUE7RUFBQSxHQUFBVCxDQUFBLEVBQUFHLENBQUE7QUFBQTtBQWtCM0MsSUFBTWdCLFNBQVMsR0FBRyxFQUFFO0FBcUJwQixJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBQUMsSUFBQSxFQUtEO0VBQUEsSUFKWEMsSUFBSSxHQUFBRCxJQUFBLENBQUpDLElBQUk7SUFDR0MsU0FBUyxHQUFBRixJQUFBLENBQWhCRyxLQUFLO0lBQ0xDLEtBQUssR0FBQUosSUFBQSxDQUFMSSxLQUFLO0lBQ0VDLGNBQUEsR0FBQUwsSUFBQSxDQUFQTSxLQUFLO0VBRUwsSUFBTUEsS0FBSyxHQUFHLElBQUE5QixRQUFBLENBQUErQixnQkFBZ0IsRUFBQ0YsY0FBYyxDQUFDO0VBRTlDLE9BQ0VqQyxLQUFBLENBQUFvQyxhQUFBLENBQUNqQyxZQUFBLENBQUFrQyxJQUFJO0lBQ0hMLEtBQUssRUFBRSxDQUFDRSxLQUFLLENBQUNJLElBQUksR0FBR0MsTUFBTSxDQUFDQyxNQUFNLEdBQUdELE1BQU0sQ0FBQ0UsSUFBSSxFQUFFVCxLQUFLLENBQUU7SUFDekRVLGFBQWEsRUFBQztFQUFVLEdBRXhCMUMsS0FBQSxDQUFBb0MsYUFBQSxDQUFDL0IsS0FBQSxDQUFBSSxPQUFJO0lBQUNrQyxNQUFNLEVBQUVkLElBQUs7SUFBQ2UsSUFBSSxFQUFFbEIsU0FBVTtJQUFDSyxLQUFLLEVBQUVELFNBQVU7SUFBQ0ksS0FBSyxFQUFFQTtFQUFNLENBQUUsQ0FDbEUsQ0FBQztBQUVYLENBQUM7QUFFRCxJQUFNSyxNQUFNLEdBQUdwQyxZQUFBLENBQUEwQyxVQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQkwsSUFBSSxFQUFFO0lBQ0pNLE1BQU0sRUFBRSxDQUFDO0lBQ1RDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLEtBQUssRUFBRSxFQUFFO0lBQ1RDLFVBQVUsRUFBRSxRQUFRO0lBQ3BCQyxjQUFjLEVBQUU7RUFDbEIsQ0FBQztFQUNEWCxNQUFNLEVBQUU7SUFDTlUsVUFBVSxFQUFFLFFBQVE7SUFDcEJDLGNBQWMsRUFBRTtFQUNsQjtBQUNGLENBQUMsQ0FBQztBQUVGeEIsUUFBUSxDQUFDeUIsV0FBVyxHQUFHLFdBQVc7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQTdDLE9BQUEsR0FFcEJrQixRQUFRIiwiaWdub3JlTGlzdCI6W119