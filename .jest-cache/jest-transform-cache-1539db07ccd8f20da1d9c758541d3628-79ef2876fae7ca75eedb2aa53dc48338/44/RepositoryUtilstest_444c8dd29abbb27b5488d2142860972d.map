{"version":3,"names":["_RepositoryUtils","require","describe","test","expect","RepositoryUtils","validateExerciseData","name","toBe","created_at","undefined","testUserId","getExercisesCollectionPath","validateExerciseId","not","toThrow"],"sources":["RepositoryUtils-test.ts"],"sourcesContent":["import { RepositoryUtils } from '../../../lib/repo/utils/RepositoryUtils';\n\ndescribe('RepositoryUtils', () => {\n  describe('validateExerciseData', () => {\n    test('validates correct exercise data', () => {\n      expect(RepositoryUtils.validateExerciseData({ name: 'Push-ups' })).toBe(true);\n      expect(RepositoryUtils.validateExerciseData({ name: 'Pull-ups', created_at: '2023-01-01' })).toBe(true);\n    });\n\n    test('rejects null and undefined data', () => {\n      expect(RepositoryUtils.validateExerciseData(null)).toBe(false);\n      expect(RepositoryUtils.validateExerciseData(undefined)).toBe(false);\n    });\n\n    test('rejects non-object data', () => {\n      expect(RepositoryUtils.validateExerciseData('string')).toBe(false);\n      expect(RepositoryUtils.validateExerciseData(123)).toBe(false);\n      expect(RepositoryUtils.validateExerciseData(true)).toBe(false);\n    });\n\n    test('rejects missing or invalid name field', () => {\n      expect(RepositoryUtils.validateExerciseData({})).toBe(false);\n      expect(RepositoryUtils.validateExerciseData({ name: null })).toBe(false);\n      expect(RepositoryUtils.validateExerciseData({ name: 123 })).toBe(false);\n      expect(RepositoryUtils.validateExerciseData({ name: '' })).toBe(false);\n      expect(RepositoryUtils.validateExerciseData({ name: '   ' })).toBe(false);\n    });\n  });\n\n  describe('getExercisesCollectionPath', () => {\n    test('returns correct path for user ID', () => {\n      const testUserId = 'user123';\n      expect(RepositoryUtils.getExercisesCollectionPath(testUserId)).toBe(`users/${testUserId}/exercises`);\n      expect(RepositoryUtils.getExercisesCollectionPath('another-user')).toBe('users/another-user/exercises');\n    });\n  });\n\n  describe('validateExerciseId', () => {\n    test('accepts valid exercise IDs', () => {\n      expect(() => RepositoryUtils.validateExerciseId('valid-id')).not.toThrow();\n      expect(() => RepositoryUtils.validateExerciseId('123')).not.toThrow();\n      expect(() => RepositoryUtils.validateExerciseId('uuid-12345')).not.toThrow();\n    });\n\n    test('rejects invalid exercise IDs', () => {\n      expect(() => RepositoryUtils.validateExerciseId('')).toThrow('Valid exerciseId is required');\n      expect(() => RepositoryUtils.validateExerciseId('   ')).toThrow('Valid exerciseId is required');\n      expect(() => RepositoryUtils.validateExerciseId(null as any)).toThrow('Valid exerciseId is required');\n      expect(() => RepositoryUtils.validateExerciseId(undefined as any)).toThrow('Valid exerciseId is required');\n      expect(() => RepositoryUtils.validateExerciseId(123 as any)).toThrow('Valid exerciseId is required');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}