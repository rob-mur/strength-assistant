523d2be32cc4a1985a737cc6077ebbb0
_getJestObj().mock('child_process');
_getJestObj().mock('fs', function () {
  return {
    promises: {
      stat: jest.fn(),
      readFile: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _TypeScriptValidator = require("../../src/typescript/TypeScriptValidator");
var _child_process = require("child_process");
var _fs = require("fs");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSpawn = _child_process.spawn;
var mockStat = _fs.promises.stat;
describe('TypeScriptValidator Unit Tests', function () {
  var validator;
  var mockProjectRoot = '/mock/project';
  beforeEach(function () {
    validator = new _TypeScriptValidator.TypeScriptValidatorImpl(mockProjectRoot);
    jest.clearAllMocks();
  });
  describe('validateCompilation', function () {
    it('should return success when TypeScript compilation succeeds', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var mockCountProcess = createMockProcess(0, 'file1.ts\nfile2.ts\nfile3.ts', '');
      mockSpawn.mockReturnValueOnce(mockProcess).mockReturnValueOnce(mockCountProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(true);
      expect(result.errors).toHaveLength(0);
      expect(result.warnings).toHaveLength(0);
      expect(result.statistics.errorCount).toBe(0);
      expect(result.statistics.warningCount).toBe(0);
      expect(result.statistics.duration).toBeGreaterThan(0);
    }));
    it('should return errors when TypeScript compilation fails', (0, _asyncToGenerator2.default)(function* () {
      var tsErrorOutput = `
src/test.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.
src/test.ts(15,10): error TS2304: Cannot find name 'undefinedVariable'.
      `.trim();
      var mockProcess = createMockProcess(1, '', tsErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(2);
      var firstError = result.errors[0];
      expect(firstError.file).toBe('src/test.ts');
      expect(firstError.line).toBe(10);
      expect(firstError.column).toBe(5);
      expect(firstError.code).toBe('TS2322');
      expect(firstError.severity).toBe('error');
      expect(firstError.message).toContain('Type \'string\' is not assignable to type \'number\'');
      expect(result.statistics.errorCount).toBe(2);
    }));
    it('should handle TypeScript warnings correctly', (0, _asyncToGenerator2.default)(function* () {
      var tsWarningOutput = `
src/test.ts(5,1): warning TS6133: 'unusedVariable' is declared but its value is never read.
      `.trim();
      var mockProcess = createMockProcess(0, '', tsWarningOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(true);
      expect(result.errors).toHaveLength(0);
      expect(result.warnings).toHaveLength(1);
      var warning = result.warnings[0];
      expect(warning.file).toBe('src/test.ts');
      expect(warning.line).toBe(5);
      expect(warning.code).toBe('TS6133');
      expect(warning.severity).toBe('warning');
      expect(warning.ignorable).toBe(true);
    }));
    it.skip('should handle process errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(null, '', '');
      mockProcess.emit('error', new Error('Process spawn failed'));
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].message).toContain('TypeScript validation failed');
      expect(result.errors[0].file).toBe('validation-process');
    }));
    it('should timeout long-running compilations', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(null, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var originalSetTimeout = global.setTimeout;
      global.setTimeout = jest.fn(function (callback) {
        if (typeof callback === 'function') {
          callback();
        }
        return 1;
      });
      try {
        var result = yield validator.validateCompilation();
        expect(result.success).toBe(false);
        expect(result.errors[0].message).toContain('timed out');
      } finally {
        global.setTimeout = originalSetTimeout;
      }
    }));
  });
  describe('validateFiles', function () {
    it('should validate specific files', (0, _asyncToGenerator2.default)(function* () {
      var testFiles = ['src/file1.ts', 'src/file2.ts'];
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles(testFiles);
      expect(result.success).toBe(true);
      expect(result.statistics.filesValidated).toBe(testFiles.length);
      expect(mockSpawn).toHaveBeenCalledWith('npx', ['tsc', '--noEmit'].concat(testFiles), expect.any(Object));
    }));
    it('should handle empty file list', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles([]);
      expect(result.success).toBe(true);
      expect(result.statistics.filesValidated).toBe(0);
    }));
    it('should handle file validation errors', (0, _asyncToGenerator2.default)(function* () {
      var tsErrorOutput = 'src/file1.ts(1,1): error TS2304: Cannot find name \'unknown\'.';
      var mockProcess = createMockProcess(1, '', tsErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles(['src/file1.ts']);
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].file).toBe('src/file1.ts');
    }));
  });
  describe('getConfiguration', function () {
    it('should read and parse tsconfig.json', function () {
      var mockTsConfig = {
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: false,
          skipLibCheck: true,
          target: 'es2017'
        },
        include: ['src/**/*'],
        exclude: ['node_modules', 'dist']
      };
      var originalRequire = require;
      require = jest.fn().mockReturnValue(mockTsConfig);
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(true);
        expect(config.compilerOptions.noImplicitAny).toBe(true);
        expect(config.compilerOptions.noImplicitReturns).toBe(false);
        expect(config.compilerOptions.skipLibCheck).toBe(true);
        expect(config.include).toEqual(['src/**/*']);
        expect(config.exclude).toEqual(['node_modules', 'dist']);
      } finally {
        require = originalRequire;
      }
    });
    it('should return default configuration when tsconfig.json is missing', function () {
      var originalRequire = require;
      require = jest.fn().mockImplementation(function () {
        throw new Error('Cannot find module');
      });
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(false);
        expect(config.compilerOptions.noImplicitAny).toBe(false);
        expect(config.compilerOptions.noImplicitReturns).toBe(false);
        expect(config.compilerOptions.skipLibCheck).toBe(true);
        expect(config.include).toEqual([]);
        expect(config.exclude).toEqual([]);
      } finally {
        require = originalRequire;
      }
    });
    it('should handle malformed tsconfig.json', function () {
      var originalRequire = require;
      require = jest.fn().mockImplementation(function () {
        throw new SyntaxError('Unexpected token in JSON');
      });
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(false);
        expect(config.include).toEqual([]);
      } finally {
        require = originalRequire;
      }
    });
  });
  describe('validateConfiguration', function () {
    it('should validate compliant configuration', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: true,
          skipLibCheck: false
        },
        include: ['src/**/*'],
        exclude: ['node_modules']
      });
      var result = yield validator.validateConfiguration();
      expect(result.compliant).toBe(true);
      expect(result.violations).toHaveLength(0);
    }));
    it('should detect constitutional violations', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: false,
          noImplicitAny: false,
          noImplicitReturns: false,
          skipLibCheck: true
        },
        include: [],
        exclude: []
      });
      var result = yield validator.validateConfiguration();
      expect(result.compliant).toBe(false);
      expect(result.violations.length).toBeGreaterThan(0);
      var strictViolation = result.violations.find(function (v) {
        return v.property === 'compilerOptions.strict';
      });
      expect(strictViolation).toBeDefined();
      expect(strictViolation == null ? void 0 : strictViolation.currentValue).toBe(false);
      expect(strictViolation == null ? void 0 : strictViolation.requiredValue).toBe(true);
      expect(strictViolation == null ? void 0 : strictViolation.reason).toContain('Constitutional requirement');
      var noImplicitAnyViolation = result.violations.find(function (v) {
        return v.property === 'compilerOptions.noImplicitAny';
      });
      expect(noImplicitAnyViolation).toBeDefined();
    }));
    it('should provide helpful recommendations', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: true,
          skipLibCheck: true
        },
        include: [],
        exclude: []
      });
      var result = yield validator.validateConfiguration();
      expect(result.recommendations.length).toBeGreaterThan(0);
      expect(result.recommendations).toContain('Consider setting skipLibCheck to false for thorough type checking');
      expect(result.recommendations).toContain('Specify include patterns to explicitly define files to compile');
    }));
  });
  describe('Error Parsing', function () {
    it('should parse complex TypeScript error messages', (0, _asyncToGenerator2.default)(function* () {
      var complexErrorOutput = `
node_modules/@types/react/index.d.ts(3080,13): error TS2717: Subsequent property declarations must have the same type.
src/components/Button.tsx(25,7): error TS2322: Type '{ onClick: () => void; children: string; variant: "invalid"; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
src/utils/helpers.ts(42,1): warning TS6133: 'unusedFunction' is declared but its value is never read.
      `.trim();
      var mockProcess = createMockProcess(1, '', complexErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.errors).toHaveLength(2);
      expect(result.warnings).toHaveLength(1);
      var buttonError = result.errors.find(function (e) {
        return e.file.includes('Button.tsx');
      });
      expect(buttonError).toBeDefined();
      expect(buttonError == null ? void 0 : buttonError.message).toContain('Type \'{ onClick: () => void; children: string; variant: "invalid"; }\'');
    }));
    it('should ignore non-standard error format lines', (0, _asyncToGenerator2.default)(function* () {
      var mixedOutput = `
Compilation starting...
src/test.ts(1,1): error TS2304: Cannot find name 'unknown'.
Found 1 error.
Process completed.
      `.trim();
      var mockProcess = createMockProcess(1, '', mixedOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].file).toBe('src/test.ts');
    }));
  });
  describe('Performance Tests', function () {
    it('should track validation duration accurately', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      setTimeout(function () {
        return mockProcess.emit('close', 0);
      }, 100);
      var startTime = Date.now();
      var result = yield validator.validateCompilation();
      var actualDuration = Date.now() - startTime;
      expect(result.statistics.duration).toBeGreaterThan(0);
      expect(Math.abs(result.statistics.duration - actualDuration)).toBeLessThan(50);
    }));
    it('should handle file counting efficiently', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      var mockCountProcess = createMockProcess(0, 'file1.ts\nfile2.ts\nfile3.ts\nfile4.ts\nfile5.ts', '');
      mockSpawn.mockReturnValueOnce(mockProcess).mockReturnValueOnce(mockCountProcess);
      var result = yield validator.validateCompilation();
      expect(result.statistics.filesValidated).toBe(5);
    }));
  });
});
function createMockProcess(exitCode, stdout, stderr) {
  var mockProcess = {
    stdout: {
      on: jest.fn(function (event, callback) {
        if (event === 'data' && stdout) {
          setTimeout(function () {
            return callback(stdout);
          }, 10);
        }
      })
    },
    stderr: {
      on: jest.fn(function (event, callback) {
        if (event === 'data' && stderr) {
          setTimeout(function () {
            return callback(stderr);
          }, 10);
        }
      })
    },
    on: jest.fn(function (event, callback) {
      if (event === 'close' && exitCode !== null) {
        setTimeout(function () {
          return callback(exitCode);
        }, 20);
      }
    }),
    emit: jest.fn(),
    kill: jest.fn()
  };
  return mockProcess;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwcm9taXNlcyIsInN0YXQiLCJqZXN0IiwiZm4iLCJyZWFkRmlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX1R5cGVTY3JpcHRWYWxpZGF0b3IiLCJfY2hpbGRfcHJvY2VzcyIsIl9mcyIsIl9yZXF1aXJlIiwibW9ja1NwYXduIiwic3Bhd24iLCJtb2NrU3RhdCIsImZzIiwiZGVzY3JpYmUiLCJ2YWxpZGF0b3IiLCJtb2NrUHJvamVjdFJvb3QiLCJiZWZvcmVFYWNoIiwiVHlwZVNjcmlwdFZhbGlkYXRvckltcGwiLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJkZWZhdWx0IiwibW9ja1Byb2Nlc3MiLCJjcmVhdGVNb2NrUHJvY2VzcyIsIm1vY2tSZXR1cm5WYWx1ZSIsIm1vY2tDb3VudFByb2Nlc3MiLCJtb2NrUmV0dXJuVmFsdWVPbmNlIiwicmVzdWx0IiwidmFsaWRhdGVDb21waWxhdGlvbiIsImV4cGVjdCIsInN1Y2Nlc3MiLCJ0b0JlIiwiZXJyb3JzIiwidG9IYXZlTGVuZ3RoIiwid2FybmluZ3MiLCJzdGF0aXN0aWNzIiwiZXJyb3JDb3VudCIsIndhcm5pbmdDb3VudCIsImR1cmF0aW9uIiwidG9CZUdyZWF0ZXJUaGFuIiwidHNFcnJvck91dHB1dCIsInRyaW0iLCJmaXJzdEVycm9yIiwiZmlsZSIsImxpbmUiLCJjb2x1bW4iLCJjb2RlIiwic2V2ZXJpdHkiLCJtZXNzYWdlIiwidG9Db250YWluIiwidHNXYXJuaW5nT3V0cHV0Iiwid2FybmluZyIsImlnbm9yYWJsZSIsInNraXAiLCJlbWl0IiwiRXJyb3IiLCJvcmlnaW5hbFNldFRpbWVvdXQiLCJnbG9iYWwiLCJzZXRUaW1lb3V0IiwiY2FsbGJhY2siLCJ0ZXN0RmlsZXMiLCJ2YWxpZGF0ZUZpbGVzIiwiZmlsZXNWYWxpZGF0ZWQiLCJsZW5ndGgiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImNvbmNhdCIsImFueSIsIk9iamVjdCIsIm1vY2tUc0NvbmZpZyIsImNvbXBpbGVyT3B0aW9ucyIsInN0cmljdCIsIm5vSW1wbGljaXRBbnkiLCJub0ltcGxpY2l0UmV0dXJucyIsInNraXBMaWJDaGVjayIsInRhcmdldCIsImluY2x1ZGUiLCJleGNsdWRlIiwib3JpZ2luYWxSZXF1aXJlIiwiY29uZmlnIiwiZ2V0Q29uZmlndXJhdGlvbiIsInRvRXF1YWwiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJTeW50YXhFcnJvciIsInNweU9uIiwidmFsaWRhdGVDb25maWd1cmF0aW9uIiwiY29tcGxpYW50IiwidmlvbGF0aW9ucyIsInN0cmljdFZpb2xhdGlvbiIsImZpbmQiLCJ2IiwicHJvcGVydHkiLCJ0b0JlRGVmaW5lZCIsImN1cnJlbnRWYWx1ZSIsInJlcXVpcmVkVmFsdWUiLCJyZWFzb24iLCJub0ltcGxpY2l0QW55VmlvbGF0aW9uIiwicmVjb21tZW5kYXRpb25zIiwiY29tcGxleEVycm9yT3V0cHV0IiwiYnV0dG9uRXJyb3IiLCJlIiwiaW5jbHVkZXMiLCJtaXhlZE91dHB1dCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJhY3R1YWxEdXJhdGlvbiIsIk1hdGgiLCJhYnMiLCJ0b0JlTGVzc1RoYW4iLCJleGl0Q29kZSIsInN0ZG91dCIsInN0ZGVyciIsIm9uIiwiZXZlbnQiLCJraWxsIl0sInNvdXJjZXMiOlsiVHlwZVNjcmlwdFZhbGlkYXRvci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5pdCBUZXN0czogVHlwZVNjcmlwdCBWYWxpZGF0b3JcbiAqIFxuICogQ29tcHJlaGVuc2l2ZSB1bml0IHRlc3RzIGZvciB0aGUgVHlwZVNjcmlwdFZhbGlkYXRvciBpbXBsZW1lbnRhdGlvblxuICogdG8gZW5zdXJlIGFsbCBtZXRob2RzIGJlaGF2ZSBjb3JyZWN0bHkgYW5kIGVkZ2UgY2FzZXMgYXJlIGhhbmRsZWQuXG4gKi9cblxuaW1wb3J0IHsgVHlwZVNjcmlwdFZhbGlkYXRvckltcGwgfSBmcm9tICcuLi8uLi9zcmMvdHlwZXNjcmlwdC9UeXBlU2NyaXB0VmFsaWRhdG9yJztcbmltcG9ydCB7IHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ2ZzJztcblxuLy8gTW9jayBjaGlsZF9wcm9jZXNzIHNwYXduIGZvciBjb250cm9sbGVkIHRlc3Rpbmdcbmplc3QubW9jaygnY2hpbGRfcHJvY2VzcycpO1xuamVzdC5tb2NrKCdmcycsICgpID0+ICh7XG4gIHByb21pc2VzOiB7XG4gICAgc3RhdDogamVzdC5mbigpLFxuICAgIHJlYWRGaWxlOiBqZXN0LmZuKClcbiAgfVxufSkpO1xuXG5jb25zdCBtb2NrU3Bhd24gPSBzcGF3biBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBzcGF3bj47XG5jb25zdCBtb2NrU3RhdCA9IGZzLnN0YXQgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZnMuc3RhdD47XG5cbmRlc2NyaWJlKCdUeXBlU2NyaXB0VmFsaWRhdG9yIFVuaXQgVGVzdHMnLCAoKSA9PiB7XG4gIGxldCB2YWxpZGF0b3I6IFR5cGVTY3JpcHRWYWxpZGF0b3JJbXBsO1xuICBjb25zdCBtb2NrUHJvamVjdFJvb3QgPSAnL21vY2svcHJvamVjdCc7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgdmFsaWRhdG9yID0gbmV3IFR5cGVTY3JpcHRWYWxpZGF0b3JJbXBsKG1vY2tQcm9qZWN0Um9vdCk7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZUNvbXBpbGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHN1Y2Nlc3Mgd2hlbiBUeXBlU2NyaXB0IGNvbXBpbGF0aW9uIHN1Y2NlZWRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBzdWNjZXNzZnVsIFR5cGVTY3JpcHQgY29tcGlsYXRpb25cbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMCwgJycsICcnKTtcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWUobW9ja1Byb2Nlc3MgYXMgYW55KTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBmaWxlIGNvdW50aW5nXG4gICAgICBjb25zdCBtb2NrQ291bnRQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMCwgJ2ZpbGUxLnRzXFxuZmlsZTIudHNcXG5maWxlMy50cycsICcnKTtcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tQcm9jZXNzIGFzIGFueSlcbiAgICAgICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tDb3VudFByb2Nlc3MgYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29tcGlsYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdGlzdGljcy5lcnJvckNvdW50KS50b0JlKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdGF0aXN0aWNzLndhcm5pbmdDb3VudCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdGlzdGljcy5kdXJhdGlvbikudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZXJyb3JzIHdoZW4gVHlwZVNjcmlwdCBjb21waWxhdGlvbiBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRzRXJyb3JPdXRwdXQgPSBgXG5zcmMvdGVzdC50cygxMCw1KTogZXJyb3IgVFMyMzIyOiBUeXBlICdzdHJpbmcnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ251bWJlcicuXG5zcmMvdGVzdC50cygxNSwxMCk6IGVycm9yIFRTMjMwNDogQ2Fubm90IGZpbmQgbmFtZSAndW5kZWZpbmVkVmFyaWFibGUnLlxuICAgICAgYC50cmltKCk7XG5cbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMSwgJycsIHRzRXJyb3JPdXRwdXQpO1xuICAgICAgbW9ja1NwYXduLm1vY2tSZXR1cm5WYWx1ZShtb2NrUHJvY2VzcyBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb21waWxhdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIFxuICAgICAgY29uc3QgZmlyc3RFcnJvciA9IHJlc3VsdC5lcnJvcnNbMF07XG4gICAgICBleHBlY3QoZmlyc3RFcnJvci5maWxlKS50b0JlKCdzcmMvdGVzdC50cycpO1xuICAgICAgZXhwZWN0KGZpcnN0RXJyb3IubGluZSkudG9CZSgxMCk7XG4gICAgICBleHBlY3QoZmlyc3RFcnJvci5jb2x1bW4pLnRvQmUoNSk7XG4gICAgICBleHBlY3QoZmlyc3RFcnJvci5jb2RlKS50b0JlKCdUUzIzMjInKTtcbiAgICAgIGV4cGVjdChmaXJzdEVycm9yLnNldmVyaXR5KS50b0JlKCdlcnJvcicpO1xuICAgICAgZXhwZWN0KGZpcnN0RXJyb3IubWVzc2FnZSkudG9Db250YWluKCdUeXBlIFxcJ3N0cmluZ1xcJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlIFxcJ251bWJlclxcJycpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN0YXRpc3RpY3MuZXJyb3JDb3VudCkudG9CZSgyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIFR5cGVTY3JpcHQgd2FybmluZ3MgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdHNXYXJuaW5nT3V0cHV0ID0gYFxuc3JjL3Rlc3QudHMoNSwxKTogd2FybmluZyBUUzYxMzM6ICd1bnVzZWRWYXJpYWJsZScgaXMgZGVjbGFyZWQgYnV0IGl0cyB2YWx1ZSBpcyBuZXZlciByZWFkLlxuICAgICAgYC50cmltKCk7XG5cbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMCwgJycsIHRzV2FybmluZ091dHB1dCk7XG4gICAgICBtb2NrU3Bhd24ubW9ja1JldHVyblZhbHVlKG1vY2tQcm9jZXNzIGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUNvbXBpbGF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTsgLy8gV2FybmluZ3MgZG9uJ3QgZmFpbCBjb21waWxhdGlvblxuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIFxuICAgICAgY29uc3Qgd2FybmluZyA9IHJlc3VsdC53YXJuaW5nc1swXTtcbiAgICAgIGV4cGVjdCh3YXJuaW5nLmZpbGUpLnRvQmUoJ3NyYy90ZXN0LnRzJyk7XG4gICAgICBleHBlY3Qod2FybmluZy5saW5lKS50b0JlKDUpO1xuICAgICAgZXhwZWN0KHdhcm5pbmcuY29kZSkudG9CZSgnVFM2MTMzJyk7XG4gICAgICBleHBlY3Qod2FybmluZy5zZXZlcml0eSkudG9CZSgnd2FybmluZycpO1xuICAgICAgZXhwZWN0KHdhcm5pbmcuaWdub3JhYmxlKS50b0JlKHRydWUpOyAvLyBUaGlzIHdhcm5pbmcgdHlwZSBpcyBpZ25vcmFibGVcbiAgICB9KTtcblxuICAgIGl0LnNraXAoJ3Nob3VsZCBoYW5kbGUgcHJvY2VzcyBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MobnVsbCwgJycsICcnKTtcbiAgICAgIG1vY2tQcm9jZXNzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdQcm9jZXNzIHNwYXduIGZhaWxlZCcpKTtcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWUobW9ja1Byb2Nlc3MgYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29tcGlsYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ1R5cGVTY3JpcHQgdmFsaWRhdGlvbiBmYWlsZWQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzWzBdLmZpbGUpLnRvQmUoJ3ZhbGlkYXRpb24tcHJvY2VzcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aW1lb3V0IGxvbmctcnVubmluZyBjb21waWxhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvY2VzcyA9IGNyZWF0ZU1vY2tQcm9jZXNzKG51bGwsICcnLCAnJyk7XG4gICAgICAvLyBEb24ndCBlbWl0IGNsb3NlIGV2ZW50IHRvIHNpbXVsYXRlIGhhbmdpbmcgcHJvY2Vzc1xuICAgICAgbW9ja1NwYXduLm1vY2tSZXR1cm5WYWx1ZShtb2NrUHJvY2VzcyBhcyBhbnkpO1xuXG4gICAgICAvLyBNb2NrIHNldFRpbWVvdXQgdG8gaW1tZWRpYXRlbHkgY2FsbCB0aGUgY2FsbGJhY2tcbiAgICAgIGNvbnN0IG9yaWdpbmFsU2V0VGltZW91dCA9IGdsb2JhbC5zZXRUaW1lb3V0O1xuICAgICAgZ2xvYmFsLnNldFRpbWVvdXQgPSBqZXN0LmZuKChjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMSBhcyBhbnk7XG4gICAgICB9KTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29tcGlsYXRpb24oKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnNbMF0ubWVzc2FnZSkudG9Db250YWluKCd0aW1lZCBvdXQnKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGdsb2JhbC5zZXRUaW1lb3V0ID0gb3JpZ2luYWxTZXRUaW1lb3V0O1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndmFsaWRhdGVGaWxlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHNwZWNpZmljIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdEZpbGVzID0gWydzcmMvZmlsZTEudHMnLCAnc3JjL2ZpbGUyLnRzJ107XG4gICAgICBjb25zdCBtb2NrUHJvY2VzcyA9IGNyZWF0ZU1vY2tQcm9jZXNzKDAsICcnLCAnJyk7XG4gICAgICBtb2NrU3Bhd24ubW9ja1JldHVyblZhbHVlKG1vY2tQcm9jZXNzIGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUZpbGVzKHRlc3RGaWxlcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdGlzdGljcy5maWxlc1ZhbGlkYXRlZCkudG9CZSh0ZXN0RmlsZXMubGVuZ3RoKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGNvcnJlY3QgYXJndW1lbnRzIHdlcmUgcGFzc2VkIHRvIHRzY1xuICAgICAgZXhwZWN0KG1vY2tTcGF3bikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ25weCcsIFsndHNjJywgJy0tbm9FbWl0JywgLi4udGVzdEZpbGVzXSwgZXhwZWN0LmFueShPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGZpbGUgbGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMCwgJycsICcnKTtcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWUobW9ja1Byb2Nlc3MgYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlRmlsZXMoW10pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnN0YXRpc3RpY3MuZmlsZXNWYWxpZGF0ZWQpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBmaWxlIHZhbGlkYXRpb24gZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdHNFcnJvck91dHB1dCA9ICdzcmMvZmlsZTEudHMoMSwxKTogZXJyb3IgVFMyMzA0OiBDYW5ub3QgZmluZCBuYW1lIFxcJ3Vua25vd25cXCcuJztcbiAgICAgIGNvbnN0IG1vY2tQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMSwgJycsIHRzRXJyb3JPdXRwdXQpO1xuICAgICAgbW9ja1NwYXduLm1vY2tSZXR1cm5WYWx1ZShtb2NrUHJvY2VzcyBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVGaWxlcyhbJ3NyYy9maWxlMS50cyddKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yc1swXS5maWxlKS50b0JlKCdzcmMvZmlsZTEudHMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldENvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZWFkIGFuZCBwYXJzZSB0c2NvbmZpZy5qc29uJywgKCkgPT4ge1xuICAgICAgLy8gTW9jayByZXF1aXJlIHRvIHJldHVybiBhIG1vY2sgdHNjb25maWdcbiAgICAgIGNvbnN0IG1vY2tUc0NvbmZpZyA9IHtcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIG5vSW1wbGljaXRBbnk6IHRydWUsXG4gICAgICAgICAgbm9JbXBsaWNpdFJldHVybnM6IGZhbHNlLFxuICAgICAgICAgIHNraXBMaWJDaGVjazogdHJ1ZSxcbiAgICAgICAgICB0YXJnZXQ6ICdlczIwMTcnXG4gICAgICAgIH0sXG4gICAgICAgIGluY2x1ZGU6IFsnc3JjLyoqLyonXSxcbiAgICAgICAgZXhjbHVkZTogWydub2RlX21vZHVsZXMnLCAnZGlzdCddXG4gICAgICB9O1xuXG4gICAgICAvLyBNb2NrIHRoZSByZXF1aXJlIGNhbGxcbiAgICAgIGNvbnN0IG9yaWdpbmFsUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICByZXF1aXJlID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShtb2NrVHNDb25maWcpIGFzIGFueTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdmFsaWRhdG9yLmdldENvbmZpZ3VyYXRpb24oKTtcblxuICAgICAgICBleHBlY3QoY29uZmlnLmNvbXBpbGVyT3B0aW9ucy5zdHJpY3QpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjb25maWcuY29tcGlsZXJPcHRpb25zLm5vSW1wbGljaXRBbnkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjb25maWcuY29tcGlsZXJPcHRpb25zLm5vSW1wbGljaXRSZXR1cm5zKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpZy5jb21waWxlck9wdGlvbnMuc2tpcExpYkNoZWNrKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY29uZmlnLmluY2x1ZGUpLnRvRXF1YWwoWydzcmMvKiovKiddKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpZy5leGNsdWRlKS50b0VxdWFsKFsnbm9kZV9tb2R1bGVzJywgJ2Rpc3QnXSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICByZXF1aXJlID0gb3JpZ2luYWxSZXF1aXJlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZGVmYXVsdCBjb25maWd1cmF0aW9uIHdoZW4gdHNjb25maWcuanNvbiBpcyBtaXNzaW5nJywgKCkgPT4ge1xuICAgICAgLy8gTW9jayByZXF1aXJlIHRvIHRocm93IGFuIGVycm9yIChmaWxlIG5vdCBmb3VuZClcbiAgICAgIGNvbnN0IG9yaWdpbmFsUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICByZXF1aXJlID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgbW9kdWxlJyk7XG4gICAgICB9KSBhcyBhbnk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHZhbGlkYXRvci5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbmZpZy5jb21waWxlck9wdGlvbnMuc3RyaWN0KS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpZy5jb21waWxlck9wdGlvbnMubm9JbXBsaWNpdEFueSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjb25maWcuY29tcGlsZXJPcHRpb25zLm5vSW1wbGljaXRSZXR1cm5zKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpZy5jb21waWxlck9wdGlvbnMuc2tpcExpYkNoZWNrKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY29uZmlnLmluY2x1ZGUpLnRvRXF1YWwoW10pO1xuICAgICAgICBleHBlY3QoY29uZmlnLmV4Y2x1ZGUpLnRvRXF1YWwoW10pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcmVxdWlyZSA9IG9yaWdpbmFsUmVxdWlyZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCB0c2NvbmZpZy5qc29uJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgIHJlcXVpcmUgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIHRva2VuIGluIEpTT04nKTtcbiAgICAgIH0pIGFzIGFueTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdmFsaWRhdG9yLmdldENvbmZpZ3VyYXRpb24oKTtcblxuICAgICAgICAvLyBTaG91bGQgcmV0dXJuIGRlZmF1bHQgY29uZmlndXJhdGlvblxuICAgICAgICBleHBlY3QoY29uZmlnLmNvbXBpbGVyT3B0aW9ucy5zdHJpY3QpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoY29uZmlnLmluY2x1ZGUpLnRvRXF1YWwoW10pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcmVxdWlyZSA9IG9yaWdpbmFsUmVxdWlyZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlQ29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGNvbXBsaWFudCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBjb21wbGlhbnQgY29uZmlndXJhdGlvblxuICAgICAgamVzdC5zcHlPbih2YWxpZGF0b3IsICdnZXRDb25maWd1cmF0aW9uJykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIG5vSW1wbGljaXRBbnk6IHRydWUsXG4gICAgICAgICAgbm9JbXBsaWNpdFJldHVybnM6IHRydWUsXG4gICAgICAgICAgc2tpcExpYkNoZWNrOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbJ3NyYy8qKi8qJ10sXG4gICAgICAgIGV4Y2x1ZGU6IFsnbm9kZV9tb2R1bGVzJ11cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY29tcGxpYW50KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52aW9sYXRpb25zKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRldGVjdCBjb25zdGl0dXRpb25hbCB2aW9sYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBub24tY29tcGxpYW50IGNvbmZpZ3VyYXRpb25cbiAgICAgIGplc3Quc3B5T24odmFsaWRhdG9yLCAnZ2V0Q29uZmlndXJhdGlvbicpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHN0cmljdDogZmFsc2UsXG4gICAgICAgICAgbm9JbXBsaWNpdEFueTogZmFsc2UsXG4gICAgICAgICAgbm9JbXBsaWNpdFJldHVybnM6IGZhbHNlLFxuICAgICAgICAgIHNraXBMaWJDaGVjazogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXSxcbiAgICAgICAgZXhjbHVkZTogW11cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY29tcGxpYW50KS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudmlvbGF0aW9ucy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcblxuICAgICAgLy8gQ2hlY2sgc3BlY2lmaWMgdmlvbGF0aW9uc1xuICAgICAgY29uc3Qgc3RyaWN0VmlvbGF0aW9uID0gcmVzdWx0LnZpb2xhdGlvbnMuZmluZCh2ID0+IHYucHJvcGVydHkgPT09ICdjb21waWxlck9wdGlvbnMuc3RyaWN0Jyk7XG4gICAgICBleHBlY3Qoc3RyaWN0VmlvbGF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHN0cmljdFZpb2xhdGlvbj8uY3VycmVudFZhbHVlKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChzdHJpY3RWaW9sYXRpb24/LnJlcXVpcmVkVmFsdWUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3Qoc3RyaWN0VmlvbGF0aW9uPy5yZWFzb24pLnRvQ29udGFpbignQ29uc3RpdHV0aW9uYWwgcmVxdWlyZW1lbnQnKTtcblxuICAgICAgY29uc3Qgbm9JbXBsaWNpdEFueVZpb2xhdGlvbiA9IHJlc3VsdC52aW9sYXRpb25zLmZpbmQodiA9PiB2LnByb3BlcnR5ID09PSAnY29tcGlsZXJPcHRpb25zLm5vSW1wbGljaXRBbnknKTtcbiAgICAgIGV4cGVjdChub0ltcGxpY2l0QW55VmlvbGF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIGhlbHBmdWwgcmVjb21tZW5kYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbih2YWxpZGF0b3IsICdnZXRDb25maWd1cmF0aW9uJykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgIG5vSW1wbGljaXRBbnk6IHRydWUsXG4gICAgICAgICAgbm9JbXBsaWNpdFJldHVybnM6IHRydWUsXG4gICAgICAgICAgc2tpcExpYkNoZWNrOiB0cnVlIC8vIFRoaXMgdHJpZ2dlcnMgYSByZWNvbW1lbmRhdGlvblxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiBbXSwgLy8gVGhpcyB0cmlnZ2VycyBhIHJlY29tbWVuZGF0aW9uXG4gICAgICAgIGV4Y2x1ZGU6IFtdXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29uZmlndXJhdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjb21tZW5kYXRpb25zKS50b0NvbnRhaW4oJ0NvbnNpZGVyIHNldHRpbmcgc2tpcExpYkNoZWNrIHRvIGZhbHNlIGZvciB0aG9yb3VnaCB0eXBlIGNoZWNraW5nJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucykudG9Db250YWluKCdTcGVjaWZ5IGluY2x1ZGUgcGF0dGVybnMgdG8gZXhwbGljaXRseSBkZWZpbmUgZmlsZXMgdG8gY29tcGlsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgUGFyc2luZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIGNvbXBsZXggVHlwZVNjcmlwdCBlcnJvciBtZXNzYWdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBsZXhFcnJvck91dHB1dCA9IGBcbm5vZGVfbW9kdWxlcy9AdHlwZXMvcmVhY3QvaW5kZXguZC50cygzMDgwLDEzKTogZXJyb3IgVFMyNzE3OiBTdWJzZXF1ZW50IHByb3BlcnR5IGRlY2xhcmF0aW9ucyBtdXN0IGhhdmUgdGhlIHNhbWUgdHlwZS5cbnNyYy9jb21wb25lbnRzL0J1dHRvbi50c3goMjUsNyk6IGVycm9yIFRTMjMyMjogVHlwZSAneyBvbkNsaWNrOiAoKSA9PiB2b2lkOyBjaGlsZHJlbjogc3RyaW5nOyB2YXJpYW50OiBcImludmFsaWRcIjsgfScgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnSW50cmluc2ljQXR0cmlidXRlcyAmIEJ1dHRvblByb3BzJy5cbnNyYy91dGlscy9oZWxwZXJzLnRzKDQyLDEpOiB3YXJuaW5nIFRTNjEzMzogJ3VudXNlZEZ1bmN0aW9uJyBpcyBkZWNsYXJlZCBidXQgaXRzIHZhbHVlIGlzIG5ldmVyIHJlYWQuXG4gICAgICBgLnRyaW0oKTtcblxuICAgICAgY29uc3QgbW9ja1Byb2Nlc3MgPSBjcmVhdGVNb2NrUHJvY2VzcygxLCAnJywgY29tcGxleEVycm9yT3V0cHV0KTtcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWUobW9ja1Byb2Nlc3MgYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29tcGlsYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvSGF2ZUxlbmd0aCgxKTtcblxuICAgICAgLy8gQ2hlY2sgdGhhdCBsb25nIGVycm9yIG1lc3NhZ2VzIGFyZSBoYW5kbGVkIGNvcnJlY3RseVxuICAgICAgY29uc3QgYnV0dG9uRXJyb3IgPSByZXN1bHQuZXJyb3JzLmZpbmQoZSA9PiBlLmZpbGUuaW5jbHVkZXMoJ0J1dHRvbi50c3gnKSk7XG4gICAgICBleHBlY3QoYnV0dG9uRXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoYnV0dG9uRXJyb3I/Lm1lc3NhZ2UpLnRvQ29udGFpbignVHlwZSBcXCd7IG9uQ2xpY2s6ICgpID0+IHZvaWQ7IGNoaWxkcmVuOiBzdHJpbmc7IHZhcmlhbnQ6IFwiaW52YWxpZFwiOyB9XFwnJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGlnbm9yZSBub24tc3RhbmRhcmQgZXJyb3IgZm9ybWF0IGxpbmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWl4ZWRPdXRwdXQgPSBgXG5Db21waWxhdGlvbiBzdGFydGluZy4uLlxuc3JjL3Rlc3QudHMoMSwxKTogZXJyb3IgVFMyMzA0OiBDYW5ub3QgZmluZCBuYW1lICd1bmtub3duJy5cbkZvdW5kIDEgZXJyb3IuXG5Qcm9jZXNzIGNvbXBsZXRlZC5cbiAgICAgIGAudHJpbSgpO1xuXG4gICAgICBjb25zdCBtb2NrUHJvY2VzcyA9IGNyZWF0ZU1vY2tQcm9jZXNzKDEsICcnLCBtaXhlZE91dHB1dCk7XG4gICAgICBtb2NrU3Bhd24ubW9ja1JldHVyblZhbHVlKG1vY2tQcm9jZXNzIGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUNvbXBpbGF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yc1swXS5maWxlKS50b0JlKCdzcmMvdGVzdC50cycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgVGVzdHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmFjayB2YWxpZGF0aW9uIGR1cmF0aW9uIGFjY3VyYXRlbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvY2VzcyA9IGNyZWF0ZU1vY2tQcm9jZXNzKDAsICcnLCAnJyk7XG4gICAgICBtb2NrU3Bhd24ubW9ja1JldHVyblZhbHVlKG1vY2tQcm9jZXNzIGFzIGFueSk7XG5cbiAgICAgIC8vIEFkZCBkZWxheSB0byBwcm9jZXNzXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IG1vY2tQcm9jZXNzLmVtaXQoJ2Nsb3NlJywgMCksIDEwMCk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb21waWxhdGlvbigpO1xuICAgICAgY29uc3QgYWN0dWFsRHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN0YXRpc3RpY3MuZHVyYXRpb24pLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChNYXRoLmFicyhyZXN1bHQuc3RhdGlzdGljcy5kdXJhdGlvbiAtIGFjdHVhbER1cmF0aW9uKSkudG9CZUxlc3NUaGFuKDUwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZpbGUgY291bnRpbmcgZWZmaWNpZW50bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvY2VzcyA9IGNyZWF0ZU1vY2tQcm9jZXNzKDAsICcnLCAnJyk7XG4gICAgICBjb25zdCBtb2NrQ291bnRQcm9jZXNzID0gY3JlYXRlTW9ja1Byb2Nlc3MoMCwgJ2ZpbGUxLnRzXFxuZmlsZTIudHNcXG5maWxlMy50c1xcbmZpbGU0LnRzXFxuZmlsZTUudHMnLCAnJyk7XG4gICAgICBcbiAgICAgIG1vY2tTcGF3bi5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tQcm9jZXNzIGFzIGFueSlcbiAgICAgICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tDb3VudFByb2Nlc3MgYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29tcGlsYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdGF0aXN0aWNzLmZpbGVzVmFsaWRhdGVkKS50b0JlKDUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIG1vY2sgcHJvY2Vzc1xuZnVuY3Rpb24gY3JlYXRlTW9ja1Byb2Nlc3MoZXhpdENvZGU6IG51bWJlciB8IG51bGwsIHN0ZG91dDogc3RyaW5nLCBzdGRlcnI6IHN0cmluZykge1xuICBjb25zdCBtb2NrUHJvY2VzczogYW55ID0ge1xuICAgIHN0ZG91dDoge1xuICAgICAgb246IGplc3QuZm4oKGV2ZW50LCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgPT09ICdkYXRhJyAmJiBzdGRvdXQpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKHN0ZG91dCksIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHN0ZGVycjoge1xuICAgICAgb246IGplc3QuZm4oKGV2ZW50LCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgPT09ICdkYXRhJyAmJiBzdGRlcnIpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKHN0ZGVyciksIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uOiBqZXN0LmZuKChldmVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChldmVudCA9PT0gJ2Nsb3NlJyAmJiBleGl0Q29kZSAhPT0gbnVsbCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKGV4aXRDb2RlKSwgMjApO1xuICAgICAgfVxuICAgIH0pLFxuICAgIGVtaXQ6IGplc3QuZm4oKSxcbiAgICBraWxsOiBqZXN0LmZuKClcbiAgfTtcblxuICByZXR1cm4gbW9ja1Byb2Nlc3M7XG59Il0sIm1hcHBpbmdzIjoiQUFZQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQzFCRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxJQUFJLEVBQUU7RUFBQSxPQUFPO0lBQ3JCQyxRQUFRLEVBQUU7TUFDUkMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2ZDLFFBQVEsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUUsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElB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QUFDO01BRXRELElBQU1FLE1BQU0sU0FBU1osU0FBUyxDQUFDYSxtQkFBbUIsQ0FBQyxDQUFDO01BRXBEQyxNQUFNLENBQUNGLE1BQU0sQ0FBQ1EsVUFBVSxDQUFDMkIsY0FBYyxDQUFDLENBQUMvQixJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUdGLFNBQVNSLGlCQUFpQkEsQ0FBQ3NGLFFBQXVCLEVBQUVDLE1BQWMsRUFBRUMsTUFBYyxFQUFFO0VBQ2xGLElBQU16RixXQUFnQixHQUFHO0lBQ3ZCd0YsTUFBTSxFQUFFO01BQ05FLEVBQUUsRUFBRWhILElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUNnSCxLQUFLLEVBQUV0RCxRQUFRLEVBQUs7UUFDL0IsSUFBSXNELEtBQUssS0FBSyxNQUFNLElBQUlILE1BQU0sRUFBRTtVQUM5QnBELFVBQVUsQ0FBQztZQUFBLE9BQU1DLFFBQVEsQ0FBQ21ELE1BQU0sQ0FBQztVQUFBLEdBQUUsRUFBRSxDQUFDO1FBQ3hDO01BQ0YsQ0FBQztJQUNILENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05DLEVBQUUsRUFBRWhILElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUNnSCxLQUFLLEVBQUV0RCxRQUFRLEVBQUs7UUFDL0IsSUFBSXNELEtBQUssS0FBSyxNQUFNLElBQUlGLE1BQU0sRUFBRTtVQUM5QnJELFVBQVUsQ0FBQztZQUFBLE9BQU1DLFFBQVEsQ0FBQ29ELE1BQU0sQ0FBQztVQUFBLEdBQUUsRUFBRSxDQUFDO1FBQ3hDO01BQ0YsQ0FBQztJQUNILENBQUM7SUFDREMsRUFBRSxFQUFFaEgsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQ2dILEtBQUssRUFBRXRELFFBQVEsRUFBSztNQUMvQixJQUFJc0QsS0FBSyxLQUFLLE9BQU8sSUFBSUosUUFBUSxLQUFLLElBQUksRUFBRTtRQUMxQ25ELFVBQVUsQ0FBQztVQUFBLE9BQU1DLFFBQVEsQ0FBQ2tELFFBQVEsQ0FBQztRQUFBLEdBQUUsRUFBRSxDQUFDO01BQzFDO0lBQ0YsQ0FBQyxDQUFDO0lBQ0Z2RCxJQUFJLEVBQUV0RCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2ZpSCxJQUFJLEVBQUVsSCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNoQixDQUFDO0VBRUQsT0FBT3FCLFdBQVc7QUFDcEIiLCJpZ25vcmVMaXN0IjpbXX0=