8bcf9dc50e7282ff3276f08b92fbad9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _require = require('child_process'),
  spawn = _require.spawn;
module.exports = (0, _asyncToGenerator2.default)(function* () {
  console.log('üîç Constitutional Requirement: Validating TypeScript compilation before test execution...');
  try {
    var result = yield runTypeScriptValidation();
    if (result.exitCode !== 0) {
      console.error('‚ùå CONSTITUTIONAL VIOLATION: TypeScript compilation failed');
      console.error('üö´ Tests cannot proceed - fix TypeScript errors first');
      console.error('\nTypeScript errors:');
      console.error(result.stderr);
      console.error('\nRequired actions:');
      console.error('1. Run "npx tsc --noEmit" to see all errors');
      console.error('2. Fix all TypeScript compilation errors');
      console.error('3. Ensure all files pass strict type checking');
      console.error('4. Run tests again');
      process.exit(1);
    }
    console.log('‚úÖ TypeScript compilation successful');
    console.log('‚úÖ Constitutional requirements met - proceeding with test execution');
  } catch (error) {
    console.error('‚ùå TypeScript validation process failed:', error.message);
    console.error('üö´ Cannot proceed with tests due to validation failure');
    process.exit(1);
  }
});
function runTypeScriptValidation() {
  return new Promise(function (resolve) {
    var _process$stdout, _process$stderr;
    console.log('   Running: npx tsc --noEmit');
    var process = spawn('npx', ['tsc', '--noEmit'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });
    var stdout = '';
    var stderr = '';
    (_process$stdout = process.stdout) == null || _process$stdout.on('data', function (data) {
      stdout += data.toString();
    });
    (_process$stderr = process.stderr) == null || _process$stderr.on('data', function (data) {
      stderr += data.toString();
    });
    process.on('close', function (exitCode) {
      resolve({
        exitCode: exitCode != null ? exitCode : 1,
        stdout: stdout,
        stderr: stderr
      });
    });
    process.on('error', function (error) {
      resolve({
        exitCode: 1,
        stdout: stdout,
        stderr: `TypeScript validation process error: ${error.message}`
      });
    });
    setTimeout(function () {
      process.kill();
      resolve({
        exitCode: 1,
        stdout: stdout,
        stderr: 'TypeScript validation timed out after 30 seconds'
      });
    }, 30000);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJzcGF3biIsIm1vZHVsZSIsImV4cG9ydHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiY29uc29sZSIsImxvZyIsInJlc3VsdCIsInJ1blR5cGVTY3JpcHRWYWxpZGF0aW9uIiwiZXhpdENvZGUiLCJlcnJvciIsInN0ZGVyciIsInByb2Nlc3MiLCJleGl0IiwibWVzc2FnZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Byb2Nlc3Mkc3Rkb3V0IiwiX3Byb2Nlc3Mkc3RkZXJyIiwic3RkaW8iLCJzaGVsbCIsInN0ZG91dCIsIm9uIiwiZGF0YSIsInRvU3RyaW5nIiwic2V0VGltZW91dCIsImtpbGwiXSwic291cmNlcyI6WyJqZXN0Lmdsb2JhbC1zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEplc3QgR2xvYmFsIFNldHVwOiBDb25zdGl0dXRpb25hbCBUeXBlU2NyaXB0IFZhbGlkYXRpb25cbiAqIFxuICogVGhpcyBzZXR1cCBydW5zIGJlZm9yZSBhbGwgdGVzdHMgdG8gZW5zdXJlIFR5cGVTY3JpcHQgY29tcGlsYXRpb25cbiAqIHN1Y2NlZWRzLCBpbXBsZW1lbnRpbmcgb3VyIGNvbnN0aXR1dGlvbmFsIHJlcXVpcmVtZW50IHRoYXRcbiAqIFwiVHlwZVNjcmlwdCBjb21waWxhdGlvbiBNVVNUIHN1Y2NlZWQgYmVmb3JlIHRlc3QgZXhlY3V0aW9uLlwiXG4gKi9cblxuY29uc3QgeyBzcGF3biB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ/CflI0gQ29uc3RpdHV0aW9uYWwgUmVxdWlyZW1lbnQ6IFZhbGlkYXRpbmcgVHlwZVNjcmlwdCBjb21waWxhdGlvbiBiZWZvcmUgdGVzdCBleGVjdXRpb24uLi4nKTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gUnVuIFR5cGVTY3JpcHQgY29tcGlsYXRpb24gY2hlY2tcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5UeXBlU2NyaXB0VmFsaWRhdGlvbigpO1xuICAgIFxuICAgIGlmIChyZXN1bHQuZXhpdENvZGUgIT09IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBDT05TVElUVVRJT05BTCBWSU9MQVRJT046IFR5cGVTY3JpcHQgY29tcGlsYXRpb24gZmFpbGVkJyk7XG4gICAgICBjb25zb2xlLmVycm9yKCfwn5qrIFRlc3RzIGNhbm5vdCBwcm9jZWVkIC0gZml4IFR5cGVTY3JpcHQgZXJyb3JzIGZpcnN0Jyk7XG4gICAgICBjb25zb2xlLmVycm9yKCdcXG5UeXBlU2NyaXB0IGVycm9yczonKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IocmVzdWx0LnN0ZGVycik7XG4gICAgICBjb25zb2xlLmVycm9yKCdcXG5SZXF1aXJlZCBhY3Rpb25zOicpO1xuICAgICAgY29uc29sZS5lcnJvcignMS4gUnVuIFwibnB4IHRzYyAtLW5vRW1pdFwiIHRvIHNlZSBhbGwgZXJyb3JzJyk7XG4gICAgICBjb25zb2xlLmVycm9yKCcyLiBGaXggYWxsIFR5cGVTY3JpcHQgY29tcGlsYXRpb24gZXJyb3JzJyk7XG4gICAgICBjb25zb2xlLmVycm9yKCczLiBFbnN1cmUgYWxsIGZpbGVzIHBhc3Mgc3RyaWN0IHR5cGUgY2hlY2tpbmcnKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJzQuIFJ1biB0ZXN0cyBhZ2FpbicpO1xuICAgICAgXG4gICAgICAvLyBFeGl0IHRoZSB0ZXN0IHByb2Nlc3MgLSBjb25zdGl0dXRpb25hbCB2aW9sYXRpb25cbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KchSBUeXBlU2NyaXB0IGNvbXBpbGF0aW9uIHN1Y2Nlc3NmdWwnKTtcbiAgICBjb25zb2xlLmxvZygn4pyFIENvbnN0aXR1dGlvbmFsIHJlcXVpcmVtZW50cyBtZXQgLSBwcm9jZWVkaW5nIHdpdGggdGVzdCBleGVjdXRpb24nKTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgVHlwZVNjcmlwdCB2YWxpZGF0aW9uIHByb2Nlc3MgZmFpbGVkOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ/CfmqsgQ2Fubm90IHByb2NlZWQgd2l0aCB0ZXN0cyBkdWUgdG8gdmFsaWRhdGlvbiBmYWlsdXJlJyk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJ1biBUeXBlU2NyaXB0IGNvbXBpbGF0aW9uIHZhbGlkYXRpb25cbiAqIEByZXR1cm5zIHtQcm9taXNlPHtleGl0Q29kZTogbnVtYmVyLCBzdGRvdXQ6IHN0cmluZywgc3RkZXJyOiBzdHJpbmd9Pn1cbiAqL1xuZnVuY3Rpb24gcnVuVHlwZVNjcmlwdFZhbGlkYXRpb24oKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCcgICBSdW5uaW5nOiBucHggdHNjIC0tbm9FbWl0Jyk7XG4gICAgXG4gICAgY29uc3QgcHJvY2VzcyA9IHNwYXduKCducHgnLCBbJ3RzYycsICctLW5vRW1pdCddLCB7XG4gICAgICBzdGRpbzogWydwaXBlJywgJ3BpcGUnLCAncGlwZSddLFxuICAgICAgc2hlbGw6IHRydWVcbiAgICB9KTtcbiAgICBcbiAgICBsZXQgc3Rkb3V0ID0gJyc7XG4gICAgbGV0IHN0ZGVyciA9ICcnO1xuICAgIFxuICAgIHByb2Nlc3Muc3Rkb3V0Py5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICBzdGRvdXQgKz0gZGF0YS50b1N0cmluZygpO1xuICAgIH0pO1xuICAgIFxuICAgIHByb2Nlc3Muc3RkZXJyPy5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICBzdGRlcnIgKz0gZGF0YS50b1N0cmluZygpO1xuICAgIH0pO1xuICAgIFxuICAgIHByb2Nlc3Mub24oJ2Nsb3NlJywgKGV4aXRDb2RlKSA9PiB7XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgZXhpdENvZGU6IGV4aXRDb2RlID8/IDEsXG4gICAgICAgIHN0ZG91dCxcbiAgICAgICAgc3RkZXJyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBwcm9jZXNzLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGV4aXRDb2RlOiAxLFxuICAgICAgICBzdGRvdXQsXG4gICAgICAgIHN0ZGVycjogYFR5cGVTY3JpcHQgdmFsaWRhdGlvbiBwcm9jZXNzIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gVGltZW91dCBhZnRlciAzMCBzZWNvbmRzXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBwcm9jZXNzLmtpbGwoKTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBleGl0Q29kZTogMSxcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnI6ICdUeXBlU2NyaXB0IHZhbGlkYXRpb24gdGltZWQgb3V0IGFmdGVyIDMwIHNlY29uZHMnXG4gICAgICB9KTtcbiAgICB9LCAzMDAwMCk7XG4gIH0pO1xufSJdLCJtYXBwaW5ncyI6Ijs7QUFRQSxJQUFBQSxRQUFBLEdBQWtCQyxPQUFPLENBQUMsZUFBZSxDQUFDO0VBQWxDQyxLQUFLLEdBQUFGLFFBQUEsQ0FBTEUsS0FBSztBQUViQyxNQUFNLENBQUNDLE9BQU8sT0FBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFHLGFBQVk7RUFDM0JDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJGQUEyRixDQUFDO0VBRXhHLElBQUk7SUFFRixJQUFNQyxNQUFNLFNBQVNDLHVCQUF1QixDQUFDLENBQUM7SUFFOUMsSUFBSUQsTUFBTSxDQUFDRSxRQUFRLEtBQUssQ0FBQyxFQUFFO01BQ3pCSixPQUFPLENBQUNLLEtBQUssQ0FBQywyREFBMkQsQ0FBQztNQUMxRUwsT0FBTyxDQUFDSyxLQUFLLENBQUMsdURBQXVELENBQUM7TUFDdEVMLE9B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