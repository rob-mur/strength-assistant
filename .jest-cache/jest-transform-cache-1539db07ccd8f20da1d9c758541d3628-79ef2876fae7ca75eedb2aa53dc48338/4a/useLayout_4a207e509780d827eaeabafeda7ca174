deb2f437a3d4e0aad88e799c34a71b95
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLayout;
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function useLayout() {
  var _React$useState = React.useState({
      height: 0,
      width: 0,
      measured: false
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    layout = _React$useState2[0],
    setLayout = _React$useState2[1];
  var onLayout = React.useCallback(function (e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
      height = _e$nativeEvent$layout.height,
      width = _e$nativeEvent$layout.width;
    if (height === layout.height && width === layout.width) {
      return;
    }
    setLayout({
      height: height,
      width: width,
      measured: true
    });
  }, [layout.height, layout.width]);
  return [layout, onLayout];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVzZUxheW91dCIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiaGVpZ2h0Iiwid2lkdGgiLCJtZWFzdXJlZCIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJsYXlvdXQiLCJzZXRMYXlvdXQiLCJvbkxheW91dCIsInVzZUNhbGxiYWNrIiwiX2UkbmF0aXZlRXZlbnQkbGF5b3V0IiwibmF0aXZlRXZlbnQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvdXNlTGF5b3V0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsU0FBQUQsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBO0lBQUEsS0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBO0lBQUEsSUFBQU0sQ0FBQTtNQUFBQyxDQUFBO01BQUFDLENBQUE7UUFBQUMsU0FBQTtRQUFBQyxPQUFBLEVBQUFWO01BQUE7SUFBQSxhQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUE7SUFBQSxJQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO01BQUEsSUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUE7TUFBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQTtJQUFBO0lBQUEsU0FBQVAsRUFBQSxJQUFBRCxDQUFBLGdCQUFBQyxFQUFBLE9BQUFhLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZixDQUFBLEVBQUFDLEVBQUEsT0FBQU0sQ0FBQSxJQUFBRCxDQUFBLEdBQUFVLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFsQixDQUFBLEVBQUFDLEVBQUEsT0FBQU0sQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQVAsRUFBQSxFQUFBTSxDQUFBLElBQUFDLENBQUEsQ0FBQVAsRUFBQSxJQUFBRCxDQUFBLENBQUFDLEVBQUE7SUFBQSxPQUFBTyxDQUFBO0VBQUEsR0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBQUE7QUFHaEIsU0FBU2tCLFNBQVNBLENBQUEsRUFBRztFQUNsQyxJQUFBQyxlQUFBLEdBQTRCdkIsS0FBSyxDQUFDd0IsUUFBUSxDQUl2QztNQUFFQyxNQUFNLEVBQUUsQ0FBQztNQUFFQyxLQUFLLEVBQUUsQ0FBQztNQUFFQyxRQUFRLEVBQUU7SUFBTSxDQUFDLENBQUM7SUFBQUMsZ0JBQUEsT0FBQUMsZUFBQSxDQUFBaEIsT0FBQSxFQUFBVSxlQUFBO0lBSnJDTyxNQUFNLEdBQUFGLGdCQUFBO0lBQUVHLFNBQVMsR0FBQUgsZ0JBQUE7RUFNeEIsSUFBTUksUUFBUSxHQUFHaEMsS0FBSyxDQUFDaUMsV0FBVyxDQUMvQixVQUFBOUIsQ0FBb0IsRUFBSztJQUN4QixJQUFBK0IscUJBQUEsR0FBMEIvQixDQUFDLENBQUNnQyxXQUFXLENBQUNMLE1BQU07TUFBdENMLE1BQU0sR0FBQVMscUJBQUEsQ0FBTlQsTUFBTTtNQUFFQyxLQUFBLEdBQUFRLHFCQUFBLENBQUFSLEtBQUE7SUFFaEIsSUFBSUQsTUFBTSxLQUFLSyxNQUFNLENBQUNMLE1BQU0sSUFBSUMsS0FBSyxLQUFLSSxNQUFNLENBQUNKLEtBQUssRUFBRTtNQUN0RDtJQUNGO0lBRUFLLFNBQVMsQ0FBQztNQUNSTixNQUFNLEVBQU5BLE1BQU07TUFDTkMsS0FBSyxFQUFMQSxLQUFLO01BQ0xDLFFBQVEsRUFBRTtJQUNaLENBQUMsQ0FBQztFQUNKLENBQUMsRUFDRCxDQUFDRyxNQUFNLENBQUNMLE1BQU0sRUFBRUssTUFBTSxDQUFDSixLQUFLLENBQzlCLENBQUM7RUFFRCxPQUFPLENBQUNJLE1BQU0sRUFBRUUsUUFBUSxDQUFDO0FBQzNCIiwiaWdub3JlTGlzdCI6W119