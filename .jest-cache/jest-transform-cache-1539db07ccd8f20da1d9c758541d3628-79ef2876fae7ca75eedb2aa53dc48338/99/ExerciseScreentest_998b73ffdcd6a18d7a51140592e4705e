92243b8409fe729ddfa792a34b599b6a
_getJestObj().mock("@/lib/hooks/useExercises", function () {
  return {
    useExercises: jest.fn()
  };
});
_getJestObj().mock("@/lib/hooks/useAuth", function () {
  return {
    useAuth: jest.fn()
  };
});
_getJestObj().mock("expo-router");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _exercises = _interopRequireDefault(require("@/app/(tabs)/exercises"));
var _useExercises = require("@/lib/hooks/useExercises");
var _useAuth = require("@/lib/hooks/useAuth");
var _reactNative = require("@testing-library/react-native");
var _utils = require("../../__test_utils__/utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("<ExerciseScreen/>", function () {
  var state;
  beforeEach(function () {
    state = new _utils.CommonTestState();
    _useAuth.useAuth.mockReturnValue({
      user: {
        uid: 'test-uid',
        email: 'test@example.com',
        isAnonymous: false
      },
      loading: false,
      error: null,
      signInAnonymously: jest.fn(),
      createAccount: jest.fn(),
      signIn: jest.fn(),
      signOut: jest.fn(),
      clearError: jest.fn()
    });
  });
  test("When the user request to add an exercise their request is accepted", (0, _asyncToGenerator2.default)(function* () {
    _useExercises.useExercises.mockReturnValue({
      exercises: []
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_exercises.default, {}));
    yield state.user.press(_reactNative.screen.getByTestId("add-exercise"));
    expect(state.mockRouter.navigate).toHaveBeenCalledWith("/exercises/add");
  }));
  test("displays exercises returned from the useExercises hook", function () {
    var exercises = [{
      id: "1",
      name: "Squat"
    }, {
      id: "2",
      name: "Bench Press"
    }];
    _useExercises.useExercises.mockReturnValue({
      exercises: exercises
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_exercises.default, {}));
    expect(_reactNative.screen.getByText("Squat")).toBeVisible();
    expect(_reactNative.screen.getByText("Bench Press")).toBeVisible();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VFeGVyY2lzZXMiLCJqZXN0IiwiZm4iLCJ1c2VBdXRoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfZXhlcmNpc2VzIiwiX3VzZUV4ZXJjaXNlcyIsIl91c2VBdXRoIiwiX3JlYWN0TmF0aXZlIiwiX3V0aWxzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwic3RhdGUiLCJiZWZvcmVFYWNoIiwiQ29tbW9uVGVzdFN0YXRlIiwibW9ja1JldHVyblZhbHVlIiwidXNlciIsInVpZCIsImVtYWlsIiwiaXNBbm9ueW1vdXMiLCJsb2FkaW5nIiwiZXJyb3IiLCJzaWduSW5Bbm9ueW1vdXNseSIsImNyZWF0ZUFjY291bnQiLCJzaWduSW4iLCJzaWduT3V0IiwiY2xlYXJFcnJvciIsInRlc3QiLCJkZWZhdWx0IiwiZXhlcmNpc2VzIiwicmVuZGVyIiwianN4IiwicHJlc3MiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsIm1vY2tSb3V0ZXIiLCJuYXZpZ2F0ZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiaWQiLCJuYW1lIiwiZ2V0QnlUZXh0IiwidG9CZVZpc2libGUiXSwic291cmNlcyI6WyJFeGVyY2lzZVNjcmVlbi10ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXhlcmNpc2VTY3JlZW4gZnJvbSBcIkAvYXBwLyh0YWJzKS9leGVyY2lzZXNcIjtcbmltcG9ydCB7IHVzZUV4ZXJjaXNlcyB9IGZyb20gXCJAL2xpYi9ob29rcy91c2VFeGVyY2lzZXNcIjtcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9saWIvaG9va3MvdXNlQXV0aFwiO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IENvbW1vblRlc3RTdGF0ZSB9IGZyb20gXCIuLi8uLi9fX3Rlc3RfdXRpbHNfXy91dGlsc1wiO1xuXG5qZXN0Lm1vY2soXCJAL2xpYi9ob29rcy91c2VFeGVyY2lzZXNcIiwgKCkgPT4gKHtcbiAgdXNlRXhlcmNpc2VzOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jayhcIkAvbGliL2hvb2tzL3VzZUF1dGhcIiwgKCkgPT4gKHtcbiAgdXNlQXV0aDogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soXCJleHBvLXJvdXRlclwiKTtcblxuZGVzY3JpYmUoXCI8RXhlcmNpc2VTY3JlZW4vPlwiLCAoKSA9PiB7XG4gIGxldCBzdGF0ZTogQ29tbW9uVGVzdFN0YXRlO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0YXRlID0gbmV3IENvbW1vblRlc3RTdGF0ZSgpO1xuICAgICh1c2VBdXRoIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHVzZXI6IHsgdWlkOiAndGVzdC11aWQnLCBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLCBpc0Fub255bW91czogZmFsc2UgfSxcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICBzaWduSW5Bbm9ueW1vdXNseTogamVzdC5mbigpLFxuICAgICAgY3JlYXRlQWNjb3VudDogamVzdC5mbigpLFxuICAgICAgc2lnbkluOiBqZXN0LmZuKCksXG4gICAgICBzaWduT3V0OiBqZXN0LmZuKCksXG4gICAgICBjbGVhckVycm9yOiBqZXN0LmZuKCksXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoXCJXaGVuIHRoZSB1c2VyIHJlcXVlc3QgdG8gYWRkIGFuIGV4ZXJjaXNlIHRoZWlyIHJlcXVlc3QgaXMgYWNjZXB0ZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdpdmVuXG4gICAgKHVzZUV4ZXJjaXNlcyBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7IGV4ZXJjaXNlczogW10gfSk7XG4gICAgcmVuZGVyKDxFeGVyY2lzZVNjcmVlbiAvPik7XG5cbiAgICAvLyBXaGVuXG4gICAgYXdhaXQgc3RhdGUudXNlci5wcmVzcyhzY3JlZW4uZ2V0QnlUZXN0SWQoXCJhZGQtZXhlcmNpc2VcIikpO1xuXG4gICAgLy8gVGhlblxuICAgIGV4cGVjdChzdGF0ZS5tb2NrUm91dGVyLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIi9leGVyY2lzZXMvYWRkXCIpO1xuICB9KTtcblxuICB0ZXN0KFwiZGlzcGxheXMgZXhlcmNpc2VzIHJldHVybmVkIGZyb20gdGhlIHVzZUV4ZXJjaXNlcyBob29rXCIsICgpID0+IHtcbiAgICAvLyBHaXZlblxuICAgIGNvbnN0IGV4ZXJjaXNlcyA9IFtcbiAgICAgIHsgaWQ6IFwiMVwiLCBuYW1lOiBcIlNxdWF0XCIgfSxcbiAgICAgIHsgaWQ6IFwiMlwiLCBuYW1lOiBcIkJlbmNoIFByZXNzXCIgfSxcbiAgICBdO1xuICAgICh1c2VFeGVyY2lzZXMgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoeyBleGVyY2lzZXMgfSk7XG5cbiAgICAvLyBXaGVuXG4gICAgcmVuZGVyKDxFeGVyY2lzZVNjcmVlbiAvPik7XG5cbiAgICAvLyBUaGVuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJTcXVhdFwiKSkudG9CZVZpc2libGUoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIkJlbmNoIFByZXNzXCIpKS50b0JlVmlzaWJsZSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFPO0lBQzNDQyxZQUFZLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3hCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSEosV0FBQSxHQUFLQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7RUFBQSxPQUFPO0lBQ3RDSSxPQUFPLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ25CLENBQUM7QUFB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