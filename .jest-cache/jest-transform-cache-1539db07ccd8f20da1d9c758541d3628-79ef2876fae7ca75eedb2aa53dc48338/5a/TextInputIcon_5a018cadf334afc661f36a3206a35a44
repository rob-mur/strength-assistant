aff98d0c5ade6c25091ac40e7eaf2cd0
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _excluded = ["icon", "onPress", "forceTextInputFocus", "color", "theme", "rippleColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IconAdornment = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _theming = require("../../../core/theming");
var _IconButton = _interopRequireDefault(require("../../IconButton/IconButton"));
var _constants = require("../constants");
var _helpers = require("../helpers");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var StyleContext = _react.default.createContext({
  style: {},
  isTextInputFocused: false,
  forceFocus: function forceFocus() {},
  testID: ''
});
var IconAdornment = function IconAdornment(_ref) {
  var icon = _ref.icon,
    topPosition = _ref.topPosition,
    side = _ref.side,
    isTextInputFocused = _ref.isTextInputFocused,
    forceFocus = _ref.forceFocus,
    testID = _ref.testID,
    themeOverrides = _ref.theme,
    disabled = _ref.disabled;
  var _ref2 = (0, _theming.useInternalTheme)(themeOverrides),
    isV3 = _ref2.isV3;
  var _ref3 = (0, _helpers.getConstants)(isV3),
    ICON_OFFSET = _ref3.ICON_OFFSET;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, ICON_OFFSET);
  var contextState = {
    style: style,
    isTextInputFocused: isTextInputFocused,
    forceFocus: forceFocus,
    testID: testID,
    disabled: disabled
  };
  return _react.default.createElement(StyleContext.Provider, {
    value: contextState
  }, icon);
};
exports.IconAdornment = IconAdornment;
var TextInputIcon = function TextInputIcon(_ref4) {
  var icon = _ref4.icon,
    onPress = _ref4.onPress,
    _ref4$forceTextInputF = _ref4.forceTextInputFocus,
    forceTextInputFocus = _ref4$forceTextInputF === void 0 ? true : _ref4$forceTextInputF,
    customColor = _ref4.color,
    themeOverrides = _ref4.theme,
    rippleColor = _ref4.rippleColor,
    rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
  var _react$default$useCon = _react.default.useContext(StyleContext),
    style = _react$default$useCon.style,
    isTextInputFocused = _react$default$useCon.isTextInputFocused,
    forceFocus = _react$default$useCon.forceFocus,
    testID = _react$default$useCon.testID,
    disabled = _react$default$useCon.disabled;
  var onPressWithFocusControl = _react.default.useCallback(function (e) {
    if (forceTextInputFocus && !isTextInputFocused) {
      forceFocus();
    }
    onPress === null || onPress === void 0 || onPress(e);
  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var iconColor = (0, _utils.getIconColor)({
    theme: theme,
    disabled: disabled,
    isTextInputFocused: isTextInputFocused,
    customColor: customColor
  });
  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, style]
  }, _react.default.createElement(_IconButton.default, _extends({
    icon: icon,
    style: styles.iconButton,
    size: _constants.ICON_SIZE,
    onPress: onPressWithFocusControl,
    iconColor: iconColor,
    testID: testID,
    theme: themeOverrides,
    rippleColor: rippleColor
  }, rest)));
};
TextInputIcon.displayName = 'TextInput.Icon';
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    width: _constants.ICON_SIZE,
    height: _constants.ICON_SIZE,
    justifyContent: 'center',
    alignItems: 'center'
  },
  iconButton: {
    margin: 0
  }
});
var _default = exports.default = TextInputIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dGlscyIsIl90aGVtaW5nIiwiX0ljb25CdXR0b24iLCJfY29uc3RhbnRzIiwiX2hlbHBlcnMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidCIsInIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIlN0eWxlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJzdHlsZSIsImlzVGV4dElucHV0Rm9jdXNlZCIsImZvcmNlRm9jdXMiLCJ0ZXN0SUQiLCJJY29uQWRvcm5tZW50IiwiX3JlZiIsImljb24iLCJ0b3BQb3NpdGlvbiIsInNpZGUiLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwiZGlzYWJsZWQiLCJfcmVmMiIsInVzZUludGVybmFsVGhlbWUiLCJpc1YzIiwiX3JlZjMiLCJnZXRDb25zdGFudHMiLCJJQ09OX09GRlNFVCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJ0b3AiLCJjb250ZXh0U3RhdGUiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImV4cG9ydHMiLCJUZXh0SW5wdXRJY29uIiwiX3JlZjQiLCJvblByZXNzIiwiX3JlZjQkZm9yY2VUZXh0SW5wdXRGIiwiZm9yY2VUZXh0SW5wdXRGb2N1cyIsImN1c3RvbUNvbG9yIiwiY29sb3IiLCJyaXBwbGVDb2xvciIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiX3JlYWN0JGRlZmF1bHQkdXNlQ29uIiwidXNlQ29udGV4dCIsIm9uUHJlc3NXaXRoRm9jdXNDb250cm9sIiwidXNlQ2FsbGJhY2siLCJpY29uQ29sb3IiLCJnZXRJY29uQ29sb3IiLCJWaWV3Iiwic3R5bGVzIiwiY29udGFpbmVyIiwiaWNvbkJ1dHRvbiIsInNpemUiLCJJQ09OX1NJWkUiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwb3NpdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwibWFyZ2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UZXh0SW5wdXQvQWRvcm5tZW50L1RleHRJbnB1dEljb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBU0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBR0EsSUFBQUksV0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssVUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBTixPQUFBO0FBQTBDLFNBQUFELHVCQUFBUSxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUFBLFNBQUFHLFNBQUE7RUFBQSxPQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxDQUFBO0lBQUEsU0FBQVAsQ0FBQSxNQUFBQSxDQUFBLEdBQUFRLFNBQUEsQ0FBQUMsTUFBQSxFQUFBVCxDQUFBO01BQUEsSUFBQVUsQ0FBQSxHQUFBRixTQUFBLENBQUFSLENBQUE7TUFBQSxTQUFBVyxDQUFBLElBQUFELENBQUEsT0FBQUUsY0FBQSxDQUFBQyxJQUFBLENBQUFILENBQUEsRUFBQUMsQ0FBQSxNQUFBSixDQUFBLENBQUFJLENBQUEsSUFBQUQsQ0FBQSxDQUFBQyxDQUFBO0lBQUE7SUFBQSxPQUFB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