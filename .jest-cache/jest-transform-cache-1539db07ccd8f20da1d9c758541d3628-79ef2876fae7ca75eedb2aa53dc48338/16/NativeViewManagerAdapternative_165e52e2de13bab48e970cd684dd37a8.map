{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","requireNativeViewManager","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_react","_reactNative","_NativeComponentRegistry","_requireNativeModule","_jsxRuntime","_callSuper","t","o","e","default","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","nativeComponentsCache","Map","requireNativeComponent","moduleName","viewName","_globalThis$expo$__ex","_globalThis$expo","appIdentifier","globalThis","expo","viewNameSuffix","nativeViewName","componentRegistryGet","_globalThis$expo2","expoViewConfig","getViewConfig","console","warn","assign","uiViewClassName","requireCachedNativeComponent","cacheKey","cachedNativeComponent","get","nativeComponent","set","viewManagersMetadata","NativeModules","NativeUnimoduleProxy","viewManagerConfig","__DEV__","exportedViewManagerNames","keys","join","ReactNativeComponent","NativeComponent","_PureComponent","_this","_len","arguments","length","args","Array","_key","concat","nativeRef","createRef","nativeTag","key","componentDidMount","findNodeHandle","current","render","jsx","props","ref","PureComponent","displayName","nativeModule","requireNativeModule","nativeViewPrototype","ViewPrototypes","_unused"],"sources":["NativeViewManagerAdapter.native.tsx"],"sourcesContent":["// Copyright Â© 2024 650 Industries.\n\n/// <reference path=\"ts-declarations/NativeComponentRegistry.d.ts\" />\n\n'use client';\n\nimport { type Component, type ComponentType, createRef, PureComponent } from 'react';\nimport {\n  findNodeHandle,\n  type HostComponent,\n  type NativeMethods,\n  NativeModules,\n} from 'react-native';\nimport { get as componentRegistryGet } from 'react-native/Libraries/NativeComponent/NativeComponentRegistry';\n\nimport { requireNativeModule } from './requireNativeModule';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n/**\n * A map that caches registered native components.\n */\nconst nativeComponentsCache = new Map<string, HostComponent<any>>();\n\n// TODO(@kitten): Optimally, this is defined on ExpoGlobal, but we treat `__expo_app_identifier__` as internal\ndeclare namespace globalThis {\n  const expo:\n    | undefined\n    | {\n        __expo_app_identifier__?: string;\n        getViewConfig(\n          moduleName: string,\n          viewName?: string\n        ): {\n          validAttributes: Record<string, any>;\n          directEventTypes: Record<string, { registrationName: string }>;\n        } | null;\n      };\n}\n\n/**\n * Requires a React Native component using the static view config from an Expo module.\n */\nfunction requireNativeComponent<Props>(\n  moduleName: string,\n  viewName?: string\n): HostComponent<Props> {\n  const appIdentifier = globalThis.expo?.['__expo_app_identifier__'] ?? '';\n  const viewNameSuffix = appIdentifier ? `_${appIdentifier}` : '';\n\n  const nativeViewName = viewName\n    ? `ViewManagerAdapter_${moduleName}_${viewName}${viewNameSuffix}`\n    : `ViewManagerAdapter_${moduleName}${viewNameSuffix}`;\n\n  return componentRegistryGet<Props>(nativeViewName, () => {\n    const expoViewConfig = globalThis.expo?.getViewConfig(moduleName, viewName);\n\n    if (!expoViewConfig) {\n      console.warn(\n        'Unable to get the view config for %s from module &s',\n        viewName ?? 'default view',\n        moduleName\n      );\n    }\n\n    return {\n      uiViewClassName: nativeViewName,\n      ...expoViewConfig,\n    };\n  });\n}\n\n/**\n * Requires a React Native component from cache if possible. This prevents\n * \"Tried to register two views with the same name\" errors on fast refresh, but\n * also when there are multiple versions of the same package with native component.\n */\nfunction requireCachedNativeComponent<Props>(\n  moduleName: string,\n  viewName?: string\n): HostComponent<Props> {\n  const cacheKey = `${moduleName}_${viewName}`;\n  const cachedNativeComponent = nativeComponentsCache.get(cacheKey);\n\n  if (!cachedNativeComponent) {\n    const nativeComponent = requireNativeComponent<Props>(moduleName, viewName);\n    nativeComponentsCache.set(cacheKey, nativeComponent);\n    return nativeComponent;\n  }\n  return cachedNativeComponent;\n}\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P>(\n  moduleName: string,\n  viewName?: string\n): ComponentType<P> {\n  const { viewManagersMetadata } = NativeModules.NativeUnimoduleProxy;\n\n  const viewManagerConfig = viewManagersMetadata?.[moduleName];\n\n  if (__DEV__ && !viewManagerConfig) {\n    const exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(\n      `The native view manager for module(${moduleName}) ${viewName ? ` required by name (${viewName})` : ''}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n    );\n  }\n\n  const ReactNativeComponent = requireCachedNativeComponent(moduleName, viewName);\n\n  class NativeComponent extends PureComponent<P> {\n    static displayName = viewName ? viewName : moduleName;\n\n    nativeRef = createRef<Component & NativeMethods>();\n\n    // This will be accessed from native when the prototype functions are called,\n    // in order to find the associated native view.\n    nativeTag: number | null = null;\n\n    componentDidMount(): void {\n      this.nativeTag = findNodeHandle(this.nativeRef.current);\n    }\n\n    render() {\n      return <ReactNativeComponent {...this.props} ref={this.nativeRef} />;\n    }\n  }\n\n  try {\n    const nativeModule = requireNativeModule(moduleName);\n    const nativeViewPrototype =\n      nativeModule.ViewPrototypes[viewName ? `${moduleName}_${viewName}` : moduleName];\n    if (nativeViewPrototype) {\n      // Assign native view functions to the component prototype, so they can be accessed from the ref.\n      Object.assign(NativeComponent.prototype, nativeViewPrototype);\n    }\n  } catch {\n    // `requireNativeModule` may throw an error when the native module cannot be found.\n    // In some tests we don't mock the entire modules, but we do want to mock native views. For now,\n    // until we still have to support the legacy modules proxy and don't have better ways to mock,\n    // let's just gracefully skip assigning the prototype functions.\n    // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx\n  }\n\n  return NativeComponent;\n}\n"],"mappings":"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","ignoreList":[]}