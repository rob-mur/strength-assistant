5539663260baf1d00178e385d35baa98
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthAwareLayout = AuthAwareLayout;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _AuthProvider = require("./AuthProvider");
var _AuthScreen = require("./AuthScreen");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function AuthAwareLayout(_ref) {
  var children = _ref.children;
  var _useAuthContext = (0, _AuthProvider.useAuthContext)(),
    user = _useAuthContext.user,
    loading = _useAuthContext.loading;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    forceShowAuth = _useState2[0],
    setForceShowAuth = _useState2[1];
  (0, _react.useEffect)(function () {
    if (!loading) {
      return;
    }
    if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
      console.warn("Chrome test environment - auth state should be managed by useAuth hook");
      return;
    }
    var timeout = setTimeout(function () {
      console.warn("Auth loading timeout - forcing auth screen display");
      setForceShowAuth(true);
    }, 5000);
    return function () {
      return clearTimeout(timeout);
    };
  }, [loading]);
  if (loading && !forceShowAuth) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.loadingContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
        size: "large"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.loadingText,
        children: "Initializing..."
      })]
    });
  }
  if (!user || forceShowAuth) {
    return (0, _jsxRuntime.jsx)(_AuthScreen.AuthScreen, {});
  }
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: children
  });
}
var styles = _reactNative.StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center"
  },
  loadingText: {
    marginTop: 16,
    textAlign: "center"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmVQYXBlciIsIl9BdXRoUHJvdmlkZXIiLCJfQXV0aFNjcmVlbiIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBdXRoQXdhcmVMYXlvdXQiLCJfcmVmIiwiY2hpbGRyZW4iLCJfdXNlQXV0aENvbnRleHQiLCJ1c2VBdXRoQ29udGV4dCIsInVzZXIiLCJsb2FkaW5nIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZm9yY2VTaG93QXV0aCIsInNldEZvcmNlU2hvd0F1dGgiLCJ1c2VFZmZlY3QiLCJwcm9jZXNzIiwiZW52IiwiQ0hST01FX1RFU1QiLCJDSSIsImNvbnNvbGUiLCJ3YXJuIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwibG9hZGluZ0NvbnRhaW5lciIsImpzeCIsIkFjdGl2aXR5SW5kaWNhdG9yIiwic2l6ZSIsIlRleHQiLCJsb2FkaW5nVGV4dCIsIkF1dGhTY3JlZW4iLCJGcmFnbWVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwibWFyZ2luVG9wIiwidGV4dEFsaWduIl0sInNvdXJjZXMiOlsiQXV0aEF3YXJlTGF5b3V0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgQWN0aXZpdHlJbmRpY2F0b3IsIFRleHQgfSBmcm9tIFwicmVhY3QtbmF0aXZlLXBhcGVyXCI7XG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gXCIuL0F1dGhQcm92aWRlclwiO1xuaW1wb3J0IHsgQXV0aFNjcmVlbiB9IGZyb20gXCIuL0F1dGhTY3JlZW5cIjtcblxuaW50ZXJmYWNlIEF1dGhBd2FyZUxheW91dFByb3BzIHtcblx0Y2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEF1dGhBd2FyZUxheW91dCh7IGNoaWxkcmVuIH06IEF1dGhBd2FyZUxheW91dFByb3BzKSB7XG5cdGNvbnN0IHsgdXNlciwgbG9hZGluZyB9ID0gdXNlQXV0aENvbnRleHQoKTtcblx0Y29uc3QgW2ZvcmNlU2hvd0F1dGgsIHNldEZvcmNlU2hvd0F1dGhdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG5cdC8vIFNob3cgYXV0aCBzY3JlZW4gYXBwcm9wcmlhdGVseSBmb3IgZGlmZmVyZW50IGVudmlyb25tZW50c1xuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmICghbG9hZGluZykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEluIENocm9tZSB0ZXN0IGVudmlyb25tZW50LCBubyBuZWVkIHRvIGZvcmNlIC0gYXV0aCBob29rIGFscmVhZHkgaGFuZGxlcyB0aGlzXG5cdFx0aWYgKHByb2Nlc3MuZW52LkNIUk9NRV9URVNUID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuQ0kgPT09ICd0cnVlJykge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ2hyb21lIHRlc3QgZW52aXJvbm1lbnQgLSBhdXRoIHN0YXRlIHNob3VsZCBiZSBtYW5hZ2VkIGJ5IHVzZUF1dGggaG9va1wiKTtcblx0XHRcdC8vIExldCB0aGUgdXNlQXV0aCBob29rIGhhbmRsZSB0aGUgc3RhdGUsIGRvbid0IGZvcmNlIGFueXRoaW5nIGhlcmVcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBOb3JtYWwgdGltZW91dCBmb3Igb3RoZXIgZW52aXJvbm1lbnRzXG5cdFx0Y29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQXV0aCBsb2FkaW5nIHRpbWVvdXQgLSBmb3JjaW5nIGF1dGggc2NyZWVuIGRpc3BsYXlcIik7XG5cdFx0XHRzZXRGb3JjZVNob3dBdXRoKHRydWUpO1xuXHRcdH0sIDUwMDApOyAvLyA1IHNlY29uZHMgdGltZW91dFxuXG5cdFx0cmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0fSwgW2xvYWRpbmddKTtcblxuXHRpZiAobG9hZGluZyAmJiAhZm9yY2VTaG93QXV0aCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmxvYWRpbmdDb250YWluZXJ9PlxuXHRcdFx0XHQ8QWN0aXZpdHlJbmRpY2F0b3Igc2l6ZT1cImxhcmdlXCIgLz5cblx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5sb2FkaW5nVGV4dH0+SW5pdGlhbGl6aW5nLi4uPC9UZXh0PlxuXHRcdFx0PC9WaWV3PlxuXHRcdCk7XG5cdH1cblxuXHRpZiAoIXVzZXIgfHwgZm9yY2VTaG93QXV0aCkge1xuXHRcdHJldHVybiA8QXV0aFNjcmVlbiAvPjtcblx0fVxuXG5cdHJldHVybiA8PntjaGlsZHJlbn08Lz47XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcblx0bG9hZGluZ0NvbnRhaW5lcjoge1xuXHRcdGZsZXg6IDEsXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG5cdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcblx0fSxcblx0bG9hZGluZ1RleHQ6IHtcblx0XHRtYXJnaW5Ub3A6IDE2LFxuXHRcdHRleHRBbGln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