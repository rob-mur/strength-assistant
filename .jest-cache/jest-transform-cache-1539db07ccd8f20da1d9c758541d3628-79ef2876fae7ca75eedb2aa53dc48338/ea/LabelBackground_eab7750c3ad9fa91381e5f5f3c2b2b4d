a0d580969dcca21f11373ff34d39fa06
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var LabelBackground = function LabelBackground(_ref) {
  var labeled = _ref.labeled,
    labelLayoutWidth = _ref.labelLayoutWidth,
    labelLayoutHeight = _ref.labelLayoutHeight,
    placeholderStyle = _ref.placeholderStyle,
    baseLabelTranslateX = _ref.baseLabelTranslateX,
    topPosition = _ref.topPosition,
    backgroundColor = _ref.backgroundColor,
    roundness = _ref.roundness,
    labelStyle = _ref.labelStyle,
    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
    testID = _ref.testID;
  var opacity = labeled.interpolate({
    inputRange: [0, 0.6],
    outputRange: [1, 0]
  });
  var labelTranslationX = {
    translateX: labeled.interpolate({
      inputRange: [0, 1],
      outputRange: [-baseLabelTranslateX, 0]
    })
  };
  var labelTextScaleY = {
    scaleY: labeled.interpolate({
      inputRange: [0, 1],
      outputRange: [0.2, 1]
    })
  };
  var labelTextTransform = [].concat((0, _toConsumableArray2.default)(labelStyle.transform), [labelTextScaleY]);
  var isRounded = roundness > 6;
  var roundedEdgeCover = isRounded ? React.createElement(_reactNative.Animated.View, {
    key: "labelBackground-view",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.view, {
      backgroundColor: backgroundColor,
      maxHeight: Math.max(roundness / 3, 2),
      bottom: Math.max(roundness, 2),
      transform: [labelTranslationX],
      opacity: opacity
    }]
  }) : null;
  return [roundedEdgeCover, React.createElement(_AnimatedText.default, {
    key: "labelBackground-text",
    testID: `${testID}-label-background`,
    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {
      top: topPosition + 1,
      width: labelLayoutWidth - placeholderStyle.paddingHorizontal,
      height: labelLayoutHeight,
      backgroundColor: backgroundColor,
      opacity: opacity,
      transform: labelTextTransform
    }],
    numberOfLines: 1,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  })];
};
var _default = exports.default = LabelBackground;
var styles = _reactNative.StyleSheet.create({
  view: {
    position: 'absolute',
    top: 6,
    left: 10,
    width: 12
  },
  outlinedLabel: {
    position: 'absolute',
    left: 8,
    paddingHorizontal: 0,
    color: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9BbmltYXRlZFRleHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidCIsIldlYWtNYXAiLCJyIiwibiIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTGFiZWxCYWNrZ3JvdW5kIiwiX3JlZiIsImxhYmVsZWQiLCJsYWJlbExheW91dFdpZHRoIiwibGFiZWxMYXlvdXRIZWlnaHQiLCJwbGFjZWhvbGRlclN0eWxlIiwiYmFzZUxhYmVsVHJhbnNsYXRlWCIsInRvcFBvc2l0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwicm91bmRuZXNzIiwibGFiZWxTdHlsZSIsIm1heEZvbnRTaXplTXVsdGlwbGllciIsInRlc3RJRCIsIm9wYWNpdHkiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsImxhYmVsVHJhbnNsYXRpb25YIiwidHJhbnNsYXRlWCIsImxhYmVsVGV4dFNjYWxlWSIsInNjYWxlWSIsImxhYmVsVGV4dFRyYW5zZm9ybSIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJ0cmFuc2Zvcm0iLCJpc1JvdW5kZWQiLCJyb3VuZGVkRWRnZUNvdmVyIiwiY3JlYXRlRWxlbWVudCIsIkFuaW1hdGVkIiwiVmlldyIsImtleSIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJhYnNvbHV0ZUZpbGwiLCJzdHlsZXMiLCJ2aWV3IiwibWF4SGVpZ2h0IiwiTWF0aCIsIm1heCIsImJvdHRvbSIsIm91dGxpbmVkTGFiZWwiLCJ0b3AiLCJ3aWR0aCIsInBhZGRpbmdIb3Jpem9udGFsIiwiaGVpZ2h0IiwibnVtYmVyT2ZMaW5lcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImNyZWF0ZSIsInBvc2l0aW9uIiwibGVmdCIsImNvbG9yIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGV4dElucHV0L0xhYmVsL0xhYmVsQmFja2dyb3VuZC50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsYUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQXlELFNBQUFHLHVCQUFBQyxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUFBLFNBQUFMLHdCQUFBSyxDQUFBLEVBQUFHLENBQUE7RUFBQSx5QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFBO0VBQUEsUUFBQVQsdUJBQUEsWUFBQUEsd0JBQUFLLENBQUEsRUFBQUcsQ0FBQTtJQUFBLEtBQUFBLENBQUEsSUFBQUgsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsU0FBQUQsQ0FBQTtJQUFBLElBQUFPLENBQUE7TUFBQUMsQ0FBQTtNQUFBQyxDQUFBO1FBQUFDLFNBQUE7UUFBQVIsT0FBQSxFQUFBRjtNQUFBO0lBQUEsYUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUyxDQUFBO0lBQUEsSUFBQUYsQ0FBQSxHQUFBSixDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQTtNQUFBLElBQUFFLENBQUEsQ0FBQUksR0FBQSxDQUFBWCxDQUFBLFVBQUFPLENBQUEsQ0FBQUssR0FBQSxDQUFBWixDQUFBO01BQUFPLENBQUEsQ0FBQU0sR0FBQSxDQUFBYixDQUFBLEVBQUFTLENBQUE7SUFBQTtJQUFB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