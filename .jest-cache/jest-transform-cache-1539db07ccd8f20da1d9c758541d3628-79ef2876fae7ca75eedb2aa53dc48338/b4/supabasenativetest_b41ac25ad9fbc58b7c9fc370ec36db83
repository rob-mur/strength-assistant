88a280ed75e9e63fd645b69b13d6ee27
_getJestObj().mock("@supabase/supabase-js", function () {
  return {
    createClient: jest.fn()
  };
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _env2 = require("expo/virtual/env");
var _supabase = require("@/lib/data/supabase/supabase/supabase.native");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require = require("@supabase/supabase-js"),
  createClient = _require.createClient;
var mockCreateClient = createClient;
var originalEnv = process.env;
function setNodeEnv(value) {
  Object.defineProperty(process.env, 'NODE_ENV', {
    value: value,
    writable: true,
    enumerable: true,
    configurable: true
  });
}
describe("SupabaseNativeService", function () {
  var mockClient = {
    auth: {},
    from: jest.fn(),
    storage: {}
  };
  beforeEach(function () {
    jest.clearAllMocks();
    delete _env2.env.EXPO_PUBLIC_SUPABASE_URL;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;
    delete _env2.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT;
    mockCreateClient.mockReturnValue(mockClient);
    (0, _supabase.resetSupabaseService)();
  });
  afterEach(function () {
    delete _env2.env.EXPO_PUBLIC_SUPABASE_URL;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;
    delete _env2.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT;
  });
  afterAll(function () {
    process.env = originalEnv;
  });
  describe("initialization", function () {
    test("initializes with production configuration", function () {
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("https://test.supabase.co", "test-anon-key", {
        auth: {
          autoRefreshToken: true,
          persistSession: true,
          detectSessionInUrl: false
        }
      });
    });
    test("initializes with emulator configuration in development", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "dev-anon-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("http://10.0.2.2:54321", "dev-anon-key", expect.objectContaining({
        auth: expect.objectContaining({
          autoRefreshToken: true,
          persistSession: true,
          detectSessionInUrl: false
        })
      }));
    });
    test("uses custom emulator host and port", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST = "192.168.1.100";
      process.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT = "8000";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "dev-anon-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("http://192.168.1.100:8000", "dev-anon-key", expect.any(Object));
    });
    test("uses default Android emulator host (10.0.2.2)", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "dev-anon-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("http://10.0.2.2:54321", "dev-anon-key", expect.any(Object));
    });
    test("uses default development key when no key provided in emulator mode", function () {
      setNodeEnv("development");
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("http://10.0.2.2:54321", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0", expect.any(Object));
    });
    test("throws error when missing production URL", function () {
      setNodeEnv("production");
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-key";
      expect(function () {
        return (0, _supabase.initSupabase)();
      }).toThrow("Missing Supabase configuration. URL: false, Key: true");
    });
    test("throws error when missing production anon key", function () {
      setNodeEnv("production");
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      expect(function () {
        return (0, _supabase.initSupabase)();
      }).toThrow("Missing Supabase configuration. URL: true, Key: false");
    });
    test("skips initialization when already initialized", function () {
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
      (0, _supabase.initSupabase)();
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledTimes(1);
    });
  });
  describe("getSupabaseClient", function () {
    test("returns client after initialization", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
      (0, _supabase.initSupabase)();
      var client = (0, _supabase.getSupabaseClient)();
      expect(client).toBe(mockClient);
    });
    test("throws error when not initialized", function () {
      expect(function () {
        return (0, _supabase.getSupabaseClient)();
      }).toThrow("Supabase service not initialized. Call init() before getSupabaseClient()");
    });
  });
  describe("platform-specific differences", function () {
    test("uses different default host than web (10.0.2.2 vs 127.0.0.1)", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "dev-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalled();
      var calls = mockCreateClient.mock.calls;
      if (calls.length > 0) {
        var _calls$ = (0, _slicedToArray2.default)(calls[0], 1),
          url = _calls$[0];
        expect(url).toBe("http://10.0.2.2:54321");
      }
    });
    test("sets detectSessionInUrl to false for native", function () {
      setNodeEnv("development");
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalled();
      var calls = mockCreateClient.mock.calls;
      if (calls.length > 0) {
        var _config$auth;
        var _calls$2 = (0, _slicedToArray2.default)(calls[0], 3),
          config = _calls$2[2];
        expect(config == null || (_config$auth = config.auth) == null ? void 0 : _config$auth.detectSessionInUrl).toBe(false);
      }
    });
  });
  describe("error handling", function () {
    test("handles createClient errors", function () {
      setNodeEnv("production");
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
      mockCreateClient.mockImplementation(function () {
        throw new Error("Connection failed");
      });
      expect(function () {
        return (0, _supabase.initSupabase)();
      }).toThrow("Connection failed");
    });
  });
  describe("emulator detection", function () {
    test("detects emulator mode with EXPO_PUBLIC_USE_SUPABASE_EMULATOR", function () {
      Object.defineProperty(process.env, 'EXPO_PUBLIC_USE_SUPABASE_EMULATOR', {
        value: 'true',
        writable: true,
        enumerable: true,
        configurable: true
      });
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("http://10.0.2.2:54321", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0", expect.any(Object));
    });
    test("uses production mode when emulator flag is false", function () {
      setNodeEnv("production");
      process.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR = "false";
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://prod.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "prod-key";
      (0, _supabase.initSupabase)();
      expect(mockCreateClient).toHaveBeenCalledWith("https://prod.supabase.co", "prod-key", expect.any(Object));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,