506db56260f5a2f18c90d3ebb5901add
var _Exercise = require("@/lib/models/Exercise");
describe("ExerciseValidator", function () {
  describe("validateExerciseInput", function () {
    test("validates valid exercise input", function () {
      var validInput = {
        name: "Push-ups"
      };
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseInput(validInput);
      }).not.toThrow();
    });
    test("throws error for null input", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseInput(null);
      }).toThrow("Exercise input is required");
    });
    test("throws error for undefined input", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseInput(undefined);
      }).toThrow("Exercise input is required");
    });
  });
  describe("validateExerciseName", function () {
    test("validates valid exercise names", function () {
      var validNames = ["Push-ups", "Bench Press", "Squats (Bodyweight)", "Pull-ups", "Deadlift 123", "Bicep Curls - 15 lbs", "Plank (60 sec.)"];
      validNames.forEach(function (name) {
        expect(function () {
          return _Exercise.ExerciseValidator.validateExerciseName(name);
        }).not.toThrow();
      });
    });
    test("throws error for empty name", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName("");
      }).toThrow("Exercise name cannot be empty");
    });
    test("throws error for whitespace-only name", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName("   ");
      }).toThrow("Exercise name cannot be empty");
    });
    test("throws error for null name", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName(null);
      }).toThrow("Exercise name is required and must be a string");
    });
    test("throws error for undefined name", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName(undefined);
      }).toThrow("Exercise name is required and must be a string");
    });
    test("throws error for non-string name", function () {
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName(123);
      }).toThrow("Exercise name is required and must be a string");
    });
    test("throws error for names exceeding max length", function () {
      var tooLongName = "a".repeat(101);
      expect(function () {
        return _Exercise.ExerciseValidator.validateExerciseName(tooLongName);
      }).toThrow("Exercise name cannot exceed 100 characters");
    });
    test("throws error for names with invalid characters", function () {
      var invalidNames = ["Exercise<script>alert('xss')</script>", "Exercise; DROP TABLE exercises;", "Exercise & malicious code", "Exercise | dangerous", "Exercise $ injection", "Exercise % attack", "Exercise ^ symbol", "Exercise * wildcard", "Exercise + plus", "Exercise = equals", "Exercise { brace", "Exercise [ bracket", "Exercise \\ backslash", "Exercise / slash", "Exercise ? question", "Exercise # hash", "Exercise @ at", "Exercise ! exclamation"];
      invalidNames.forEach(function (name) {
        expect(function () {
          return _Exercise.ExerciseValidator.validateExerciseName(name);
        }).toThrow("Exercise name contains invalid characters");
      });
    });
  });
  describe("sanitizeExerciseName", function () {
    test("trims whitespace", function () {
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName("  Push-ups  ")).toBe("Push-ups");
    });
    test("normalizes multiple spaces", function () {
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName("Bench    Press")).toBe("Bench Press");
    });
    test("handles tabs and newlines", function () {
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName("Exercise\t\nName")).toBe("Exercise Name");
    });
    test("handles empty string", function () {
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName("")).toBe("");
    });
    test("preserves single spaces", function () {
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName("Bicep Curls")).toBe("Bicep Curls");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,