9c3fa939f7f3b7c5c7db0c300317d7c7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@/lib/utils/asyncStorage.web"));
var originalConsoleWarn = console.warn;
beforeAll(function () {
  console.warn = jest.fn();
});
afterAll(function () {
  console.warn = originalConsoleWarn;
});
describe("AsyncStorageWeb", function () {
  var mockLocalStorage;
  beforeEach(function () {
    var store = {};
    mockLocalStorage = {
      getItem: jest.fn(function (key) {
        return store[key] || null;
      }),
      setItem: jest.fn(function (key, value) {
        store[key] = value;
      }),
      removeItem: jest.fn(function (key) {
        delete store[key];
      }),
      clear: jest.fn(function () {
        Object.keys(store).forEach(function (key) {
          return delete store[key];
        });
      }),
      length: 0,
      key: jest.fn()
    };
    jest.clearAllMocks();
  });
  afterEach(function () {
    if (typeof window !== 'undefined') {
      window.localStorage = undefined;
    }
  });
  describe("getItem", function () {
    test("returns item from localStorage when window and localStorage are available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      mockLocalStorage.getItem = jest.fn().mockReturnValue("test-value");
      var result = yield _asyncStorage.default.getItem("test-key");
      expect(result).toBe("test-value");
      expect(mockLocalStorage.getItem).toHaveBeenCalledWith("test-key");
    }));
    test("returns null when window is undefined", (0, _asyncToGenerator2.default)(function* () {
      global.window = undefined;
      var result = yield _asyncStorage.default.getItem("test-key");
      expect(result).toBeNull();
    }));
    test("returns null when localStorage is not available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {};
      var result = yield _asyncStorage.default.getItem("test-key");
      expect(result).toBeNull();
    }));
    test("returns null and logs warning when localStorage throws error", (0, _asyncToGenerator2.default)(function* () {
      var errorLocalStorage = {
        getItem: jest.fn().mockImplementation(function () {
          throw new Error("localStorage error");
        })
      };
      global.window = {
        localStorage: errorLocalStorage
      };
      var result = yield _asyncStorage.default.getItem("test-key");
      expect(result).toBeNull();
      expect(console.warn).toHaveBeenCalledWith("AsyncStorage.getItem failed:", expect.any(Error));
    }));
    test("returns null when item doesn't exist in localStorage", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      mockLocalStorage.getItem = jest.fn().mockReturnValue(null);
      var result = yield _asyncStorage.default.getItem("non-existent-key");
      expect(result).toBeNull();
      expect(mockLocalStorage.getItem).toHaveBeenCalledWith("non-existent-key");
    }));
    test("handles empty string values correctly", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      mockLocalStorage.getItem = jest.fn().mockReturnValue("");
      var result = yield _asyncStorage.default.getItem("empty-key");
      expect(result).toBe("");
      expect(mockLocalStorage.getItem).toHaveBeenCalledWith("empty-key");
    }));
  });
  describe("setItem", function () {
    test("sets item in localStorage when window and localStorage are available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.setItem("test-key", "test-value");
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("test-key", "test-value");
    }));
    test("does nothing when window is undefined", (0, _asyncToGenerator2.default)(function* () {
      global.window = undefined;
      var setItemSpy = jest.fn();
      yield _asyncStorage.default.setItem("test-key", "test-value");
      expect(setItemSpy).not.toHaveBeenCalled();
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("does nothing when localStorage is not available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {};
      yield _asyncStorage.default.setItem("test-key", "test-value");
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("logs warning when localStorage throws error", (0, _asyncToGenerator2.default)(function* () {
      var errorLocalStorage = {
        setItem: jest.fn().mockImplementation(function () {
          throw new Error("localStorage quota exceeded");
        })
      };
      global.window = {
        localStorage: errorLocalStorage
      };
      yield _asyncStorage.default.setItem("test-key", "test-value");
      expect(console.warn).toHaveBeenCalledWith("AsyncStorage.setItem failed:", expect.any(Error));
    }));
    test("handles empty string values", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.setItem("empty-key", "");
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("empty-key", "");
    }));
    test("handles special characters in keys and values", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      var specialKey = "key-with-special-chars!@#$%";
      var specialValue = "value with spaces and unicode: ðŸš€";
      yield _asyncStorage.default.setItem(specialKey, specialValue);
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(specialKey, specialValue);
    }));
  });
  describe("removeItem", function () {
    test("removes item from localStorage when window and localStorage are available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.removeItem("test-key");
      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("test-key");
    }));
    test("does nothing when window is undefined", (0, _asyncToGenerator2.default)(function* () {
      global.window = undefined;
      var removeItemSpy = jest.fn();
      yield _asyncStorage.default.removeItem("test-key");
      expect(removeItemSpy).not.toHaveBeenCalled();
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("does nothing when localStorage is not available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {};
      yield _asyncStorage.default.removeItem("test-key");
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("logs warning when localStorage throws error", (0, _asyncToGenerator2.default)(function* () {
      var errorLocalStorage = {
        removeItem: jest.fn().mockImplementation(function () {
          throw new Error("localStorage error");
        })
      };
      global.window = {
        localStorage: errorLocalStorage
      };
      yield _asyncStorage.default.removeItem("test-key");
      expect(console.warn).toHaveBeenCalledWith("AsyncStorage.removeItem failed:", expect.any(Error));
    }));
    test("handles removing non-existent keys gracefully", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.removeItem("non-existent-key");
      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("non-existent-key");
      expect(console.warn).not.toHaveBeenCalled();
    }));
  });
  describe("clear", function () {
    test("clears localStorage when window and localStorage are available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.clear();
      expect(mockLocalStorage.clear).toHaveBeenCalled();
    }));
    test("does nothing when window is undefined", (0, _asyncToGenerator2.default)(function* () {
      global.window = undefined;
      var clearSpy = jest.fn();
      yield _asyncStorage.default.clear();
      expect(clearSpy).not.toHaveBeenCalled();
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("does nothing when localStorage is not available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {};
      yield _asyncStorage.default.clear();
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("logs warning when localStorage throws error", (0, _asyncToGenerator2.default)(function* () {
      var errorLocalStorage = {
        clear: jest.fn().mockImplementation(function () {
          throw new Error("localStorage error");
        })
      };
      global.window = {
        localStorage: errorLocalStorage
      };
      yield _asyncStorage.default.clear();
      expect(console.warn).toHaveBeenCalledWith("AsyncStorage.clear failed:", expect.any(Error));
    }));
  });
  describe("Integration scenarios", function () {
    test("can perform full CRUD operations when localStorage is available", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.setItem("user-id", "12345");
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("user-id", "12345");
      mockLocalStorage.getItem = jest.fn().mockReturnValue("12345");
      var value = yield _asyncStorage.default.getItem("user-id");
      expect(value).toBe("12345");
      yield _asyncStorage.default.setItem("user-id", "54321");
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("user-id", "54321");
      yield _asyncStorage.default.removeItem("user-id");
      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("user-id");
    }));
    test("handles mixed availability scenarios gracefully", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.setItem("test-key", "test-value");
      expect(mockLocalStorage.setItem).toHaveBeenCalled();
      global.window = {};
      var result = yield _asyncStorage.default.getItem("test-key");
      expect(result).toBeNull();
      expect(console.warn).not.toHaveBeenCalled();
    }));
    test("works correctly with JSON data", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      var testObject = {
        name: "John",
        age: 30,
        active: true
      };
      var jsonString = JSON.stringify(testObject);
      yield _asyncStorage.default.setItem("user-data", jsonString);
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith("user-data", jsonString);
      mockLocalStorage.getItem = jest.fn().mockReturnValue(jsonString);
      var retrievedJson = yield _asyncStorage.default.getItem("user-data");
      expect(retrievedJson).toBe(jsonString);
      var parsedObject = JSON.parse(retrievedJson);
      expect(parsedObject).toEqual(testObject);
    }));
  });
  describe("Async behavior", function () {
    test("all methods return promises", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      var getItemPromise = _asyncStorage.default.getItem("test-key");
      var setItemPromise = _asyncStorage.default.setItem("test-key", "value");
      var removeItemPromise = _asyncStorage.default.removeItem("test-key");
      var clearPromise = _asyncStorage.default.clear();
      expect(getItemPromise).toBeInstanceOf(Promise);
      expect(setItemPromise).toBeInstanceOf(Promise);
      expect(removeItemPromise).toBeInstanceOf(Promise);
      expect(clearPromise).toBeInstanceOf(Promise);
      yield Promise.all([getItemPromise, setItemPromise, removeItemPromise, clearPromise]);
    }));
    test("methods can be awaited in sequence", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      yield _asyncStorage.default.setItem("key1", "value1");
      yield _asyncStorage.default.setItem("key2", "value2");
      mockLocalStorage.getItem = jest.fn().mockReturnValueOnce("value1").mockReturnValueOnce("value2");
      var value1 = yield _asyncStorage.default.getItem("key1");
      var value2 = yield _asyncStorage.default.getItem("key2");
      expect(value1).toBe("value1");
      expect(value2).toBe("value2");
      yield _asyncStorage.default.removeItem("key1");
      yield _asyncStorage.default.clear();
      expect(mockLocalStorage.setItem).toHaveBeenCalledTimes(2);
      expect(mockLocalStorage.getItem).toHaveBeenCalledTimes(2);
      expect(mockLocalStorage.removeItem).toHaveBeenCalledTimes(1);
      expect(mockLocalStorage.clear).toHaveBeenCalledTimes(1);
    }));
    test("methods can be executed concurrently", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      mockLocalStorage.getItem = jest.fn().mockReturnValue("concurrent-value");
      var promises = [_asyncStorage.default.setItem("key1", "value1"), _asyncStorage.default.setItem("key2", "value2"), _asyncStorage.default.getItem("key3"), _asyncStorage.default.removeItem("key4")];
      var results = yield Promise.all(promises);
      expect(results[0]).toBeUndefined();
      expect(results[1]).toBeUndefined();
      expect(results[2]).toBe("concurrent-value");
      expect(results[3]).toBeUndefined();
    }));
  });
  describe("Edge cases", function () {
    test("handles extremely large keys and values", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: mockLocalStorage
      };
      var largeKey = "x".repeat(1000);
      var largeValue = "y".repeat(10000);
      yield _asyncStorage.default.setItem(largeKey, largeValue);
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(largeKey, largeValue);
    }));
    test("handles localStorage quota exceeded gracefully", (0, _asyncToGenerator2.default)(function* () {
      var quotaExceededLocalStorage = {
        setItem: jest.fn().mockImplementation(function () {
          var error = new Error("QuotaExceededError");
          error.name = "QuotaExceededError";
          throw error;
        })
      };
      global.window = {
        localStorage: quotaExceededLocalStorage
      };
      yield _asyncStorage.default.setItem("key", "value");
      expect(console.warn).toHaveBeenCalledWith("AsyncStorage.setItem failed:", expect.objectContaining({
        name: "QuotaExceededError"
      }));
    }));
    test("handles null and undefined window.localStorage gracefully", (0, _asyncToGenerator2.default)(function* () {
      global.window = {
        localStorage: null
      };
      var result = yield _asyncStorage.default.getItem("test");
      expect(result).toBeNull();
      global.window = {
        localStorage: undefined
      };
      result = yield _asyncStorage.default.getItem("test");
      expect(result).toBeNull();
      expect(console.warn).not.toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,