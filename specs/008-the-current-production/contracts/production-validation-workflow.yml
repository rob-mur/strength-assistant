# Contract: Production Validation Workflow  

description: End-to-end APK download and production testing workflow
version: 1.0.0
type: github_actions_workflow

## Trigger Contract

```yaml
triggers:
  workflow_dispatch:
    inputs:
      terraform_deployment_id:
        type: string
        description: Terraform deployment ID for validation tracking
        required: true
  workflow_run:
    workflows: ["Build Production APK", "Terraform Deploy"]
    types: [completed]
    branches: [main]
    condition: conclusion == 'success'
```

## Environment Contract

```yaml
environment:
  required_vars:
    GITHUB_TOKEN: GitHub API access token
    SKIP_DATA_CLEANUP: Set to 'true' for anonymous user testing
    NODE_ENV: Set to 'production' for production validation
  runner: ubuntu-latest
  timeout: 30 minutes
```

## Step Contract

### 1. Repository Checkout
- **Action**: actions/checkout@v4
- **Purpose**: Access workflow files and configurations
- **Output**: Repository files available in workspace

### 2. GitHub Release Verification  
- **Contract**: github-release-verification.yml
- **Purpose**: Verify release exists and contains APK assets
- **Critical Path**: MUST succeed before download attempt
- **Error Handling**: Fail fast with clear diagnostics

### 3. APK Download Operation
- **Contract**: apk-download-operation.yml  
- **Purpose**: Download and validate APK file integrity
- **Retry Logic**: Exponential backoff for transient failures only
- **Output**: Local APK file path for testing

### 4. Testing Environment Setup
- **Action**: ./.github/actions/setup-dev-environment
- **Config**: android-testing devbox configuration
- **Purpose**: Prepare Maestro testing environment

### 5. Production Validation Testing
- **Purpose**: Execute Maestro tests against downloaded APK
- **Environment**: SKIP_DATA_CLEANUP=true, TEST_ENVIRONMENT=production
- **Command**: devbox run integration_test_android
- **Input**: APK_PATH from download step

### 6. Result Processing
- **Purpose**: Aggregate and report validation outcomes
- **Outputs**: build-successful, tests-passed status
- **Format**: GitHub Actions step outputs for downstream consumption

## Success Contract

```yaml
success_criteria:
  - GitHub release exists and contains APK asset
  - APK downloads successfully with valid format
  - File integrity checks pass (size, ZIP signature)
  - Maestro production tests execute without errors
  - Anonymous user testing completes successfully
  
outputs:
  validation_successful: boolean
  apk_download_successful: boolean  
  tests_passed: boolean
  deployment_id: string
```

## Failure Contract

```yaml
failure_scenarios:
  no_releases_found:
    exit_code: 1
    message: "No GitHub releases exist"
    action: "Check build-production workflow completion"
    
  apk_download_failed:
    exit_code: 2  
    message: "Failed to download APK after retries"
    action: "Verify APK uploaded to release assets"
    
  apk_file_missing:
    exit_code: 3
    message: "No APK files in release assets"
    action: "Check APK naming and upload process"
    
  apk_file_corrupted:
    exit_code: 4
    message: "Downloaded APK is empty or corrupted"
    action: "Retry download or rebuild APK"
    
  invalid_apk_format:
    exit_code: 5
    message: "APK file has invalid format"
    action: "Verify APK build process and integrity"
    
  maestro_tests_failed:
    exit_code: 6
    message: "Production validation tests failed"
    action: "Check production infrastructure and test logs"
```

## Notification Contract

### Success Notification
- **Format**: `::notice title=Production Validation Passed::`
- **Content**: Deployment ID, validation completion confirmation
- **Audience**: Development team, deployment automation

### Failure Notification  
- **Format**: `::error title=Production Validation Failed::`
- **Content**: Specific failure reason, troubleshooting steps
- **Action**: Block frontend deployment pending investigation
- **Escalation**: Email notifications via GitHub Actions

## Dependencies

### External Actions
- actions/checkout@v4 (GitHub official)
- ./.github/actions/setup-dev-environment (internal)

### CLI Tools
- GitHub CLI (gh) for release operations
- devbox for environment management
- Maestro for integration testing

### Permissions
- contents: read (for repository access)
- actions: read (for workflow run access)  
- releases: read (for APK download)

## Performance Contract

- **Maximum Duration**: 30 minutes total workflow
- **APK Download**: Complete within 5 minutes including retries
- **Test Execution**: Maestro tests complete within 15 minutes
- **Resource Usage**: Standard GitHub runner capacity sufficient

## Constitutional Compliance

- **Local Testing First**: Changes can be tested via devbox locally
- **Anonymous User Testing**: SKIP_DATA_CLEANUP=true ensures clean state
- **CI/CD Infrastructure as Code**: All workflow changes version controlled
- **Progressive Validation**: APK → Download → Validate → Test progression