b5f6a58a47b55160392bae2d0a6f43e5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_ENV_WITH_LOCAL_ASSETS = void 0;
exports.getLocalAssets = getLocalAssets;
exports.getManifest2 = getManifest2;
exports.manifestBaseUrl = void 0;
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _expoModulesCore = require("expo-modules-core");
var _AssetUris = require("./AssetUris");
var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
var NativeExpoGoModule = function () {
  try {
    return (0, _expoModulesCore.requireNativeModule)('ExpoGo');
  } catch (_unused) {
    return null;
  }
}();
function isRunningInExpoGo() {
  return NativeExpoGoModule != null;
}
var expoUpdatesIsInstalledAndEnabled = !!(ExpoUpdates != null && ExpoUpdates.isEnabled);
var expoUpdatesIsUsingEmbeddedAssets = ExpoUpdates == null ? void 0 : ExpoUpdates.isUsingEmbeddedAssets;
var shouldUseUpdatesAssetResolution = expoUpdatesIsInstalledAndEnabled && !expoUpdatesIsUsingEmbeddedAssets;
var IS_ENV_WITH_LOCAL_ASSETS = exports.IS_ENV_WITH_LOCAL_ASSETS = isRunningInExpoGo() || shouldUseUpdatesAssetResolution;
function getLocalAssets() {
  var _ExpoUpdates$localAss;
  return (_ExpoUpdates$localAss = ExpoUpdates == null ? void 0 : ExpoUpdates.localAssets) != null ? _ExpoUpdates$localAss : {};
}
function getManifest2() {
  return _expoConstants.default.__unsafeNoWarnManifest2;
}
var manifestBaseUrl = exports.manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwb0NvbnN0YW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2V4cG9Nb2R1bGVzQ29yZSIsIl9Bc3NldFVyaXMiLCJFeHBvVXBkYXRlcyIsInJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZSIsIk5hdGl2ZUV4cG9Hb01vZHVsZSIsInJlcXVpcmVOYXRpdmVNb2R1bGUiLCJfdW51c2VkIiwiaXNSdW5uaW5nSW5FeHBvR28iLCJleHBvVXBkYXRlc0lzSW5zdGFsbGVkQW5kRW5hYmxlZCIsImlzRW5hYmxlZCIsImV4cG9VcGRhdGVzSXNVc2luZ0VtYmVkZGVkQXNzZXRzIiwiaXNVc2luZ0VtYmVkZGVkQXNzZXRzIiwic2hvdWxkVXNlVXBkYXRlc0Fzc2V0UmVzb2x1dGlvbiIsIklTX0VOVl9XSVRIX0xPQ0FMX0FTU0VUUyIsImV4cG9ydHMiLCJnZXRMb2NhbEFzc2V0cyIsIl9FeHBvVXBkYXRlcyRsb2NhbEFzcyIsImxvY2FsQXNzZXRzIiwiZ2V0TWFuaWZlc3QyIiwiQ29uc3RhbnRzIiwiX191bnNhZmVOb1dhcm5NYW5pZmVzdDIiLCJtYW5pZmVzdEJhc2VVcmwiLCJleHBlcmllbmNlVXJsIiwiZ2V0TWFuaWZlc3RCYXNlVXJsIl0sInNvdXJjZXMiOlsiLi4vc3JjL1BsYXRmb3JtVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnN0YW50cyBmcm9tICdleHBvLWNvbnN0YW50cyc7XG5pbXBvcnQgeyByZXF1aXJlTmF0aXZlTW9kdWxlLCByZXF1aXJlT3B0aW9uYWxOYXRpdmVNb2R1bGUgfSBmcm9tICdleHBvLW1vZHVsZXMtY29yZSc7XG4vLyBAdHMtaWdub3JlIC0tIG9wdGlvbmFsIGludGVyZmFjZSwgd2lsbCBncmFjZWZ1bGx5IGRlZ3JhZGUgdG8gYGFueWAgaWYgbm90IGluc3RhbGxlZFxuaW1wb3J0IHR5cGUgeyBFeHBvVXBkYXRlc01vZHVsZSB9IGZyb20gJ2V4cG8tdXBkYXRlcyc7XG5cbmltcG9ydCB7IGdldE1hbmlmZXN0QmFzZVVybCB9IGZyb20gJy4vQXNzZXRVcmlzJztcblxuY29uc3QgRXhwb1VwZGF0ZXMgPSByZXF1aXJlT3B0aW9uYWxOYXRpdmVNb2R1bGU8RXhwb1VwZGF0ZXNNb2R1bGU+KCdFeHBvVXBkYXRlcycpO1xuXG5jb25zdCBOYXRpdmVFeHBvR29Nb2R1bGUgPSAoKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlTmF0aXZlTW9kdWxlKCdFeHBvR28nKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIGlzUnVubmluZ0luRXhwb0dvKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gTmF0aXZlRXhwb0dvTW9kdWxlICE9IG51bGw7XG59XG5cbi8vIGV4cG8tdXBkYXRlcyAoYW5kIEV4cG8gR28gZXhwby11cGRhdGVzIG92ZXJyaWRlKSBtYW5hZ2VzIGFzc2V0cyBmcm9tIHVwZGF0ZXMgYW5kIGV4cG9zZXNcbi8vIHRoZSBFeHBvVXBkYXRlcy5sb2NhbEFzc2V0cyBjb25zdGFudCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhc3NldHMuXG5jb25zdCBleHBvVXBkYXRlc0lzSW5zdGFsbGVkQW5kRW5hYmxlZCA9ICEhRXhwb1VwZGF0ZXM/LmlzRW5hYmxlZDtcbmNvbnN0IGV4cG9VcGRhdGVzSXNVc2luZ0VtYmVkZGVkQXNzZXRzID0gRXhwb1VwZGF0ZXM/LmlzVXNpbmdFbWJlZGRlZEFzc2V0cztcblxuLy8gaWYgZXhwby11cGRhdGVzIGlzIGluc3RhbGxlZCBidXQgd2UncmUgcnVubmluZyBkaXJlY3RseSBmcm9tIHRoZSBlbWJlZGRlZCBidW5kbGUsIHdlIGRvbid0IHdhbnRcbi8vIHRvIG92ZXJyaWRlIHRoZSBBc3NldFNvdXJjZVJlc29sdmVyLlxuY29uc3Qgc2hvdWxkVXNlVXBkYXRlc0Fzc2V0UmVzb2x1dGlvbiA9XG4gIGV4cG9VcGRhdGVzSXNJbnN0YWxsZWRBbmRFbmFibGVkICYmICFleHBvVXBkYXRlc0lzVXNpbmdFbWJlZGRlZEFzc2V0cztcblxuLy8gRXhwbyBHbyBhbHdheXMgdXNlcyB0aGUgdXBkYXRlcyBtb2R1bGUgZm9yIGFzc2V0IHJlc29sdXRpb24gKGxvY2FsIGFzc2V0cykgc2luY2UgaXRcbi8vIG92ZXJyaWRlcyB0aGUgZXhwby11cGRhdGVzIG1vZHVsZS5cbmV4cG9ydCBjb25zdCBJU19FTlZfV0lUSF9MT0NBTF9BU1NFVFMgPSBpc1J1bm5pbmdJbkV4cG9HbygpIHx8IHNob3VsZFVzZVVwZGF0ZXNBc3NldFJlc29sdXRpb247XG5cbi8vIEdldCB0aGUgbG9jYWxBc3NldHMgcHJvcGVydHkgZnJvbSB0aGUgRXhwb1VwZGF0ZXMgbmF0aXZlIG1vZHVsZSBzbyB0aGF0IHdlIGRvXG4vLyBub3QgbmVlZCB0byBpbmNsdWRlIGV4cG8tdXBkYXRlcyBhcyBhIGRlcGVuZGVuY3kgb2YgZXhwby1hc3NldFxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsQXNzZXRzKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICByZXR1cm4gRXhwb1VwZGF0ZXM/LmxvY2FsQXNzZXRzID8/IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFuaWZlc3QyKCk6IHR5cGVvZiBDb25zdGFudHMuX191bnNhZmVOb1dhcm5NYW5pZmVzdDIge1xuICByZXR1cm4gQ29uc3RhbnRzLl9fdW5zYWZlTm9XYXJuTWFuaWZlc3QyO1xufVxuXG4vLyBDb21wdXRlIG1hbmlmZXN0IGJhc2UgVVJMIGlmIGF2YWlsYWJsZVxuZXhwb3J0IGNvbnN0IG1hbmlmZXN0QmFzZVVybCA9IENvbnN0YW50cy5leHBlcmllbmNlVXJsXG4gID8gZ2V0TWFuaWZlc3RCYXNlVXJsKENvbnN0YW50cy5leHBlcmllbmNlVXJsKVxuICA6IG51bGw7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUQsT0FBQTtBQUlBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUVBLElBQU1HLFdBQVcsR0FBRyxJQUFBQyw0Q0FBMkIsRUFBb0IsYUFBYSxDQUFDO0FBRWpGLElBQU1DLGtCQUFrQixHQUFJLFlBQUs7RUFDL0IsSUFBSTtJQUNGLE9BQU8sSUFBQUMsb0NBQW1CLEVBQUMsUUFBUSxDQUFDO0VBQ3RDLENBQUMsQ0FBQyxPQUFBQyxPQUFBLEVBQU07SUFDTixPQUFPLElBQUk7RUFDYjtBQUNGLENBQUMsQ0FBQyxDQUFFO0FBRUosU0FBU0MsaUJBQWlCQSxDQUFBO0VBQ3hCLE9BQU9ILGtCQUFrQixJQUFJLElBQUk7QUFDbkM7QUFJQSxJQUFNSSxnQ0FBZ0MsR0FBRyxDQUFDLEVBQUNOLFdBQVcsWUFBWEEsV0FBVyxDQUFFTyxTQUFTO0FBQ2pFLElBQU1DLGdDQUFnQyxHQUFHUixXQUFXLG9CQUFYQSxXQUFXLENBQUVTLHFCQUFxQjtBQUkzRSxJQUFNQywrQkFBK0IsR0FDbkNKLGdDQUFnQyxJQUFJLENBQUNFLGdDQUFnQztBQUloRSxJQUFNRyx3QkFBd0IsR0FBQUMsT0FBQSxDQUFBRCx3QkFBQSxHQUFHTixpQkFBaUIsRUFBRSxJQUFJSywrQkFBK0I7QUFJeEYsU0FBVUcsY0FBY0EsQ0FBQTtFQUFBLElBQUFDLHFCQUFBO0VBQzVCLFFBQUFBLHFCQUFBLEdBQU9kLFdBQVcsb0JBQVhBLFdBQVcsQ0FBRWUsV0FBVyxZQUFBRCxxQkFBQSxHQUFJLEVBQUU7QUFDdkM7QUFFTSxTQUFVRSxZQUFZQSxDQUFBO0VBQzFCLE9BQU9DLHNCQUFTLENBQUNDLHVCQUF1QjtBQUMxQztBQUdPLElBQU1DLGVBQWUsR0FBQVAsT0FBQSxDQUFBTyxlQUFBLEdBQUdGLHNCQUFTLENBQUNHLGFBQWEsR0FDbEQsSUFBQUMsNkJBQWtCLEVBQUNKLHNCQUFTLENBQUNHLGFBQWEsQ0FBQyxHQUMzQyxJQUFJIiwiaWdub3JlTGlzdCI6W119