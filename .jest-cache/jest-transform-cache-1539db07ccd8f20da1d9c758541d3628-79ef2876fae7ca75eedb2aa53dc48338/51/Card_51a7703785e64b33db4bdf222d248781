55b5c1358624241f342aa2fd15eec417
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["elevation", "delayLongPress", "onPress", "onLongPress", "onPressOut", "onPressIn", "mode", "children", "style", "contentStyle", "theme", "testID", "accessible", "disabled"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _CardActions = _interopRequireDefault(require("./CardActions"));
var _CardContent = _interopRequireDefault(require("./CardContent"));
var _CardCover = _interopRequireDefault(require("./CardCover"));
var _CardTitle = _interopRequireDefault(require("./CardTitle"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _hasTouchHandler = _interopRequireDefault(require("../../utils/hasTouchHandler"));
var _splitStyles = require("../../utils/splitStyles");
var _Surface = _interopRequireDefault(require("../Surface"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var Card = function Card(_ref, ref) {
  var _ref$elevation = _ref.elevation,
    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,
    delayLongPress = _ref.delayLongPress,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    onPressOut = _ref.onPressOut,
    onPressIn = _ref.onPressIn,
    _ref$mode = _ref.mode,
    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,
    children = _ref.children,
    style = _ref.style,
    contentStyle = _ref.contentStyle,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'card' : _ref$testID,
    accessible = _ref.accessible,
    disabled = _ref.disabled,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isMode = React.useCallback(function (modeToCompare) {
    return cardMode === modeToCompare;
  }, [cardMode]);
  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut
  });
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),
    elevation = _React$useRef.current;
  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(cardElevation)),
    elevationDarkAdaptive = _React$useRef2.current;
  var animation = theme.animation,
    dark = theme.dark,
    mode = theme.mode,
    roundness = theme.roundness,
    isV3 = theme.isV3;
  var prevDarkRef = React.useRef(dark);
  React.useEffect(function () {
    prevDarkRef.current = dark;
  });
  var prevDark = prevDarkRef.current;
  var isAdaptiveMode = mode === 'adaptive';
  var animationDuration = 150 * animation.scale;
  React.useEffect(function () {
    if (dark && isAdaptiveMode && !prevDark) {
      elevation.setValue(cardElevation);
      elevationDarkAdaptive.setValue(cardElevation);
    }
  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);
  var runElevationAnimation = function runElevationAnimation(pressType) {
    if (isV3 && isMode('contained')) {
      return;
    }
    var isPressTypeIn = pressType === 'in';
    if (dark && isAdaptiveMode) {
      _reactNative.Animated.timing(elevationDarkAdaptive, {
        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
        duration: animationDuration,
        useNativeDriver: false
      }).start();
    } else {
      _reactNative.Animated.timing(elevation, {
        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
        duration: animationDuration,
        useNativeDriver: false
      }).start();
    }
  };
  var handlePressIn = (0, _useLatestCallback.default)(function (e) {
    onPressIn === null || onPressIn === void 0 || onPressIn(e);
    runElevationAnimation('in');
  });
  var handlePressOut = (0, _useLatestCallback.default)(function (e) {
    onPressOut === null || onPressOut === void 0 || onPressOut(e);
    runElevationAnimation('out');
  });
  var total = React.Children.count(children);
  var siblings = React.Children.map(children, function (child) {
    return React.isValidElement(child) && child.type ? child.type.displayName : null;
  });
  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;
  var _ref2 = (0, _utils.getCardColors)({
      theme: theme,
      mode: cardMode
    }),
    backgroundColor = _ref2.backgroundColor,
    themedBorderColor = _ref2.borderColor;
  var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
  var _flattenedStyles$bord = flattenedStyles.borderColor,
    borderColor = _flattenedStyles$bord === void 0 ? themedBorderColor : _flattenedStyles$bord;
  var _ref3 = (0, _splitStyles.splitStyles)(flattenedStyles, function (style) {
      return style.startsWith('border') && style.endsWith('Radius');
    }),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    borderRadiusStyles = _ref4[1];
  var borderRadiusCombinedStyles = Object.assign({
    borderRadius: (isV3 ? 3 : 1) * roundness
  }, borderRadiusStyles);
  var content = React.createElement(_reactNative.View, {
    style: [styles.innerContainer, contentStyle],
    testID: testID
  }, React.Children.map(children, function (child, index) {
    return React.isValidElement(child) ? React.cloneElement(child, {
      index: index,
      total: total,
      siblings: siblings,
      borderRadiusStyles: borderRadiusStyles
    }) : child;
  }));
  return React.createElement(_Surface.default, _extends({
    ref: ref,
    style: [isV3 && !isMode('elevated') && {
      backgroundColor: backgroundColor
    }, !isV3 && (isMode('outlined') ? styles.resetElevation : {
      elevation: computedElevation
    }), borderRadiusCombinedStyles, style],
    theme: theme
  }, isV3 && {
    elevation: isMode('elevated') ? computedElevation : 0
  }, {
    testID: `${testID}-container`,
    container: true
  }, rest), isMode('outlined') && React.createElement(_reactNative.View, {
    pointerEvents: "none",
    testID: `${testID}-outline`,
    style: [{
      borderColor: borderColor
    }, styles.outline, borderRadiusCombinedStyles]
  }), hasPassedTouchHandler ? React.createElement(_reactNative.Pressable, {
    accessible: accessible,
    unstable_pressDelay: 0,
    disabled: disabled,
    delayLongPress: delayLongPress,
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut
  }, content) : content);
};
Card.displayName = 'Card';
var Component = (0, _forwardRef.forwardRef)(Card);
var CardComponent = Component;
CardComponent.Content = _CardContent.default;
CardComponent.Actions = _CardActions.default;
CardComponent.Cover = _CardCover.default;
CardComponent.Title = _CardTitle.default;
var styles = _reactNative.StyleSheet.create({
  innerContainer: {
    flexShrink: 1
  },
  outline: {
    borderWidth: 1,
    position: 'absolute',
    width: '100%',
    height: '100%',
    zIndex: 2
  },
  resetElevation: {
    elevation: 0
  }
});
var _default = exports.default = CardComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,