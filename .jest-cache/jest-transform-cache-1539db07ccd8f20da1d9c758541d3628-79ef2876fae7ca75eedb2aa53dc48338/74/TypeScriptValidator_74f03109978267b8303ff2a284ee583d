dfb28144bc4cfab75f9e438c4e30e535
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeScriptValidator = exports.TypeScriptValidatorImpl = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _child_process = require("child_process");
var _path = require("path");
var TypeScriptValidatorImpl = exports.TypeScriptValidatorImpl = function () {
  function TypeScriptValidatorImpl() {
    var projectRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
    (0, _classCallCheck2.default)(this, TypeScriptValidatorImpl);
    this.projectRoot = (0, _path.resolve)(projectRoot);
    this.configPath = (0, _path.join)(this.projectRoot, 'tsconfig.json');
  }
  return (0, _createClass2.default)(TypeScriptValidatorImpl, [{
    key: "validateCompilation",
    value: function () {
      var _validateCompilation = (0, _asyncToGenerator2.default)(function* () {
        var startTime = Date.now();
        var errors = [];
        var warnings = [];
        try {
          var result = yield this.runTypeScriptCompiler(['--noEmit']);
          if (result.exitCode !== 0 && result.stderr) {
            var parsedErrors = this.parseTypeScriptOutput(result.stderr);
            errors.push.apply(errors, (0, _toConsumableArray2.default)(parsedErrors.filter(function (e) {
              return e.severity === 'error';
            })));
            warnings.push.apply(warnings, (0, _toConsumableArray2.default)(parsedErrors.filter(function (e) {
              return e.severity === 'warning';
            })));
          }
          var filesValidated = yield this.countTypeScriptFiles();
          var statistics = {
            filesValidated: filesValidated,
            errorCount: errors.length,
            warningCount: warnings.length,
            duration: Date.now() - startTime
          };
          return {
            success: errors.length === 0,
            errors: errors,
            warnings: warnings,
            statistics: statistics
          };
        } catch (error) {
          var validationError = {
            file: 'validation-process',
            line: 0,
            column: 0,
            message: `TypeScript validation failed: ${error}`,
            code: 'TS0000',
            severity: 'error'
          };
          return {
            success: false,
            errors: [validationError],
            warnings: [],
            statistics: {
              filesValidated: 0,
              errorCount: 1,
              warningCount: 0,
              duration: Date.now() - startTime
            }
          };
        }
      });
      function validateCompilation() {
        return _validateCompilation.apply(this, arguments);
      }
      return validateCompilation;
    }()
  }, {
    key: "validateFiles",
    value: function () {
      var _validateFiles = (0, _asyncToGenerator2.default)(function* (filePaths) {
        var startTime = Date.now();
        var errors = [];
        var warnings = [];
        try {
          var args = ['--noEmit'].concat((0, _toConsumableArray2.default)(filePaths));
          var result = yield this.runTypeScriptCompiler(args);
          if (result.exitCode !== 0 && result.stderr) {
            var parsedErrors = this.parseTypeScriptOutput(result.stderr);
            errors.push.apply(errors, (0, _toConsumableArray2.default)(parsedErrors.filter(function (e) {
              return e.severity === 'error';
            })));
            warnings.push.apply(warnings, (0, _toConsumableArray2.default)(parsedErrors.filter(function (e) {
              return e.severity === 'warning';
            })));
          }
          var statistics = {
            filesValidated: filePaths.length,
            errorCount: errors.length,
            warningCount: warnings.length,
            duration: Date.now() - startTime
          };
          return {
            success: errors.length === 0,
            errors: errors,
            warnings: warnings,
            statistics: statistics
          };
        } catch (error) {
          var validationError = {
            file: 'file-validation-process',
            line: 0,
            column: 0,
            message: `File validation failed: ${error}`,
            code: 'TS0000',
            severity: 'error'
          };
          return {
            success: false,
            errors: [validationError],
            warnings: [],
            statistics: {
              filesValidated: filePaths.length,
              errorCount: 1,
              warningCount: 0,
              duration: Date.now() - startTime
            }
          };
        }
      });
      function validateFiles(_x) {
        return _validateFiles.apply(this, arguments);
      }
      return validateFiles;
    }()
  }, {
    key: "getConfiguration",
    value: function getConfiguration() {
      try {
        var configContent = require(this.configPath);
        return this.buildConfiguration(configContent);
      } catch (_unused) {
        return this.getDefaultConfiguration();
      }
    }
  }, {
    key: "buildConfiguration",
    value: function buildConfiguration(configContent) {
      var _ref, _ref2, _ref3, _ref4, _ref5, _ref6;
      var compilerOptions = configContent.compilerOptions || {};
      return {
        compilerOptions: Object.assign({
          strict: (_ref = compilerOptions.strict) != null ? _ref : false,
          noImplicitAny: (_ref2 = compilerOptions.noImplicitAny) != null ? _ref2 : false,
          noImplicitReturns: (_ref3 = compilerOptions.noImplicitReturns) != null ? _ref3 : false,
          skipLibCheck: (_ref4 = compilerOptions.skipLibCheck) != null ? _ref4 : true
        }, compilerOptions),
        include: (_ref5 = configContent.include) != null ? _ref5 : [],
        exclude: (_ref6 = configContent.exclude) != null ? _ref6 : []
      };
    }
  }, {
    key: "getDefaultConfiguration",
    value: function getDefaultConfiguration() {
      return {
        compilerOptions: {
          strict: false,
          noImplicitAny: false,
          noImplicitReturns: false,
          skipLibCheck: true
        },
        include: [],
        exclude: []
      };
    }
  }, {
    key: "validateConfiguration",
    value: function () {
      var _validateConfiguration = (0, _asyncToGenerator2.default)(function* () {
        var config = this.getConfiguration();
        var violations = [];
        var recommendations = [];
        if (!config.compilerOptions.strict) {
          violations.push({
            property: 'compilerOptions.strict',
            currentValue: config.compilerOptions.strict,
            requiredValue: true,
            reason: 'Constitutional requirement: TypeScript strict mode must be enabled'
          });
        }
        if (!config.compilerOptions.noImplicitAny) {
          violations.push({
            property: 'compilerOptions.noImplicitAny',
            currentValue: config.compilerOptions.noImplicitAny,
            requiredValue: true,
            reason: 'Constitutional requirement: No implicit any types allowed'
          });
        }
        if (!config.compilerOptions.noImplicitReturns) {
          violations.push({
            property: 'compilerOptions.noImplicitReturns',
            currentValue: config.compilerOptions.noImplicitReturns,
            requiredValue: true,
            reason: 'Constitutional requirement: All code paths must return values'
          });
        }
        if (config.compilerOptions.skipLibCheck) {
          recommendations.push('Consider setting skipLibCheck to false for thorough type checking');
        }
        if (!config.include.length) {
          recommendations.push('Specify include patterns to explicitly define files to compile');
        }
        return {
          compliant: violations.length === 0,
          violations: violations,
          recommendations: recommendations
        };
      });
      function validateConfiguration() {
        return _validateConfiguration.apply(this, arguments);
      }
      return validateConfiguration;
    }()
  }, {
    key: "runTypeScriptCompiler",
    value: function () {
      var _runTypeScriptCompiler = (0, _asyncToGenerator2.default)(function* (args) {
        var _this = this;
        return new Promise(function (resolve, reject) {
          var _process$stdout, _process$stderr;
          var options = {
            cwd: _this.projectRoot,
            stdio: ['pipe', 'pipe', 'pipe']
          };
          var tscCommand = 'npx';
          var tscArgs = ['tsc'].concat((0, _toConsumableArray2.default)(args));
          var process = (0, _child_process.spawn)(tscCommand, tscArgs, options);
          var stdout = '';
          var stderr = '';
          (_process$stdout = process.stdout) == null || _process$stdout.on('data', function (data) {
            stdout += data.toString();
          });
          (_process$stderr = process.stderr) == null || _process$stderr.on('data', function (data) {
            stderr += data.toString();
          });
          process.on('close', function (exitCode) {
            resolve({
              exitCode: exitCode != null ? exitCode : 1,
              stdout: stdout,
              stderr: stderr
            });
          });
          process.on('error', function (error) {
            reject(new Error(`Failed to run TypeScript compiler: ${error.message}`));
          });
          setTimeout(function () {
            process.kill();
            reject(new Error('TypeScript compilation timed out after 30 seconds'));
          }, 30000);
        });
      });
      function runTypeScriptCompiler(_x2) {
        return _runTypeScriptCompiler.apply(this, arguments);
      }
      return runTypeScriptCompiler;
    }()
  }, {
    key: "parseTypeScriptOutput",
    value: function parseTypeScriptOutput(output) {
      var errors = [];
      var lines = output.split('\n');
      for (var line of lines) {
        var match = line.match(/^(.+?)\((\d+),(\d+)\):\s+(error|warning)\s+TS(\d+):\s+(.+)$/);
        if (match) {
          var _match = (0, _slicedToArray2.default)(match, 7),
            file = _match[1],
            lineStr = _match[2],
            columnStr = _match[3],
            severity = _match[4],
            code = _match[5],
            message = _match[6];
          var error = {
            file: file.trim(),
            line: parseInt(lineStr, 10),
            column: parseInt(columnStr, 10),
            message: message.trim(),
            code: `TS${code}`,
            severity: severity
          };
          if (severity === 'warning') {
            error.ignorable = this.isIgnorableWarning(code);
          }
          errors.push(error);
        }
      }
      return errors;
    }
  }, {
    key: "isIgnorableWarning",
    value: function isIgnorableWarning(code) {
      var ignorableWarnings = ['7028', '6133'];
      return ignorableWarnings.includes(code);
    }
  }, {
    key: "countTypeScriptFiles",
    value: function () {
      var _countTypeScriptFiles = (0, _asyncToGenerator2.default)(function* () {
        try {
          var result = yield this.runCommand('find', ['.', '-name', '*.ts', '-o', '-name', '*.tsx']);
          return result.stdout.split('\n').filter(function (line) {
            return line.trim();
          }).length;
        } catch (_unused2) {
          return 0;
        }
      });
      function countTypeScriptFiles() {
        return _countTypeScriptFiles.apply(this, arguments);
      }
      return countTypeScriptFiles;
    }()
  }, {
    key: "runCommand",
    value: function () {
      var _runCommand = (0, _asyncToGenerator2.default)(function* (command, args) {
        var _this2 = this;
        return new Promise(function (resolve, reject) {
          var _process$stdout2, _process$stderr2;
          var process = (0, _child_process.spawn)(command, args, {
            cwd: _this2.projectRoot,
            stdio: ['pipe', 'pipe', 'pipe']
          });
          var stdout = '';
          var stderr = '';
          (_process$stdout2 = process.stdout) == null || _process$stdout2.on('data', function (data) {
            stdout += data.toString();
          });
          (_process$stderr2 = process.stderr) == null || _process$stderr2.on('data', function (data) {
            stderr += data.toString();
          });
          process.on('close', function (exitCode) {
            if (exitCode === 0) {
              resolve({
                stdout: stdout,
                stderr: stderr
              });
            } else {
              reject(new Error(`Command failed with exit code ${exitCode}: ${stderr}`));
            }
          });
          process.on('error', reject);
        });
      });
      function runCommand(_x3, _x4) {
        return _runCommand.apply(this, arguments);
      }
      return runCommand;
    }()
  }]);
}();
var typeScriptValidator = exports.typeScriptValidator = new TypeScriptValidatorImpl();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,