{"version":3,"names":["_SupabaseClient","require","_store","_SYNC_RETRY_DELAY","_SYNC_TIMEOUT","_NETWORK_CHECK_INTERVAL","configureSyncEngine","loadInitialData","setupRealtimeSubscription","_loadInitialData","apply","arguments","_asyncToGenerator2","default","user","supabaseClient","getCurrentUser","_yield$select$eq2","getSupabaseClient","from","select","eq","id","data","error","exercises$","set","console","subscription","startSubscription","_ref","channel","on","event","schema","table","filter","payload","currentExercises","get","eventType","newExercise","new","user_id","push","deletedExercise","old","indexToDelete","findIndex","ex","splice","updatedExercise","indexToUpdate","subscribe","onAuthStateChange","session","user$","unsubscribe","syncExerciseToSupabase","_x","_syncExerciseToSupabase","exercise","Error","exerciseToUpsert","name","created_at","_yield$upsert","upsert","deleteExerciseFromSupabase","_x2","_x3","_deleteExerciseFromSupabase","exerciseId","userId","_yield$delete$eq$eq","delete","syncHelpers","exports","forceSync","_forceSync","_yield$select$eq","isSyncing","isOnline","navigator","onLine","getPendingChangesCount","hasErrors","getErrorMessage","undefined"],"sources":["syncConfig.ts"],"sourcesContent":["import { supabaseClient } from '../supabase/SupabaseClient';\nimport { exercises$, user$ } from '../store';\nimport { Exercise } from '../../models/Exercise';\nimport { ExerciseInsert } from '../../models/supabase';\n\n// Sync configuration constants\nconst _SYNC_RETRY_DELAY = 1000; // 1 second\nconst _SYNC_TIMEOUT = 30000; // 30 seconds\nconst _NETWORK_CHECK_INTERVAL = 5000; // 5 seconds\n\n/**\n * Configuration for Legend State sync with Supabase\n * Provides offline-first data synchronization with automatic conflict resolution\n */\nexport function configureSyncEngine() {\n\t// Initialize with data loading and real-time subscription\n\tloadInitialData();\n\tsetupRealtimeSubscription();\n}\n\n/**\n * Load initial exercises data from Supabase\n */\nasync function loadInitialData() {\n\ttry {\n\t\tconst user = await supabaseClient.getCurrentUser();\n\t\tif (!user) return;\n\n\t\tconst { data, error } = await (supabaseClient.getSupabaseClient().from('exercises') as any)\n\t\t\t.select('*')\n\t\t\t.eq('user_id', user.id);\n\n\t\tif (error) throw error;\n\t\texercises$.set(data || []);\n\t} catch (error) {\n\t\tconsole.error('Failed to load initial exercises:', error);\n\t}\n}\n\n/**\n * Set up real-time subscription for exercises\n */\nfunction setupRealtimeSubscription() {\n\tlet subscription: any = null;\n\n\tconst startSubscription = async () => {\n\t\ttry {\n\t\t\tconst user = await supabaseClient.getCurrentUser();\n\t\t\tif (!user) return;\n\n\t\t\tsubscription = supabaseClient.getSupabaseClient()\n\t\t\t\t.channel('exercises')\n\t\t\t\t.on('postgres_changes', {\n\t\t\t\t\tevent: '*',\n\t\t\t\t\tschema: 'public',\n\t\t\t\t\ttable: 'exercises',\n\t\t\t\t\tfilter: `user_id=eq.${user.id}`\n\t\t\t\t}, (payload) => {\n\t\t\t\t\tconst currentExercises = exercises$.get();\n\n\t\t\t\t\tif (payload.eventType === 'INSERT') {\n\t\t\t\t\t\tconst newExercise = payload.new as Exercise;\n\t\t\t\t\t\tif (newExercise.user_id === user.id) {\n\t\t\t\t\t\t\texercises$.push(newExercise);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (payload.eventType === 'DELETE') {\n\t\t\t\t\t\tconst deletedExercise = payload.old as Exercise;\n\t\t\t\t\t\tconst indexToDelete = currentExercises.findIndex(ex => ex.id === deletedExercise.id);\n\t\t\t\t\t\tif (indexToDelete !== -1) {\n\t\t\t\t\t\t\texercises$.splice(indexToDelete, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (payload.eventType === 'UPDATE') {\n\t\t\t\t\t\tconst updatedExercise = payload.new as Exercise;\n\t\t\t\t\t\tif (updatedExercise.user_id === user.id) {\n\t\t\t\t\t\t\tconst indexToUpdate = currentExercises.findIndex(ex => ex.id === updatedExercise.id);\n\t\t\t\t\t\t\tif (indexToUpdate !== -1) {\n\t\t\t\t\t\t\t\texercises$[indexToUpdate].set(updatedExercise);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.subscribe();\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to set up real-time subscription:', error);\n\t\t}\n\t};\n\n\t// Set up auth state listener to restart subscription when user changes\n\tsupabaseClient.onAuthStateChange((event, session) => {\n\t\tuser$.set(session?.user || null);\n\n\t\t// Restart subscription when user changes\n\t\tif (subscription) {\n\t\t\tsubscription.unsubscribe();\n\t\t\tsubscription = null;\n\t\t}\n\n\t\tif (session?.user) {\n\t\t\tstartSubscription();\n\t\t\tloadInitialData();\n\t\t} else {\n\t\t\texercises$.set([]);\n\t\t}\n\t});\n}\n\n/**\n * Sync an exercise to Supabase\n */\nexport async function syncExerciseToSupabase(exercise: Exercise): Promise<void> {\n\ttry {\n\t\tconst user = await supabaseClient.getCurrentUser();\n\t\tif (!user) throw new Error('User not authenticated');\n\n\t\tconst exerciseToUpsert: ExerciseInsert = {\n\t\t\tid: exercise.id,\n\t\t\tname: exercise.name,\n\t\t\tuser_id: exercise.user_id,\n\t\t\tcreated_at: exercise.created_at,\n\t\t};\n\n\t\tconst { error } = await (supabaseClient.getSupabaseClient().from('exercises') as any)\n\t\t\t.upsert(exerciseToUpsert);\n\t\tif (error) throw error;\n\t} catch (error) {\n\t\tconsole.error('Failed to sync exercise to Supabase:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n * Delete an exercise from Supabase\n */\nexport async function deleteExerciseFromSupabase(exerciseId: string, userId: string): Promise<void> {\n\ttry {\n\t\tconst { error } = await (supabaseClient.getSupabaseClient().from('exercises') as any)\n\t\t\t.delete()\n\t\t\t.eq('id', exerciseId)\n\t\t\t.eq('user_id', userId);\n\n\t\tif (error) throw error;\n\t} catch (error) {\n\t\tconsole.error('Failed to delete exercise from Supabase:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n * Helper functions for sync management\n */\nexport const syncHelpers = {\n\t/**\n\t * Force a manual sync of exercises\n\t */\n\tasync forceSync(): Promise<void> {\n\t\ttry {\n\t\t\t// Trigger a manual sync\n\t\t\tconst user = await supabaseClient.getCurrentUser();\n\t\t\tif (!user) return;\n\n\t\t\tconst { data, error } = await (supabaseClient.getSupabaseClient().from('exercises') as any)\n\t\t\t\t.select('*')\n\t\t\t\t.eq('user_id', user.id);\n\n\t\t\tif (!error && data) {\n\t\t\t\texercises$.set(data);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to force sync:', error);\n\t\t}\n\t},\n\n\t/**\n\t * Check if we're currently syncing (simplified for now)\n\t */\n\tisSyncing(): boolean {\n\t\t// This would be enhanced with actual sync state tracking\n\t\treturn false;\n\t},\n\n\t/**\n\t * Check online status using browser navigator API\n\t */\n\tisOnline(): boolean {\n\t\t// Use browser's navigator.onLine for basic network detection\n\t\t// In React Native, this would use @react-native-community/netinfo\n\t\tif (typeof navigator !== 'undefined' && 'onLine' in navigator) {\n\t\t\treturn navigator.onLine;\n\t\t}\n\t\t// Fallback to true for environments without navigator\n\t\treturn true;\n\t},\n\n\t/**\n\t * Get pending changes count (simplified)\n\t */\n\tgetPendingChangesCount(): number {\n\t\t// This would track actual pending changes\n\t\treturn 0;\n\t},\n\n\t/**\n\t * Check if there are sync errors (simplified)\n\t */\n\thasErrors(): boolean {\n\t\treturn false;\n\t},\n\n\t/**\n\t * Get current sync error message (simplified)\n\t */\n\tgetErrorMessage(): string | undefined {\n\t\treturn undefined;\n\t},\n};\n"],"mappings":"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","ignoreList":[]}