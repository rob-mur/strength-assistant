{"version":3,"names":["_expoModulesCore","require","_reactNative","_Constants","_ExponentConstants","_interopRequireDefault","_ref","ExponentConstants","console","warn","ExpoUpdates","requireOptionalNativeModule","rawUpdatesManifest","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","rawDevLauncherManifest","NativeModules","EXDevLauncher","devLauncherManifest","rawAppConfig","appConfig","rawManifest","_ref2","name","appOwnership","nativeConstants","_objectWithoutProperties2","default","constants","assign","defineProperties","__unsafeNoWarnManifest","get","maybeManifest","getManifest","isEmbeddedManifest","enumerable","__unsafeNoWarnManifest2","isExpoUpdatesManifest","manifest2","expoConfig","isEmbeddedLaunch","_maybeManifest$extra$","_maybeManifest$extra","extra","expoClient","expoGoConfig","_maybeManifest$extra$2","_maybeManifest$extra2","expoGo","easConfig","_maybeManifest$extra$3","_maybeManifest$extra3","eas","__rawManifest_TEST","set","value","suppressWarning","arguments","undefined","invalidManifestType","executionEnvironment","ExecutionEnvironment","Bare","Platform","OS","StoreClient","Standalone","CodedError","_default","exports"],"sources":["../src/Constants.ts"],"sourcesContent":["import type { ExpoConfig } from 'expo/config';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as DevLauncherManifest } from 'expo-dev-launcher';\nimport type {\n  EmbeddedManifest,\n  EASConfig,\n  ExpoGoConfig,\n  ExpoUpdatesManifest,\n  // @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\n} from 'expo-manifests';\nimport { CodedError, requireOptionalNativeModule } from 'expo-modules-core';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as UpdatesManifest, ExpoUpdatesModule } from 'expo-updates';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nconst ExpoUpdates = requireOptionalNativeModule<ExpoUpdatesModule>('ExpoUpdates');\n\nlet rawUpdatesManifest: UpdatesManifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (ExpoUpdates) {\n  let updatesManifest: object | undefined;\n  if (ExpoUpdates.manifest) {\n    updatesManifest = ExpoUpdates.manifest;\n  } else if (ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawUpdatesManifest = updatesManifest as any;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nlet rawDevLauncherManifest: DevLauncherManifest | null = null;\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawDevLauncherManifest = devLauncherManifest as any;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nlet rawAppConfig: ExpoConfig | null = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  const appConfig: object | string = ExponentConstants.manifest;\n\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof appConfig === 'string') {\n    rawAppConfig = JSON.parse(appConfig);\n  } else {\n    rawAppConfig = appConfig as any;\n  }\n}\n\ntype RawManifest = UpdatesManifest | DevLauncherManifest | ExpoConfig;\nlet rawManifest: RawManifest | null = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): EmbeddedManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): ExpoUpdatesManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): EmbeddedManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): ExpoUpdatesManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get():\n      | (ExpoConfig & {\n          /**\n           * Only present during development using @expo/cli.\n           */\n          hostUri?: string;\n        })\n      | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      // if running an embedded update, maybeManifest is a EmbeddedManifest which doesn't have\n      // the expo config. Instead, the embedded expo-constants app.config should be used.\n      if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {\n        return rawAppConfig;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  expoGoConfig: {\n    get(): ExpoGoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  easConfig: {\n    get(): EASConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): RawManifest | null {\n      return rawManifest;\n    },\n    set(value: RawManifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\nfunction isEmbeddedManifest(manifest: RawManifest): manifest is EmbeddedManifest {\n  return !isExpoUpdatesManifest(manifest);\n}\n\nfunction isExpoUpdatesManifest(manifest: RawManifest): manifest is ExpoUpdatesManifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): RawManifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"mappings":"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","ignoreList":[]}