8980de277145260698588af2355025c9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var PixelRatio = require('../Utilities/PixelRatio').default;
var Platform = require('../Utilities/Platform').default;
var _require = require('./AssetUtils'),
  pickScale = _require.pickScale;
var _require2 = require('@react-native/assets-registry/path-support'),
  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
  getBasePath = _require2.getBasePath;
var invariant = require('invariant');
function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawableFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawableFolder + '/' + fileName + '.' + asset.type;
}
function assetSupportsNetworkLoads(asset) {
  return !(asset.type === 'xml' && Platform.OS === 'android');
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  return (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      var _this$jsbundleUrl;
      return this.jsbundleUrl != null && ((_this$jsbundleUrl = this.jsbundleUrl) == null ? void 0 : _this$jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (this.asset.resolver != null) {
        return this.getAssetUsingResolver(this.asset.resolver);
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "getAssetUsingResolver",
    value: function getAssetUsingResolver(resolver) {
      switch (resolver) {
        case 'android':
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        case 'generic':
          return this.scaledAssetURLNearBundle();
        default:
          throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify(['android', 'generic'], null, '\t'));
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(this.serverUrl != null, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var _this$jsbundleUrl2;
      var path = (_this$jsbundleUrl2 = this.jsbundleUrl) != null ? _this$jsbundleUrl2 : 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var _this$jsbundleUrl3;
      var path = (_this$jsbundleUrl3 = this.jsbundleUrl) != null ? _this$jsbundleUrl3 : 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
}();
AssetSourceResolver.pickScale = pickScale;
var _default = exports.default = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiUGl4ZWxSYXRpbyIsIlBsYXRmb3JtIiwiX3JlcXVpcmUiLCJwaWNrU2NhbGUiLCJfcmVxdWlyZTIiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsImdldEJhc2VQYXRoIiwiaW52YXJpYW50IiwiZ2V0U2NhbGVkQXNzZXRQYXRoIiwiYXNzZXQiLCJzY2FsZSIsInNjYWxlcyIsImdldCIsInNjYWxlU3VmZml4IiwiYXNzZXREaXIiLCJuYW1lIiwidHlwZSIsImdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIiLCJkcmF3YWJsZUZvbGRlciIsImZpbGVOYW1lIiwiYXNzZXRTdXBwb3J0c05ldHdvcmtMb2FkcyIsIk9TIiwiQXNzZXRTb3VyY2VSZXNvbHZlciIsInNlcnZlclVybCIsImpzYnVuZGxlVXJsIiwia2V5IiwiaXNMb2FkZWRGcm9tU2VydmVyIiwiaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSIsIl90aGlzJGpzYnVuZGxlVXJsIiwic3RhcnRzV2l0aCIsImRlZmF1bHRBc3NldCIsImFzc2V0U2VydmVyVVJMIiwicmVzb2x2ZXIiLCJnZXRBc3NldFVzaW5nUmVzb2x2ZXIiLCJkcmF3YWJsZUZvbGRlckluQnVuZGxlIiwicmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlIiwic2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbVNvdXJjZSIsImhhc2giLCJzY2FsZWRBc3NldFBhdGgiLCJfdGhpcyRqc2J1bmRsZVVybDIiLCJwYXRoIiwicmVwbGFjZSIsIl90aGlzJGpzYnVuZGxlVXJsMyIsInNvdXJjZSIsIl9fcGFja2FnZXJfYXNzZXQiLCJ3aWR0aCIsImhlaWdodCIsInVyaSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQXNzZXRTb3VyY2VSZXNvbHZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHZlZEFzc2V0U291cmNlID0ge1xuICArX19wYWNrYWdlcl9hc3NldDogYm9vbGVhbixcbiAgK3dpZHRoOiA/bnVtYmVyLFxuICAraGVpZ2h0OiA/bnVtYmVyLFxuICArdXJpOiBzdHJpbmcsXG4gICtzY2FsZTogbnVtYmVyLFxufTtcblxuaW1wb3J0IHR5cGUge1xuICBBc3NldERlc3RQYXRoUmVzb2x2ZXIsXG4gIFBhY2thZ2VyQXNzZXQsXG59IGZyb20gJ0ByZWFjdC1uYXRpdmUvYXNzZXRzLXJlZ2lzdHJ5L3JlZ2lzdHJ5JztcblxuY29uc3QgUGl4ZWxSYXRpbyA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QaXhlbFJhdGlvJykuZGVmYXVsdDtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJykuZGVmYXVsdDtcbmNvbnN0IHtwaWNrU2NhbGV9ID0gcmVxdWlyZSgnLi9Bc3NldFV0aWxzJyk7XG5jb25zdCB7XG4gIGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUsXG4gIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIsXG4gIGdldEJhc2VQYXRoLFxufSA9IHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUvYXNzZXRzLXJlZ2lzdHJ5L3BhdGgtc3VwcG9ydCcpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlZEFzc2V0UGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gcGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IHNjYWxlU3VmZml4ID0gc2NhbGUgPT09IDEgPyAnJyA6ICdAJyArIHNjYWxlICsgJ3gnO1xuICBjb25zdCBhc3NldERpciA9IGdldEJhc2VQYXRoKGFzc2V0KTtcbiAgcmV0dXJuIGFzc2V0RGlyICsgJy8nICsgYXNzZXQubmFtZSArIHNjYWxlU3VmZml4ICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCBsaWtlICdkcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKGFzc2V0OiBQYWNrYWdlckFzc2V0KTogc3RyaW5nIHtcbiAgY29uc3Qgc2NhbGUgPSBwaWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3QgZHJhd2FibGVGb2xkZXIgPSBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKGFzc2V0LCBzY2FsZSk7XG4gIGNvbnN0IGZpbGVOYW1lID0gZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcihhc3NldCk7XG4gIHJldHVybiBkcmF3YWJsZUZvbGRlciArICcvJyArIGZpbGVOYW1lICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFzc2V0IGNhbiBiZSBsb2FkZWQgb3ZlciB0aGUgbmV0d29yay5cbiAqXG4gKiBUaGlzIHByZXZlbnRzIGFuIGlzc3VlIGxvYWRpbmcgWE1MIGFzc2V0cyBvbiBBbmRyb2lkLiBYTUwgYXNzZXQgdHlwZXMgbGlrZVxuICogdmVjdG9yIGRyYXdhYmxlcyBjYW4gb25seSBiZSBsb2FkZWQgZnJvbSBwcmVjb21waWxlZCBzb3VyY2UuIEFuZHJvaWQgZG9lc1xuICogbm90IHN1cHBvcnQgbG9hZGluZyB0aGVzZSBvdmVyIHRoZSBuZXR3b3JrLCBhbmQgQUFQVCBwcmVjb21waWxlcyBkYXRhIGJ5XG4gKiBicmVha2luZyBwYXRoIGRhdGEgYW5kIHJlc291cmNlIGluZm9ybWF0aW9uIGFwYXJ0IGludG8gbXVsdGlwbGUgZmlsZXMsXG4gKiBzdHVmZmluZyBpdCBhbGwgaW50byB0aGUgcmVzb3VyY2UgdGFibGUuIEFzIGEgcmVzdWx0LCB3ZSBzaG91bGQgb25seSBhdHRlbXB0XG4gKiB0byBsb2FkIHJlc291cmNlcyBhcyB3ZSB3b3VsZCBpbiByZWxlYXNlIGJ1aWxkczogYnkgdGhlIHJlc291cmNlIG5hbWUuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTpcbiAqIGh0dHBzOi8vaXNzdWV0cmFja2VyLmdvb2dsZS5jb20vaXNzdWVzLzYyNDM1MDY5XG4gKiBodHRwczovL2lzc3VldHJhY2tlci5nb29nbGUuY29tL2lzc3Vlcy82ODI5MzE4OVxuICovXG5mdW5jdGlvbiBhc3NldFN1cHBvcnRzTmV0d29ya0xvYWRzKGFzc2V0OiBQYWNrYWdlckFzc2V0KTogYm9vbGVhbiB7XG4gIHJldHVybiAhKGFzc2V0LnR5cGUgPT09ICd4bWwnICYmIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpO1xufVxuXG5jbGFzcyBBc3NldFNvdXJjZVJlc29sdmVyIHtcbiAgc2VydmVyVXJsOiA/c3RyaW5nO1xuICAvLyB3aGVyZSB0aGUganNidW5kbGUgaXMgYmVpbmcgcnVuIGZyb21cbiAganNidW5kbGVVcmw6ID9zdHJpbmc7XG4gIC8vIHRoZSBhc3NldCB0byByZXNvbHZlXG4gIGFzc2V0OiBQYWNrYWdlckFzc2V0O1xuXG4gIGNvbnN0cnVjdG9yKHNlcnZlclVybDogP3N0cmluZywganNidW5kbGVVcmw6ID9zdHJpbmcsIGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gICAgdGhpcy5zZXJ2ZXJVcmwgPSBzZXJ2ZXJVcmw7XG4gICAgdGhpcy5qc2J1bmRsZVVybCA9IGpzYnVuZGxlVXJsO1xuICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgfVxuXG4gIGlzTG9hZGVkRnJvbVNlcnZlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgIT0gbnVsbCAmJlxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgIT09ICcnICYmXG4gICAgICBhc3NldFN1cHBvcnRzTmV0d29ya0xvYWRzKHRoaXMuYXNzZXQpXG4gICAgKTtcbiAgfVxuXG4gIGlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuanNidW5kbGVVcmwgIT0gbnVsbCAmJiB0aGlzLmpzYnVuZGxlVXJsPy5zdGFydHNXaXRoKCdmaWxlOi8vJyk7XG4gIH1cblxuICBkZWZhdWx0QXNzZXQoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaWYgKHRoaXMuaXNMb2FkZWRGcm9tU2VydmVyKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmFzc2V0U2VydmVyVVJMKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXNzZXQucmVzb2x2ZXIgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXNzZXRVc2luZ1Jlc29sdmVyKHRoaXMuYXNzZXQucmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0xvYWRlZEZyb21GaWxlU3lzdGVtKClcbiAgICAgICAgPyB0aGlzLmRyYXdhYmxlRm9sZGVySW5CdW5kbGUoKVxuICAgICAgICA6IHRoaXMucmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldEFzc2V0VXNpbmdSZXNvbHZlcihyZXNvbHZlcjogQXNzZXREZXN0UGF0aFJlc29sdmVyKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgc3dpdGNoIChyZXNvbHZlcikge1xuICAgICAgY2FzZSAnYW5kcm9pZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKVxuICAgICAgICAgID8gdGhpcy5kcmF3YWJsZUZvbGRlckluQnVuZGxlKClcbiAgICAgICAgICA6IHRoaXMucmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk7XG4gICAgICBjYXNlICdnZW5lcmljJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJEb24ndCBrbm93IGhvdyB0byBnZXQgYXNzZXQgdmlhIHByb3ZpZGVkIHJlc29sdmVyOiBcIiArXG4gICAgICAgICAgICByZXNvbHZlciArXG4gICAgICAgICAgICAnXFxuQXNzZXQ6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5hc3NldCwgbnVsbCwgJ1xcdCcpICtcbiAgICAgICAgICAgICdcXG5Qb3NzaWJsZSByZXNvbHZlcnMgYXJlOicgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoWydhbmRyb2lkJywgJ2dlbmVyaWMnXSwgbnVsbCwgJ1xcdCcpLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFic29sdXRlIFVSTCB3aGljaCBjYW4gYmUgdXNlZCB0byBmZXRjaCB0aGUgYXNzZXRcbiAgICogZnJvbSB0aGUgZGV2c2VydmVyXG4gICAqL1xuICBhc3NldFNlcnZlclVSTCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpbnZhcmlhbnQodGhpcy5zZXJ2ZXJVcmwgIT0gbnVsbCwgJ25lZWQgc2VydmVyIHRvIGxvYWQgZnJvbScpO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICB0aGlzLnNlcnZlclVybCArXG4gICAgICAgIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSArXG4gICAgICAgICc/cGxhdGZvcm09JyArXG4gICAgICAgIFBsYXRmb3JtLk9TICtcbiAgICAgICAgJyZoYXNoPScgK1xuICAgICAgICB0aGlzLmFzc2V0Lmhhc2gsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byBqdXN0IHRoZSBzY2FsZWQgYXNzZXQgZmlsZW5hbWVcbiAgICogRS5nLiAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFBhdGgoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRvIHdoZXJlIHRoZSBidW5kbGUgaXMgcnVubmluZyBmcm9tLCB3aXRoIGEgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2ZpbGU6Ly8vc2RjYXJkL2J1bmRsZS9hc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAgICovXG4gIHNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCA/PyAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShcbiAgICAgIC8vIEFzc2V0cyBjYW4gaGF2ZSByZWxhdGl2ZSBwYXRocyBvdXRzaWRlIG9mIHRoZSBwcm9qZWN0IHJvb3QuXG4gICAgICAvLyBXaGVuIGJ1bmRsaW5nIHRoZW0gd2UgcmVwbGFjZSBgLi4vYCB3aXRoIGBfYCB0byBtYWtlIHN1cmUgdGhleVxuICAgICAgLy8gZG9uJ3QgZW5kIHVwIG91dHNpZGUgb2YgdGhlIGV4cGVjdGVkIGFzc2V0cyBkaXJlY3RvcnkuXG4gICAgICBwYXRoICsgZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpLnJlcGxhY2UoL1xcLlxcLlxcLy9nLCAnXycpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbG9jYXRpb24gb2YgYXNzZXRzIGJ1bmRsZWQgd2l0aCB0aGUgYXBwLCBsb2NhdGVkIGJ5XG4gICAqIHJlc291cmNlIGlkZW50aWZpZXJcbiAgICogVGhlIEFuZHJvaWQgcmVzb3VyY2Ugc3lzdGVtIHBpY2tzIHRoZSBjb3JyZWN0IHNjYWxlLlxuICAgKiBFLmcuICdhc3NldHNfYXdlc29tZW1vZHVsZV9pY29uJ1xuICAgKi9cbiAgcmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcsXG4gICAgICAncmVzb3VyY2UgaWRlbnRpZmllcnMgd29yayBvbiBBbmRyb2lkJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGpzYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSBhIHNpZGVsb2FkIGxvY2F0aW9uLCB0aGlzIHJlc29sdmVzIGFzc2V0c1xuICAgKiByZWxhdGl2ZSB0byBpdHMgbG9jYXRpb25cbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvQXdlc29tZU1vZHVsZS9kcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICAgKi9cbiAgZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCA/PyAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShwYXRoICsgZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICBmcm9tU291cmNlKHNvdXJjZTogc3RyaW5nKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fcGFja2FnZXJfYXNzZXQ6IHRydWUsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldC53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldC5oZWlnaHQsXG4gICAgICB1cmk6IHNvdXJjZSxcbiAgICAgIHNjYWxlOiBwaWNrU2NhbGUodGhpcy5hc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcGlja1NjYWxlOiAoc2NhbGVzOiBBcnJheTxudW1iZXI+LCBkZXZpY2VTY2FsZT86IG51bWJlcikgPT4gbnVtYmVyID1cbiAgICBwaWNrU2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFzc2V0U291cmNlUmVzb2x2ZXI7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFPLGFBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQWViLElBQU1RLFVBQVUsR0FBR1IsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUNLLE9BQU87QUFDN0QsSUFBTUksUUFBUSxHQUFHVCxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQ0ssT0FBTztBQUN6RCxJQUFBSyxRQUFBLEdBQW9CVixPQUFPLENBQUMsY0FB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