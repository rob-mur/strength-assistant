bb7b1f92fc2d72f5d8058819ae81d6e6
_getJestObj().mock("@supabase/supabase-js", function () {
  return {
    createClient: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock("@/lib/data/supabase/supabase/logger");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _env2 = require("expo/virtual/env");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _supabaseCore = require("@/lib/data/supabase/supabase/supabase-core");
var _logger = require("@/lib/data/supabase/supabase/logger");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalEnv = process.env;
var TestSupabaseService = function (_SupabaseService) {
  function TestSupabaseService() {
    (0, _classCallCheck2.default)(this, TestSupabaseService);
    return _callSuper(this, TestSupabaseService, ["TestService"]);
  }
  (0, _inherits2.default)(TestSupabaseService, _SupabaseService);
  return (0, _createClass2.default)(TestSupabaseService, [{
    key: "getInitMessage",
    value: function getInitMessage() {
      return "Initializing test service...";
    }
  }, {
    key: "getClientConfig",
    value: function getClientConfig() {
      return {
        detectSessionInUrl: false
      };
    }
  }, {
    key: "isReady",
    value: function isReady() {
      return this.initialized && this.client !== null;
    }
  }, {
    key: "isEmulatorEnabled",
    value: function isEmulatorEnabled() {
      var _this$mockNodeEnv, _this$mockEmulatorFla;
      var nodeEnv = (_this$mockNodeEnv = this.mockNodeEnv) != null ? _this$mockNodeEnv : process.env.NODE_ENV;
      var emulatorFlag = (_this$mockEmulatorFla = this.mockEmulatorFlag) != null ? _this$mockEmulatorFla : _env2.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR;
      return nodeEnv === "development" || emulatorFlag === "true";
    }
  }, {
    key: "getEmulatorHost",
    value: function getEmulatorHost() {
      var _ref, _this$mockEmulatorHos;
      return (_ref = (_this$mockEmulatorHos = this.mockEmulatorHost) != null ? _this$mockEmulatorHos : _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST) != null ? _ref : "127.0.0.1";
    }
  }, {
    key: "getEmulatorPort",
    value: function getEmulatorPort() {
      var _ref2, _this$mockEmulatorPor;
      var port = (_ref2 = (_this$mockEmulatorPor = this.mockEmulatorPort) != null ? _this$mockEmulatorPor : _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT) != null ? _ref2 : "54321";
      return parseInt(port, 10);
    }
  }, {
    key: "setMockNodeEnv",
    value: function setMockNodeEnv(value) {
      this.mockNodeEnv = value;
    }
  }, {
    key: "setMockEmulatorFlag",
    value: function setMockEmulatorFlag(value) {
      this.mockEmulatorFlag = value;
    }
  }, {
    key: "setMockEmulatorHost",
    value: function setMockEmulatorHost(value) {
      this.mockEmulatorHost = value;
    }
  }, {
    key: "setMockEmulatorPort",
    value: function setMockEmulatorPort(value) {
      this.mockEmulatorPort = value;
    }
  }, {
    key: "testAssertInitialized",
    value: function testAssertInitialized(operation) {
      this.assertInitialized(operation);
    }
  }, {
    key: "testIsEmulatorEnabled",
    value: function testIsEmulatorEnabled() {
      return this.isEmulatorEnabled();
    }
  }, {
    key: "testGetEmulatorHost",
    value: function testGetEmulatorHost() {
      return this.getEmulatorHost();
    }
  }, {
    key: "testGetEmulatorPort",
    value: function testGetEmulatorPort() {
      return this.getEmulatorPort();
    }
  }, {
    key: "testLogInfo",
    value: function testLogInfo(message, context) {
      this.logInfo(message, context);
    }
  }, {
    key: "testLogWarn",
    value: function testLogWarn(message, context) {
      this.logWarn(message, context);
    }
  }, {
    key: "testLogError",
    value: function testLogError(message, context) {
      this.logError(message, context);
    }
  }]);
}(_supabaseCore.SupabaseService);
describe("SupabaseService", function () {
  var service;
  var mockLogger;
  beforeEach(function () {
    jest.clearAllMocks();
    process.env = Object.assign({}, originalEnv);
    delete _env2.env.EXPO_PUBLIC_SUPABASE_URL;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;
    delete _env2.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST;
    delete _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT;
    mockLogger = {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    };
    _logger.Logger.mockImplementation(function () {
      return mockLogger;
    });
    service = new TestSupabaseService();
  });
  afterEach(function () {
    process.env = Object.assign({}, originalEnv);
  });
  describe("initialization", function () {
    test("creates service with logger", function () {
      expect(_logger.Logger).toHaveBeenCalledWith("TestService");
    });
    test("starts uninitialized", function () {
      expect(service.isReady()).toBe(false);
    });
    test("becomes ready after initialization", function () {
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-key";
      service.createSupabaseClient = jest.fn().mockImplementation(function () {
        service.client = {
          mock: "client"
        };
      });
      service.init();
      expect(service.isReady()).toBe(true);
    });
    test("returns client after initialization", function () {
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-key";
      service.createSupabaseClient = jest.fn().mockImplementation(function () {
        service.client = {
          mock: "client"
        };
      });
      service.init();
      expect(service.getSupabaseClient()).toEqual({
        mock: "client"
      });
    });
  });
  describe("assertInitialized", function () {
    test("throws error when not initialized", function () {
      expect(function () {
        return service.testAssertInitialized("test operation");
      }).toThrow("Supabase service not initialized. Call init() before test operation");
      expect(mockLogger.error).toHaveBeenCalledWith("Supabase service not initialized. Call init() before test operation", undefined);
    });
    test("does not throw when initialized", function () {
      process.env.EXPO_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
      process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = "test-key";
      service.createSupabaseClient = jest.fn().mockImplementation(function () {
        service.client = {
          mock: "client"
        };
      });
      service.init();
      expect(function () {
        return service.testAssertInitialized("test operation");
      }).not.toThrow();
    });
  });
  describe("logging", function () {
    test("logs info messages", function () {
      var message = "Test info";
      var context = {
        test: true
      };
      service.testLogInfo(message, context);
      expect(mockLogger.info).toHaveBeenCalledWith(message, context);
    });
    test("logs warning messages", function () {
      var message = "Test warning";
      var context = {
        test: true
      };
      service.testLogWarn(message, context);
      expect(mockLogger.warn).toHaveBeenCalledWith(message, context);
    });
    test("logs error messages", function () {
      var message = "Test error";
      var context = {
        test: true
      };
      service.testLogError(message, context);
      expect(mockLogger.error).toHaveBeenCalledWith(message, context);
    });
  });
  describe("emulator configuration", function () {
    test("detects development environment", function () {
      service.setMockNodeEnv("development");
      expect(service.testIsEmulatorEnabled()).toBe(true);
    });
    test("detects emulator flag", function () {
      service.setMockNodeEnv("production");
      service.setMockEmulatorFlag("true");
      expect(service.testIsEmulatorEnabled()).toBe(true);
    });
    test("returns false for production", function () {
      service.setMockNodeEnv("production");
      service.setMockEmulatorFlag("false");
      expect(service.testIsEmulatorEnabled()).toBe(false);
    });
    test("uses default emulator host", function () {
      expect(service.testGetEmulatorHost()).toBe("127.0.0.1");
    });
    test("uses custom emulator host", function () {
      service.setMockEmulatorHost("10.0.2.2");
      expect(service.testGetEmulatorHost()).toBe("10.0.2.2");
    });
    test("uses default emulator port", function () {
      expect(service.testGetEmulatorPort()).toBe(54321);
    });
    test("uses custom emulator port", function () {
      service.setMockEmulatorPort("8000");
      expect(service.testGetEmulatorPort()).toBe(8000);
    });
    test("handles invalid port gracefully", function () {
      service.setMockEmulatorPort("invalid");
      expect(service.testGetEmulatorPort()).toBe(NaN);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,