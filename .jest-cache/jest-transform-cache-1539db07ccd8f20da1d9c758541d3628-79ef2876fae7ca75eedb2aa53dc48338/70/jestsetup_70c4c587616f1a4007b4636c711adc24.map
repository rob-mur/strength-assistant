{"version":3,"names":["_getJestObj","mock","mockUser","uid","email","isAnonymous","mockAuth","onAuthStateChanged","jest","fn","signInAnonymously","Promise","resolve","user","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","currentUser","useEmulator","auth","__esModule","default","FirebaseAuthTypes","AuthErrorCode","RN","requireActual","Platform","OS","id","created_at","Date","toISOString","mockAuthResponse","data","session","error","mockSupabaseClient","getSession","access_token","signUp","signInWithPassword","Object","assign","undefined","getUser","onAuthStateChange","subscription","unsubscribe","from","select","insert","update","delete","createClient","_interopRequireDefault","require","_asyncToGenerator2","_require","defineProperty","global","value","onLine","writable","configurable","process","env","EXPO_PUBLIC_SUPABASE_URL","EXPO_PUBLIC_SUPABASE_ANON_KEY","USE_SUPABASE_DATA","EXPO_PUBLIC_USE_SUPABASE_EMULATOR","testUtils","TestDevice","mockFactories","testDataBuilders","isMemoryOptimizationEnabled","setTimeout","originalConsoleError","console","_len","arguments","length","args","Array","_key","includes","apply","beforeEach","clearAllTimers","afterEach","clearAllMocks","beforeAll","NODE_ENV","JEST_TEST_ENVIRONMENT","afterAll","restoreAllMocks"],"sources":["jest.setup.js"],"sourcesContent":["// Mock React Native Firebase Auth\njest.mock('@react-native-firebase/auth', () => {\n  const mockUser = {\n    uid: 'test-uid',\n    email: 'test@example.com',\n    isAnonymous: false,\n  };\n\n  const mockAuth = {\n    onAuthStateChanged: jest.fn(() => jest.fn()), // Returns unsubscribe function\n    signInAnonymously: jest.fn(() => Promise.resolve({ user: mockUser })),\n    createUserWithEmailAndPassword: jest.fn(() => Promise.resolve({ user: mockUser })),\n    signInWithEmailAndPassword: jest.fn(() => Promise.resolve({ user: mockUser })),\n    signOut: jest.fn(() => Promise.resolve()),\n    currentUser: mockUser,\n    useEmulator: jest.fn(),\n  };\n\n  const auth = () => mockAuth;\n  \n  return {\n    __esModule: true,\n    default: auth,\n    FirebaseAuthTypes: {\n      AuthErrorCode: {},\n    },\n  };\n});\n\n// Mock platform detection to avoid requiring native Firebase\njest.mock('react-native', () => {\n  const RN = jest.requireActual('react-native');\n  \n  // Ensure Platform object exists and set OS\n  if (!RN.Platform) {\n    RN.Platform = {};\n  }\n  RN.Platform.OS = 'web'; // Default to web for most tests\n  \n  return RN;\n});\n\n// Mock navigator global for web APIs used in isOnline() method\nObject.defineProperty(global, 'navigator', {\n  value: {\n    onLine: true,\n  },\n  writable: true,\n  configurable: true,\n});\n\n// Set up test environment variables for Supabase\nprocess.env.EXPO_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\nprocess.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\nprocess.env.USE_SUPABASE_DATA = 'false'; // Default to Firebase for tests\nprocess.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR = 'true';\n\n// Mock Supabase client\njest.mock('@supabase/supabase-js', () => {\n  const mockUser = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    created_at: new Date().toISOString(),\n  };\n\n  const mockAuthResponse = {\n    data: { user: mockUser, session: { user: mockUser } },\n    error: null,\n  };\n\n  const mockSupabaseClient = {\n    auth: {\n      getSession: jest.fn(() => Promise.resolve({\n        data: { session: { user: mockUser, access_token: 'test-token' } },\n        error: null,\n      })),\n      signUp: jest.fn(() => Promise.resolve(mockAuthResponse)),\n      signInWithPassword: jest.fn(() => Promise.resolve(mockAuthResponse)),\n      signInAnonymously: jest.fn(() => Promise.resolve({\n        data: { user: { ...mockUser, email: undefined }, session: { user: { ...mockUser, email: undefined } } },\n        error: null,\n      })),\n      signOut: jest.fn(() => Promise.resolve({ error: null })),\n      getUser: jest.fn(() => Promise.resolve({ data: { user: mockUser }, error: null })),\n      onAuthStateChange: jest.fn(() => ({ data: { subscription: {} }, unsubscribe: jest.fn() })),\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({ data: [], error: null })),\n      insert: jest.fn(() => ({ data: null, error: null })),\n      update: jest.fn(() => ({ data: null, error: null })),\n      delete: jest.fn(() => ({ data: null, error: null })),\n    })),\n  };\n\n  return {\n    createClient: jest.fn(() => mockSupabaseClient),\n  };\n});\n\n// Test Infrastructure Initialization (for the 80 failing tests)\n// This ensures our TestDevice and other infrastructure is available\n\n// Mock Legend State for performance (if package exists)\n// jest.mock('legend-state', () => ({\n//   observable: jest.fn((value) => ({\n//     get: jest.fn(() => value),\n//     set: jest.fn(),\n//     subscribe: jest.fn(() => jest.fn()),\n//   })),\n//   observe: jest.fn(),\n//   when: jest.fn(),\n// }));\n\n// Global test utilities setup\nglobal.testUtils = {\n  TestDevice: undefined, // Will be loaded on demand\n  mockFactories: undefined, // Will be loaded on demand\n  testDataBuilders: undefined, // Will be loaded on demand\n};\n\n// Memory optimization settings\nconst isMemoryOptimizationEnabled = true;\n\n// T003a Performance Optimization: Aggressive timeout for <60 second target\njest.setTimeout(5000); // 5 seconds max - aggressive timeout for speed\n\n// Setup global error handling for better test failure reporting\nconst originalConsoleError = console.error;\nconsole.error = (...args) => {\n  // Only log actual errors, not React warnings during tests\n  if (args[0] && typeof args[0] === 'string' && args[0].includes('Warning:')) {\n    return;\n  }\n  originalConsoleError.apply(console, args);\n};\n\n// T003a Performance Optimization: Minimal cleanup for speed\nbeforeEach(() => {\n  if (isMemoryOptimizationEnabled) {\n    // Clear timers only (skip expensive GC operations)\n    jest.clearAllTimers();\n    \n    // Skip module cache clearing for speed - causes slower test execution\n  }\n});\n\nafterEach(async () => {\n  if (isMemoryOptimizationEnabled) {\n    // T003a: Minimal cleanup for speed - skip expensive operations\n    \n    // Only clear mocks (fast operation)\n    jest.clearAllMocks();\n    \n    // Skip: resetModules, GC, AsyncStorage clearing (slow operations)\n    // Skip: TestDevice cleanup (can be expensive)\n  }\n});\n\n// Constitutional Compliance: Ensure test infrastructure contracts are available\n// This helps with the missing TestDevice imports that are causing test failures\nbeforeAll(() => {\n  // Set up any global test infrastructure state\n  process.env.NODE_ENV = 'test';\n  process.env.JEST_TEST_ENVIRONMENT = 'true';\n});\n\nafterAll(() => {\n  // Clean up global test state\n  jest.clearAllMocks();\n  jest.restoreAllMocks();\n});"],"mappings":"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","ignoreList":[]}