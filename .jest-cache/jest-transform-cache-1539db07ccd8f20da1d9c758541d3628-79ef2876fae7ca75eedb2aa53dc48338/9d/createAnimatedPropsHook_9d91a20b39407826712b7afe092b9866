048eaa036444fba21fa943f22bd7802f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedPropsHook;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _AnimatedEvent = require("../../../Libraries/Animated/AnimatedEvent");
var _AnimatedNode = _interopRequireDefault(require("../../../Libraries/Animated/nodes/AnimatedNode"));
var _AnimatedProps = _interopRequireDefault(require("../../../Libraries/Animated/nodes/AnimatedProps"));
var _AnimatedValue = _interopRequireDefault(require("../../../Libraries/Animated/nodes/AnimatedValue"));
var _ReactFabricPublicInstanceUtils = require("../../../Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils");
var _useRefEffect = _interopRequireDefault(require("../../../Libraries/Utilities/useRefEffect"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../featureflags/ReactNativeFeatureFlags"));
var _createAnimatedPropsMemoHook = require("./createAnimatedPropsMemoHook");
var _NativeAnimatedHelper = _interopRequireDefault(require("./NativeAnimatedHelper"));
var _react = require("react");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function createAnimatedPropsHook(allowlist) {
  var useAnimatedPropsMemo = (0, _createAnimatedPropsMemoHook.createAnimatedPropsMemoHook)(allowlist);
  return function useAnimatedProps(props) {
    var _useReducer = (0, _react.useReducer)(function (count) {
        return count + 1;
      }, 0),
      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
      scheduleUpdate = _useReducer2[1];
    var onUpdateRef = (0, _react.useRef)(null);
    var timerRef = (0, _react.useRef)(null);
    var node = useAnimatedPropsMemo(function () {
      return new _AnimatedProps.default(props, function () {
        return onUpdateRef.current == null ? void 0 : onUpdateRef.current();
      }, allowlist);
    }, props);
    var useNativePropsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
    (0, _react.useEffect)(function () {
      _NativeAnimatedHelper.default.API.flushQueue();
      var drivenAnimationEndedListener = null;
      if (node.__isNative) {
        drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function (data) {
          node.update();
        });
      }
      return function () {
        var _drivenAnimationEnded;
        (_drivenAnimationEnded = drivenAnimationEndedListener) == null || _drivenAnimationEnded.remove();
      };
    });
    var useAnimatedPropsLifecycle = ReactNativeFeatureFlags.scheduleAnimatedCleanupInMicrotask() ? useAnimatedPropsLifecycleWithCleanupInMicrotask : useAnimatedPropsLifecycleWithPrevNodeRef;
    useAnimatedPropsLifecycle(node);
    var refEffect = (0, _react.useCallback)(function (instance) {
      node.setNativeView(instance);
      onUpdateRef.current = function () {
        if (process.env.NODE_ENV === 'test') {
          return scheduleUpdate();
        }
        var isFabricNode = isFabricInstance(instance);
        if (node.__isNative) {
          if (isFabricNode) {
            scheduleUpdate();
          }
          return;
        }
        if (typeof instance !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function') {
          return scheduleUpdate();
        }
        if (!isFabricNode) {
          return instance.setNativeProps(node.__getAnimatedValue());
        }
        if (!useNativePropsInFabric) {
          return scheduleUpdate();
        }
        instance.setNativeProps(node.__getAnimatedValue());
        if (timerRef.current != null) {
          clearTimeout(timerRef.current);
        }
        timerRef.current = setTimeout(function () {
          timerRef.current = null;
          scheduleUpdate();
        }, 48);
      };
      var target = getEventTarget(instance);
      var events = [];
      var animatedValueListeners = [];
      for (var propName in props) {
        var propValue = props[propName];
        if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
          propValue.__attach(target, propName);
          events.push([propName, propValue]);
          addListenersToPropsValue(propValue, animatedValueListeners);
        }
      }
      return function () {
        onUpdateRef.current = null;
        for (var _ref of events) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _propName = _ref2[0];
          var _propValue = _ref2[1];
          _propValue.__detach(target, _propName);
        }
        for (var _ref3 of animatedValueListeners) {
          var _propValue2 = _ref3.propValue;
          var listenerId = _ref3.listenerId;
          _propValue2.removeListener(listenerId);
        }
      };
    }, [node, useNativePropsInFabric, props]);
    var callbackRef = (0, _useRefEffect.default)(refEffect);
    return [reduceAnimatedProps(node, props), callbackRef];
  };
}
function reduceAnimatedProps(node, props) {
  return Object.assign({}, node.__getValueWithStaticProps(props), {
    collapsable: false
  });
}
function addListenersToPropsValue(propValue, accumulator) {
  if (propValue instanceof _AnimatedValue.default) {
    var listenerId = propValue.addListener(function () {});
    accumulator.push({
      propValue: propValue,
      listenerId: listenerId
    });
  } else if (Array.isArray(propValue)) {
    for (var prop of propValue) {
      addListenersToPropsValue(prop, accumulator);
    }
  } else if (propValue instanceof Object) {
    addAnimatedValuesListenersToProps(propValue, accumulator);
  }
}
function addAnimatedValuesListenersToProps(props, accumulator) {
  for (var propName in props) {
    var propValue = props[propName];
    addListenersToPropsValue(propValue, accumulator);
  }
}
function useAnimatedPropsLifecycleWithPrevNodeRef(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useInsertionEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useInsertionEffect)(function () {
    node.__attach();
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
    };
  }, [node]);
}
function useAnimatedPropsLifecycleWithCleanupInMicrotask(node) {
  var isMounted = (0, _react.useRef)(false);
  (0, _react.useInsertionEffect)(function () {
    isMounted.current = true;
    node.__attach();
    return function () {
      isMounted.current = false;
      queueMicrotask(function () {
        if (isMounted.current) {
          node.__restoreDefaultValues();
        }
        node.__detach();
      });
    };
  }, [node]);
}
function getEventTarget(instance) {
  return typeof instance === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
function isFabricInstance(instance) {
  var _instance$getScrollRe;
  return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getNativeScrollRef == null ? void 0 : instance.getNativeScrollRef()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getScrollResponder == null || (_instance$getScrollRe = instance.getScrollResponder()) == null || _instance$getScrollRe.getNativeScrollRef == null ? void 0 : _instance$getScrollRe.getNativeScrollRef());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,