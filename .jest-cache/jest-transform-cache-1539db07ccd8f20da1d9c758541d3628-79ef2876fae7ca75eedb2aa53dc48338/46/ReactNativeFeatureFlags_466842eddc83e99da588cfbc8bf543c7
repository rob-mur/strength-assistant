b51e744ec403a81b9f2609bea5de5129
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTurboModules = exports.useTurboModuleInterop = exports.useShadowNodeStateOnClone = exports.useRefsForTextInputState = exports.useRawPropsJsiValue = exports.useOptimizedEventBatchingOnAndroid = exports.useNativeViewConfigsInBridgelessMode = exports.useFabricInterop = exports.useAlwaysAvailableJSErrorHandling = exports.updateRuntimeShadowNodeReferencesOnCommit = exports.traceTurboModulePromiseRejectionsOnAndroid = exports.throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.scheduleAnimatedCleanupInMicrotask = exports.removeTurboModuleManagerDelegateMutex = exports.override = exports.lazyAnimationCallbacks = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.fuseboxNetworkInspectionEnabled = exports.fuseboxEnabledRelease = exports.fixVirtualizeListCollapseWindowSize = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.excludeYogaFromRawProps = exports.enableViewRecyclingForView = exports.enableViewRecyclingForText = exports.enableViewRecycling = exports.enableViewCulling = exports.enableUIConsistency = exports.enableSynchronousStateUpdates = exports.enableReportEventPaintTime = exports.enablePropsUpdateReconciliationAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = exports.enableNewBackgroundAndBorderDrawables = exports.enableNativeCSSParsing = exports.enableLongTaskAPI = exports.enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnAndroid = exports.enableJSRuntimeGCOnMemoryPressureOnIOS = exports.enableImagePrefetchingAndroid = exports.enableIOSViewClipToPaddingBox = exports.enableFabricRenderer = exports.enableFabricLogs = exports.enableEagerRootViewAttachment = exports.enableDOMDocumentAPI = exports.enableCppPropsIteratorSetter = exports.enableBridgelessArchitecture = exports.enableAnimatedClearImmediateFix = exports.enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccessToHostTreeInFabric = exports.disableMountItemReorderingAndroid = exports.disableInteractionManager = exports.commonTestFlagWithoutNativeImplementation = exports.commonTestFlag = exports.avoidStateUpdateInAnimatedPropsMemo = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var avoidStateUpdateInAnimatedPropsMemo = exports.avoidStateUpdateInAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('avoidStateUpdateInAnimatedPropsMemo', false);
var disableInteractionManager = exports.disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedClearImmediateFix = exports.enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableDOMDocumentAPI = exports.enableDOMDocumentAPI = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableDOMDocumentAPI', false);
var fixVirtualizeListCollapseWindowSize = exports.fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var scheduleAnimatedCleanupInMicrotask = exports.scheduleAnimatedCleanupInMicrotask = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('scheduleAnimatedCleanupInMicrotask', false);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useRefsForTextInputState = exports.useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = exports.commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var disableMountItemReorderingAndroid = exports.disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableBridgelessArchitecture = exports.enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = exports.enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableEagerRootViewAttachment = exports.enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableFabricLogs = exports.enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = exports.enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableIOSViewClipToPaddingBox = exports.enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableImagePrefetchingAndroid = exports.enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
var enableJSRuntimeGCOnMemoryPressureOnIOS = exports.enableJSRuntimeGCOnMemoryPressureOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableJSRuntimeGCOnMemoryPressureOnIOS', false);
var enableLayoutAnimationsOnAndroid = exports.enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = exports.enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNativeCSSParsing = exports.enableNativeCSSParsing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNativeCSSParsing', false);
var enableNewBackgroundAndBorderDrawables = exports.enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = exports.enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = exports.enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = exports.enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = exports.enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewCulling = exports.enableViewCulling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewCulling', false);
var enableViewRecycling = exports.enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var enableViewRecyclingForText = exports.enableViewRecyclingForText = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForText', true);
var enableViewRecyclingForView = exports.enableViewRecyclingForView = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForView', true);
var excludeYogaFromRawProps = exports.excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledRelease = exports.fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var fuseboxNetworkInspectionEnabled = exports.fuseboxNetworkInspectionEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxNetworkInspectionEnabled', false);
var lazyAnimationCallbacks = exports.lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var removeTurboModuleManagerDelegateMutex = exports.removeTurboModuleManagerDelegateMutex = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('removeTurboModuleManagerDelegateMutex', false);
var throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = exports.throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS', false);
var traceTurboModulePromiseRejectionsOnAndroid = exports.traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var updateRuntimeShadowNodeReferencesOnCommit = exports.updateRuntimeShadowNodeReferencesOnCommit = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('updateRuntimeShadowNodeReferencesOnCommit', false);
var useAlwaysAvailableJSErrorHandling = exports.useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useFabricInterop = exports.useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useNativeViewConfigsInBridgelessMode = exports.useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimizedEventBatchingOnAndroid = exports.useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = exports.useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useShadowNodeStateOnClone = exports.useShadowNodeStateOnClone = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useShadowNodeStateOnClone', false);
var useTurboModuleInterop = exports.useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = exports.useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,