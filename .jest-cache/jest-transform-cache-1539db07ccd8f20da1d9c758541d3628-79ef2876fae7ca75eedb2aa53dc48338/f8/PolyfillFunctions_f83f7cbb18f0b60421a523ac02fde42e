a420ef26bbfa25549907370ba0100280
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyfillGlobal = polyfillGlobal;
exports.polyfillObjectProperty = polyfillObjectProperty;
var defineLazyObjectProperty = require('./defineLazyObjectProperty').default;
function polyfillObjectProperty(object, name, getValue) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (__DEV__ && descriptor) {
    var backupName = `original${name[0].toUpperCase()}${name.slice(1)}`;
    Object.defineProperty(object, backupName, descriptor);
  }
  var _ref = descriptor || {},
    enumerable = _ref.enumerable,
    writable = _ref.writable,
    _ref$configurable = _ref.configurable,
    configurable = _ref$configurable === void 0 ? false : _ref$configurable;
  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }
  defineLazyObjectProperty(object, name, {
    get: getValue,
    enumerable: enumerable !== false,
    writable: writable !== false
  });
}
function polyfillGlobal(name, getValue) {
  polyfillObjectProperty(global, name, getValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBvbHlmaWxsR2xvYmFsIiwicG9seWZpbGxPYmplY3RQcm9wZXJ0eSIsImRlZmluZUxhenlPYmplY3RQcm9wZXJ0eSIsInJlcXVpcmUiLCJkZWZhdWx0Iiwib2JqZWN0IiwibmFtZSIsImdldFZhbHVlIiwiZGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fREVWX18iLCJiYWNrdXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsIl9yZWYiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJfcmVmJGNvbmZpZ3VyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImNvbnNvbGUiLCJlcnJvciIsImdldCIsImdsb2JhbCJdLCJzb3VyY2VzIjpbIlBvbHlmaWxsRnVuY3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmluZUxhenlPYmplY3RQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vZGVmaW5lTGF6eU9iamVjdFByb3BlcnR5JykuZGVmYXVsdDtcblxuLyoqXG4gKiBTZXRzIGFuIG9iamVjdCdzIHByb3BlcnR5LiBJZiBhIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZSBleGlzdHMsIHRoaXMgd2lsbFxuICogcmVwbGFjZSBpdCBidXQgbWFpbnRhaW4gaXRzIGRlc2NyaXB0b3IgY29uZmlndXJhdGlvbi4gVGhlIHByb3BlcnR5IHdpbGwgYmVcbiAqIHJlcGxhY2VkIHdpdGggYSBsYXp5IGdldHRlci5cbiAqXG4gKiBJbiBERVYgbW9kZSB0aGUgb3JpZ2luYWwgcHJvcGVydHkgdmFsdWUgd2lsbCBiZSBwcmVzZXJ2ZWQgYXMgYG9yaWdpbmFsW1Byb3BlcnR5TmFtZV1gXG4gKiBzbyB0aGF0LCBpZiBuZWNlc3NhcnksIGl0IGNhbiBiZSByZXN0b3JlZC4gRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHJvdXRlXG4gKiBuZXR3b3JrIHJlcXVlc3RzIHRocm91Z2ggRGV2VG9vbHMgKHRvIHRyYWNlIHRoZW0pOlxuICpcbiAqICAgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0ID0gZ2xvYmFsLm9yaWdpbmFsWE1MSHR0cFJlcXVlc3Q7XG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2lzc3Vlcy85MzRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvbHlmaWxsT2JqZWN0UHJvcGVydHk8VD4oXG4gIG9iamVjdDogey4uLn0sXG4gIG5hbWU6IHN0cmluZyxcbiAgZ2V0VmFsdWU6ICgpID0+IFQsXG4pOiB2b2lkIHtcbiAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I8JEZsb3dGaXhNZT4ob2JqZWN0LCBuYW1lKTtcbiAgaWYgKF9fREVWX18gJiYgZGVzY3JpcHRvcikge1xuICAgIGNvbnN0IGJhY2t1cE5hbWUgPSBgb3JpZ2luYWwke25hbWVbMF0udG9VcHBlckNhc2UoKX0ke25hbWUuc2xpY2UoMSl9YDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBiYWNrdXBOYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxuXG4gIGNvbnN0IHtlbnVtZXJhYmxlLCB3cml0YWJsZSwgY29uZmlndXJhYmxlID0gZmFsc2V9ID0gZGVzY3JpcHRvciB8fCB7fTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgIWNvbmZpZ3VyYWJsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZXQgcG9seWZpbGwuICcgKyBuYW1lICsgJyBpcyBub3QgY29uZmlndXJhYmxlLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRlZmluZUxhenlPYmplY3RQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICBnZXQ6IGdldFZhbHVlLFxuICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUgIT09IGZhbHNlLFxuICAgIHdyaXRhYmxlOiB3cml0YWJsZSAhPT0gZmFsc2UsXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9seWZpbGxHbG9iYWw8VD4obmFtZTogc3RyaW5nLCBnZXRWYWx1ZTogKCkgPT4gVCk6IHZvaWQge1xuICBwb2x5ZmlsbE9iamVjdFByb3BlcnR5KGdsb2JhbCwgbmFtZSwgZ2V0VmFsdWUpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxjQUFBLEdBQUFBLGNBQUE7QUFBQUYsT0FBQSxDQUFBRyxzQkFBQSxHQUFBQSxzQkFBQTtBQUViLElBQU1DLHdCQUF3QixHQUFHQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQ0MsT0FBTztBQWV2RSxTQUFTSCxzQkFBc0JBLENBQ3BDSSxNQUFhLEVBQ2JDLElBQVksRUFDWkMsUUFBaUIsRUFDWDtFQUNOLElBQU1DLFVBQVUsR0FBR1osTUFBTSxDQUFDYSx3QkFBd0IsQ0FBYUosTUFBTSxFQUFFQyxJQUFJLENBQUM7RUFDNUUsSUFBSUksT0FBTyxJQUFJRixVQUFVLEVBQUU7SUFDekIsSUFBTUcsVUFBVSxHQUFHLFdBQVdMLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ00sV0FBVyxDQUFDLENBQUMsR0FBR04sSUFBSSxDQUFDTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDckVqQixNQUFNLENBQUNDLGNBQWMsQ0FBQ1EsTUFBTSxFQUFFTSxVQUFVLEVBQUVILFVBQVUsQ0FBQztFQUN2RDtFQUVBLElBQUFNLElBQUEsR0FBcUROLFVBQVUsSUFBSSxDQUFDLENBQUM7SUFBOURPLFVBQVUsR0FBQUQsSUFBQSxDQUFWQyxVQUFVO0lBQUVDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO0lBQUFDLGlCQUFBLEdBQUFILElBQUEsQ0FBRUksWUFBWTtJQUFaQSxZQUFZLEdBQUFELGlCQUFBLGNBQUcsS0FBSyxHQUFBQSxpQkFBQTtFQUNqRCxJQUFJVCxVQUFVLElBQUksQ0FBQ1UsWUFBWSxFQUFFO0lBQy9CQyxPQUFPLENBQUNDLEtBQUssQ0FBQywwQkFBMEIsR0FBR2QsSUFBSSxHQUFHLHVCQUF1QixDQUFDO0lBQzFFO0VBQ0Y7RUFFQUosd0JBQXdCLENBQUNHLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0lBQ3JDZSxHQUFHLEVBQUVkLFFBQVE7SUFDYlEsVUFBVSxFQUFFQSxVQUFVLEtBQUssS0FBSztJQUNoQ0MsUUFBUSxFQUFFQSxRQUFRLEtBQUs7RUFDekIsQ0FBQyxDQUFDO0FBQ0o7QUFFTyxTQUFTaEIsY0FBY0EsQ0FBSU0sSUFBWSxFQUFFQyxRQUFpQixFQUFRO0VBQ3ZFTixzQkFBc0IsQ0FBQ3FCLE1BQU0sRUFBRWhCLElBQUksRUFBRUMsUUFBUSxDQUFDO0FBQ2hEIiwiaWdub3JlTGlzdCI6W119