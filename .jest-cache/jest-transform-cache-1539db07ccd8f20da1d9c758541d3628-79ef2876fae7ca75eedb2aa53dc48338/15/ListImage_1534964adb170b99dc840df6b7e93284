c2bed28d0c13b29f85895574f60e5de3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var ListImage = function ListImage(_ref) {
  var style = _ref.style,
    source = _ref.source,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'image' : _ref$variant,
    themeOverrides = _ref.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var getStyles = function getStyles() {
    if (variant === 'video') {
      if (!theme.isV3) {
        return [style, styles.video];
      }
      return [style, styles.videoV3];
    }
    return [style, styles.image];
  };
  return React.createElement(_reactNative.Image, {
    style: getStyles(),
    source: source,
    accessibilityIgnoresInvertColors: true,
    testID: "list-image"
  });
};
var styles = _reactNative.StyleSheet.create({
  image: {
    width: 56,
    height: 56
  },
  video: {
    width: 100,
    height: 64,
    marginLeft: 0
  },
  videoV3: {
    width: 114,
    height: 64,
    marginLeft: 0
  }
});
ListImage.displayName = 'List.Image';
var _default = exports.default = ListImage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtaW5nIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTGlzdEltYWdlIiwiX3JlZiIsInN0eWxlIiwic291cmNlIiwiX3JlZiR2YXJpYW50IiwidmFyaWFudCIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiZ2V0U3R5bGVzIiwiaXNWMyIsInN0eWxlcyIsInZpZGVvIiwidmlkZW9WMyIsImltYWdlIiwiY3JlYXRlRWxlbWVudCIsIkltYWdlIiwiYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnMiLCJ0ZXN0SUQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJtYXJnaW5MZWZ0IiwiZGlzcGxheU5hbWUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9MaXN0L0xpc3RJbWFnZS50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQVFBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUFzRCxTQUFBRCx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBO0VBQUEseUJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFOLHVCQUFBLFlBQUFBLHdCQUFBSSxDQUFB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