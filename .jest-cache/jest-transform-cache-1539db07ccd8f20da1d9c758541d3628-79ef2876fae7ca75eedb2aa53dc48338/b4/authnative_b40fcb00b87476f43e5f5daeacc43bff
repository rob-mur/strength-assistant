346a9f1385ed81f36f5e5785aa9df2cc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  initAuth: true,
  getAuthInstance: true,
  signInAnonymouslyNative: true,
  createAccountNative: true,
  signInNative: true,
  signOutNative: true,
  onAuthStateChangedNative: true
};
exports.createAccountNative = createAccountNative;
exports.getAuthInstance = getAuthInstance;
exports.initAuth = initAuth;
exports.onAuthStateChangedNative = onAuthStateChangedNative;
exports.signInAnonymouslyNative = signInAnonymouslyNative;
exports.signInNative = signInNative;
exports.signOutNative = signOutNative;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _auth = _interopRequireWildcard(require("@react-native-firebase/auth"));
Object.keys(_auth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _auth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _auth[key];
    }
  });
});
var _firebaseCore = require("./firebase-core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var AuthNativeService = function (_FirebaseService) {
  function AuthNativeService() {
    (0, _classCallCheck2.default)(this, AuthNativeService);
    return _callSuper(this, AuthNativeService, ["Firebase Auth"]);
  }
  (0, _inherits2.default)(AuthNativeService, _FirebaseService);
  return (0, _createClass2.default)(AuthNativeService, [{
    key: "init",
    value: function init() {
      if (this.initialized) {
        this.logInfo("Already initialized, skipping");
        return;
      }
      var startTime = Date.now();
      this.logInfo("Initializing Firebase Auth...", {
        operation: "init"
      });
      try {
        this.authInstance = (0, _auth.default)();
        this.setupEmulator();
        this.initialized = true;
        this.logInfo("Auth initialization complete", {
          operation: "init",
          duration: Date.now() - startTime
        });
      } catch (error) {
        this.logError("Failed to initialize Firebase Auth", {
          operation: "init",
          duration: Date.now() - startTime,
          error: {
            message: error.message,
            stack: error.stack
          }
        });
        throw error;
      }
    }
  }, {
    key: "setupEmulator",
    value: function setupEmulator() {
      if (!this.authInstance) return;
      if (this.isEmulatorEnabled()) {
        var host = this.getEmulatorHost();
        var port = 9099;
        var emulatorUrl = `http://${host}:${port}`;
        this.logInfo("Development mode detected, connecting to auth emulator", {
          operation: "emulator_setup",
          emulator: {
            host: host,
            port: port
          }
        });
        try {
          this.authInstance.useEmulator(emulatorUrl);
          this.logInfo("Successfully connected to Auth emulator", {
            operation: "emulator_setup",
            emulator: {
              host: host,
              port: port
            }
          });
        } catch (error) {
          this.logError("Failed to connect to emulator", {
            operation: "emulator_setup",
            emulator: {
              host: host,
              port: port
            },
            error: {
              message: error.message
            }
          });
          this.logWarn("Continuing with production Auth");
        }
      } else {
        this.logInfo("Production mode, using production Auth", {
          operation: "emulator_setup"
        });
      }
    }
  }, {
    key: "getAuthInstance",
    value: function getAuthInstance() {
      this.assertInitialized("getAuthInstance()");
      if (!this.authInstance) {
        throw new Error("Auth instance not available");
      }
      return this.authInstance;
    }
  }, {
    key: "isReady",
    value: function isReady() {
      return this.initialized && !!this.authInstance;
    }
  }]);
}(_firebaseCore.FirebaseService);
var authService = new AuthNativeService();
function initAuth() {
  authService.init();
}
function getAuthInstance() {
  return authService.getAuthInstance();
}
function signInAnonymouslyNative() {
  return _signInAnonymouslyNative.apply(this, arguments);
}
function _signInAnonymouslyNative() {
  _signInAnonymouslyNative = (0, _asyncToGenerator2.default)(function* () {
    var authInstance = getAuthInstance();
    var result = yield authInstance.signInAnonymously();
    return result.user;
  });
  return _signInAnonymouslyNative.apply(this, arguments);
}
function createAccountNative(_x, _x2) {
  return _createAccountNative.apply(this, arguments);
}
function _createAccountNative() {
  _createAccountNative = (0, _asyncToGenerator2.default)(function* (email, password) {
    var authInstance = getAuthInstance();
    var result = yield authInstance.createUserWithEmailAndPassword(email, password);
    return result.user;
  });
  return _createAccountNative.apply(this, arguments);
}
function signInNative(_x3, _x4) {
  return _signInNative.apply(this, arguments);
}
function _signInNative() {
  _signInNative = (0, _asyncToGenerator2.default)(function* (email, password) {
    var authInstance = getAuthInstance();
    var result = yield authInstance.signInWithEmailAndPassword(email, password);
    return result.user;
  });
  return _signInNative.apply(this, arguments);
}
function signOutNative() {
  return _signOutNative.apply(this, arguments);
}
function _signOutNative() {
  _signOutNative = (0, _asyncToGenerator2.default)(function* () {
    var authInstance = getAuthInstance();
    yield authInstance.signOut();
  });
  return _signOutNative.apply(this, arguments);
}
function onAuthStateChangedNative(callback) {
  var authInstance = getAuthInstance();
  return authInstance.onAuthStateChanged(callback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,