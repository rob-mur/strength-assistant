362e07fd91bc5fc7f712ae301c19263d
_getJestObj().mock('@/lib/repo/ExerciseRepoFactory');
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase/initializer', function () {
  return {
    initializeFirebaseServices: jest.fn(),
    getDb: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/firebase/logger', function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn(),
      warn: jest.fn(),
      debug: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/supabase/SupabaseClient', function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig', function () {
  return {
    syncExerciseToSupabase: jest.fn(),
    deleteExerciseFromSupabase: jest.fn(),
    syncHelpers: {
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/models/Exercise', function () {
  return {
    ExerciseValidator: {
      validateExerciseInput: jest.fn(),
      sanitizeExerciseName: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    addDoc: jest.fn(),
    deleteDoc: jest.fn(),
    doc: jest.fn(),
    onSnapshot: jest.fn(),
    query: jest.fn(),
    orderBy: jest.fn()
  };
});
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ExerciseRepo = require("@/lib/repo/ExerciseRepo");
var _ExerciseRepoFactory = require("@/lib/repo/ExerciseRepoFactory");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseRepo', function () {
  var mockDelegate;
  var testUserId = 'test-user-123';
  var testExerciseId = 'test-exercise-123';
  var testExercise = {
    id: testExerciseId,
    name: 'Test Exercise',
    user_id: testUserId,
    created_at: '2023-01-01T00:00:00.000Z'
  };
  var testExerciseInput = {
    name: 'Test Exercise'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockDelegate = {
      addExercise: jest.fn(),
      getExercises: jest.fn(),
      deleteExercise: jest.fn(),
      getExerciseById: jest.fn(),
      subscribeToExercises: jest.fn(),
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    };
    _ExerciseRepoFactory.ExerciseRepoFactory.getInstance.mockReturnValue(mockDelegate);
    _ExerciseRepo.ExerciseRepo.instance = undefined;
  });
  describe('Singleton Pattern', function () {
    test('getInstance returns the same instance', function () {
      var repo1 = _ExerciseRepo.ExerciseRepo.getInstance();
      var repo2 = _ExerciseRepo.ExerciseRepo.getInstance();
      expect(repo1).toBe(repo2);
      expect(repo1).toBeInstanceOf(_ExerciseRepo.ExerciseRepo);
    });
    test('initializes delegate on construction', function () {
      _ExerciseRepo.ExerciseRepo.getInstance();
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getInstance).toHaveBeenCalled();
    });
  });
  describe('Delegation Methods', function () {
    var repo;
    beforeEach(function () {
      repo = _ExerciseRepo.ExerciseRepo.getInstance();
    });
    test('addExercise delegates to underlying implementation', (0, _asyncToGenerator2.default)(function* () {
      mockDelegate.addExercise.mockResolvedValue();
      yield repo.addExercise(testUserId, testExerciseInput);
      expect(mockDelegate.addExercise).toHaveBeenCalledWith(testUserId, testExerciseInput);
    }));
    test('getExercises delegates to underlying implementation', function () {
      var mockObservable = {
        get: jest.fn(),
        set: jest.fn()
      };
      mockDelegate.getExercises.mockReturnValue(mockObservable);
      var result = repo.getExercises(testUserId);
      expect(mockDelegate.getExercises).toHaveBeenCalledWith(testUserId);
      expect(result).toBe(mockObservable);
    });
    test('deleteExercise delegates to underlying implementation', (0, _asyncToGenerator2.default)(function* () {
      mockDelegate.deleteExercise.mockResolvedValue();
      yield repo.deleteExercise(testUserId, testExerciseId);
      expect(mockDelegate.deleteExercise).toHaveBeenCalledWith(testUserId, testExerciseId);
    }));
    test('getExerciseById delegates to underlying implementation', (0, _asyncToGenerator2.default)(function* () {
      mockDelegate.getExerciseById.mockResolvedValue(testExercise);
      var result = yield repo.getExerciseById(testExerciseId, testUserId);
      expect(mockDelegate.getExerciseById).toHaveBeenCalledWith(testExerciseId, testUserId);
      expect(result).toBe(testExercise);
    }));
    test('subscribeToExercises delegates to underlying implementation', function () {
      var callback = jest.fn();
      var mockUnsubscribe = jest.fn();
      mockDelegate.subscribeToExercises.mockReturnValue(mockUnsubscribe);
      var result = repo.subscribeToExercises(testUserId, callback);
      expect(mockDelegate.subscribeToExercises).toHaveBeenCalledWith(testUserId, callback);
      expect(result).toBe(mockUnsubscribe);
    });
    test('isSyncing delegates to underlying implementation', function () {
      mockDelegate.isSyncing.mockReturnValue(true);
      var result = repo.isSyncing();
      expect(mockDelegate.isSyncing).toHaveBeenCalled();
      expect(result).toBe(true);
    });
    test('isOnline delegates to underlying implementation', function () {
      mockDelegate.isOnline.mockReturnValue(false);
      var result = repo.isOnline();
      expect(mockDelegate.isOnline).toHaveBeenCalled();
      expect(result).toBe(false);
    });
    test('getPendingChangesCount delegates to underlying implementation', function () {
      mockDelegate.getPendingChangesCount.mockReturnValue(5);
      var result = repo.getPendingChangesCount();
      expect(mockDelegate.getPendingChangesCount).toHaveBeenCalled();
      expect(result).toBe(5);
    });
    test('forceSync delegates to underlying implementation', (0, _asyncToGenerator2.default)(function* () {
      mockDelegate.forceSync.mockResolvedValue();
      yield repo.forceSync();
      expect(mockDelegate.forceSync).toHaveBeenCalled();
    }));
    test('hasErrors delegates to underlying implementation', function () {
      mockDelegate.hasErrors.mockReturnValue(true);
      var result = repo.hasErrors();
      expect(mockDelegate.hasErrors).toHaveBeenCalled();
      expect(result).toBe(true);
    });
    test('getErrorMessage delegates to underlying implementation', function () {
      var errorMessage = 'Test error message';
      mockDelegate.getErrorMessage.mockReturnValue(errorMessage);
      var result = repo.getErrorMessage();
      expect(mockDelegate.getErrorMessage).toHaveBeenCalled();
      expect(result).toBe(errorMessage);
    });
  });
  describe('Delegate Refreshing', function () {
    test('creates delegate during initialization', function () {
      var callCountBefore = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance.mock.calls.length;
      _ExerciseRepo.ExerciseRepo.instance = undefined;
      var repo1 = _ExerciseRepo.ExerciseRepo.getInstance();
      var callCountAfter = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance.mock.calls.length;
      expect(callCountAfter).toBeGreaterThan(callCountBefore);
      var repo2 = _ExerciseRepo.ExerciseRepo.getInstance();
      expect(repo1).toBe(repo2);
    });
  });
  describe('Error Handling', function () {
    var repo;
    beforeEach(function () {
      repo = _ExerciseRepo.ExerciseRepo.getInstance();
    });
    test('propagates errors from delegate addExercise', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Add exercise failed');
      mockDelegate.addExercise.mockRejectedValue(error);
      yield expect(repo.addExercise(testUserId, testExerciseInput)).rejects.toThrow('Add exercise failed');
    }));
    test('propagates errors from delegate deleteExercise', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Delete exercise failed');
      mockDelegate.deleteExercise.mockRejectedValue(error);
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('Delete exercise failed');
    }));
    test('propagates errors from delegate getExerciseById', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Get exercise failed');
      mockDelegate.getExerciseById.mockRejectedValue(error);
      yield expect(repo.getExerciseById(testExerciseId, testUserId)).rejects.toThrow('Get exercise failed');
    }));
    test('propagates errors from delegate forceSync', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Force sync failed');
      mockDelegate.forceSync.mockRejectedValue(error);
      yield expect(repo.forceSync()).rejects.toThrow('Force sync failed');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,