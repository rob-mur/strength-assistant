5ad450594dc793710696b52c80848572
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SegmentedButtons = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _SegmentedButtonItem = _interopRequireDefault(require("./SegmentedButtonItem"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var SegmentedButtons = function SegmentedButtons(_ref) {
  var value = _ref.value,
    onValueChange = _ref.onValueChange,
    buttons = _ref.buttons,
    multiSelect = _ref.multiSelect,
    density = _ref.density,
    style = _ref.style,
    themeOverrides = _ref.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  return React.createElement(_reactNative.View, {
    style: [styles.row, style]
  }, buttons.map(function (item, i) {
    var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({
      theme: theme,
      buttons: buttons,
      index: i
    });
    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;
    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;
    var onPress = function onPress(e) {
      var _item$onPress;
      (_item$onPress = item.onPress) === null || _item$onPress === void 0 || _item$onPress.call(item, e);
      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {
        return item.value !== val;
      }) : [].concat((0, _toConsumableArray2.default)(value), [item.value]) : item.value;
      onValueChange(nextValue);
    };
    return React.createElement(_SegmentedButtonItem.default, _extends({}, item, {
      key: i,
      checked: checked,
      segment: segment,
      density: density,
      onPress: onPress,
      style: [item.style, disabledChildStyle],
      labelStyle: item.labelStyle,
      theme: theme
    }));
  }));
};
exports.SegmentedButtons = SegmentedButtons;
var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  }
});
var _default = exports.default = SegmentedButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TZWdtZW50ZWRCdXR0b25JdGVtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl91dGlscyIsIl90aGVtaW5nIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidCIsIldlYWtNYXAiLCJyIiwibiIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJTZWdtZW50ZWRCdXR0b25zIiwiX3JlZiIsInZhbHVlIiwib25WYWx1ZUNoYW5nZSIsImJ1dHRvbnMiLCJtdWx0aVNlbGVjdCIsImRlbnNpdHkiLCJzdHlsZSIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJzdHlsZXMiLCJyb3ciLCJtYXAiLCJpdGVtIiwiZGlzYWJsZWRDaGlsZFN0eWxlIiwiZ2V0RGlzYWJsZWRTZWdtZW50ZWRCdXR0b25TdHlsZSIsImluZGV4Iiwic2VnbWVudCIsInVuZGVmaW5lZCIsImNoZWNrZWQiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlcyIsIm9uUHJlc3MiLCJfaXRlbSRvblByZXNzIiwibmV4dFZhbHVlIiwiZmlsdGVyIiwidmFsIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImtleSIsImxhYmVsU3R5bGUiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NlZ21lbnRlZEJ1dHRv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