{"version":3,"names":["_child_process","require","_path","TypeScriptValidatorImpl","exports","projectRoot","arguments","length","undefined","process","cwd","_classCallCheck2","default","resolve","configPath","join","_createClass2","key","value","_validateCompilation","_asyncToGenerator2","startTime","Date","now","errors","warnings","result","runTypeScriptCompiler","exitCode","stderr","parsedErrors","parseTypeScriptOutput","push","apply","_toConsumableArray2","filter","e","severity","filesValidated","countTypeScriptFiles","statistics","errorCount","warningCount","duration","success","error","validationError","file","line","column","message","code","validateCompilation","_validateFiles","filePaths","args","concat","validateFiles","_x","getConfiguration","configContent","buildConfiguration","_unused","getDefaultConfiguration","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","compilerOptions","Object","assign","strict","noImplicitAny","noImplicitReturns","skipLibCheck","include","exclude","_validateConfiguration","config","violations","recommendations","property","currentValue","requiredValue","reason","compliant","validateConfiguration","_runTypeScriptCompiler","_this","Promise","reject","_process$stdout","_process$stderr","options","stdio","tscCommand","tscArgs","spawn","stdout","on","data","toString","Error","setTimeout","kill","_x2","output","lines","split","match","_match","_slicedToArray2","lineStr","columnStr","trim","parseInt","ignorable","isIgnorableWarning","ignorableWarnings","includes","_countTypeScriptFiles","runCommand","_unused2","_runCommand","command","_this2","_process$stdout2","_process$stderr2","_x3","_x4","typeScriptValidator"],"sources":["TypeScriptValidator.ts"],"sourcesContent":["/**\n * TypeScript Validator Implementation\n * \n * Implements the TypeScriptValidator interface for comprehensive\n * TypeScript compilation validation and constitutional compliance.\n */\n\nimport { spawn, SpawnOptions } from 'child_process';\nimport { join, resolve } from 'path';\nimport {\n  TypeScriptValidator,\n  TypeScriptValidationResult,\n  TypeScriptError,\n  TypeScriptWarning,\n  ValidationStatistics,\n  TypeScriptConfiguration,\n  ConfigurationValidationResult,\n  ConfigurationViolation\n} from '../../specs/001-we-are-actually/contracts/typescript-validation';\n\nexport class TypeScriptValidatorImpl implements TypeScriptValidator {\n  private projectRoot: string;\n  private configPath: string;\n\n  constructor(projectRoot: string = process.cwd()) {\n    this.projectRoot = resolve(projectRoot);\n    this.configPath = join(this.projectRoot, 'tsconfig.json');\n  }\n\n  async validateCompilation(): Promise<TypeScriptValidationResult> {\n    const startTime = Date.now();\n    const errors: TypeScriptError[] = [];\n    const warnings: TypeScriptWarning[] = [];\n\n    try {\n      // Run TypeScript compiler in check mode\n      const result = await this.runTypeScriptCompiler(['--noEmit']);\n      \n      if (result.exitCode !== 0 && result.stderr) {\n        // Parse TypeScript compiler output\n        const parsedErrors = this.parseTypeScriptOutput(result.stderr);\n        errors.push(...parsedErrors.filter(e => e.severity === 'error') as TypeScriptError[]);\n        warnings.push(...parsedErrors.filter(e => e.severity === 'warning') as TypeScriptWarning[]);\n      }\n\n      // Get file count for statistics\n      const filesValidated = await this.countTypeScriptFiles();\n\n      const statistics: ValidationStatistics = {\n        filesValidated,\n        errorCount: errors.length,\n        warningCount: warnings.length,\n        duration: Date.now() - startTime\n      };\n\n      return {\n        success: errors.length === 0,\n        errors,\n        warnings,\n        statistics\n      };\n    } catch (error) {\n      // Handle validation process errors\n      const validationError: TypeScriptError = {\n        file: 'validation-process',\n        line: 0,\n        column: 0,\n        message: `TypeScript validation failed: ${error}`,\n        code: 'TS0000',\n        severity: 'error'\n      };\n\n      return {\n        success: false,\n        errors: [validationError],\n        warnings: [],\n        statistics: {\n          filesValidated: 0,\n          errorCount: 1,\n          warningCount: 0,\n          duration: Date.now() - startTime\n        }\n      };\n    }\n  }\n\n  async validateFiles(filePaths: string[]): Promise<TypeScriptValidationResult> {\n    const startTime = Date.now();\n    const errors: TypeScriptError[] = [];\n    const warnings: TypeScriptWarning[] = [];\n\n    try {\n      // Run TypeScript compiler with specific files\n      const args = ['--noEmit', ...filePaths];\n      const result = await this.runTypeScriptCompiler(args);\n      \n      if (result.exitCode !== 0 && result.stderr) {\n        const parsedErrors = this.parseTypeScriptOutput(result.stderr);\n        errors.push(...parsedErrors.filter(e => e.severity === 'error') as TypeScriptError[]);\n        warnings.push(...parsedErrors.filter(e => e.severity === 'warning') as TypeScriptWarning[]);\n      }\n\n      const statistics: ValidationStatistics = {\n        filesValidated: filePaths.length,\n        errorCount: errors.length,\n        warningCount: warnings.length,\n        duration: Date.now() - startTime\n      };\n\n      return {\n        success: errors.length === 0,\n        errors,\n        warnings,\n        statistics\n      };\n    } catch (error) {\n      const validationError: TypeScriptError = {\n        file: 'file-validation-process',\n        line: 0,\n        column: 0,\n        message: `File validation failed: ${error}`,\n        code: 'TS0000',\n        severity: 'error'\n      };\n\n      return {\n        success: false,\n        errors: [validationError],\n        warnings: [],\n        statistics: {\n          filesValidated: filePaths.length,\n          errorCount: 1,\n          warningCount: 0,\n          duration: Date.now() - startTime\n        }\n      };\n    }\n  }\n\n  getConfiguration(): TypeScriptConfiguration {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\n      const configContent = require(this.configPath);\n      return this.buildConfiguration(configContent);\n    } catch {\n      return this.getDefaultConfiguration();\n    }\n  }\n\n  private buildConfiguration(configContent: Record<string, unknown>): TypeScriptConfiguration {\n    const compilerOptions = configContent.compilerOptions as Record<string, unknown> || {};\n    return {\n      compilerOptions: {\n        strict: compilerOptions.strict as boolean ?? false,\n        noImplicitAny: compilerOptions.noImplicitAny as boolean ?? false,\n        noImplicitReturns: compilerOptions.noImplicitReturns as boolean ?? false,\n        skipLibCheck: compilerOptions.skipLibCheck as boolean ?? true,\n        ...compilerOptions\n      },\n      include: configContent.include as string[] ?? [],\n      exclude: configContent.exclude as string[] ?? []\n    };\n  }\n\n  private getDefaultConfiguration(): TypeScriptConfiguration {\n    return {\n      compilerOptions: {\n        strict: false,\n        noImplicitAny: false,\n        noImplicitReturns: false,\n        skipLibCheck: true\n      },\n      include: [],\n      exclude: []\n    };\n  }\n\n  async validateConfiguration(): Promise<ConfigurationValidationResult> {\n    const config = this.getConfiguration();\n    const violations: ConfigurationViolation[] = [];\n    const recommendations: string[] = [];\n\n    // Check constitutional requirements\n    if (!config.compilerOptions.strict) {\n      violations.push({\n        property: 'compilerOptions.strict',\n        currentValue: config.compilerOptions.strict,\n        requiredValue: true,\n        reason: 'Constitutional requirement: TypeScript strict mode must be enabled'\n      });\n    }\n\n    if (!config.compilerOptions.noImplicitAny) {\n      violations.push({\n        property: 'compilerOptions.noImplicitAny',\n        currentValue: config.compilerOptions.noImplicitAny,\n        requiredValue: true,\n        reason: 'Constitutional requirement: No implicit any types allowed'\n      });\n    }\n\n    if (!config.compilerOptions.noImplicitReturns) {\n      violations.push({\n        property: 'compilerOptions.noImplicitReturns',\n        currentValue: config.compilerOptions.noImplicitReturns,\n        requiredValue: true,\n        reason: 'Constitutional requirement: All code paths must return values'\n      });\n    }\n\n    // Check for recommendations\n    if (config.compilerOptions.skipLibCheck) {\n      recommendations.push('Consider setting skipLibCheck to false for thorough type checking');\n    }\n\n    if (!config.include.length) {\n      recommendations.push('Specify include patterns to explicitly define files to compile');\n    }\n\n    return {\n      compliant: violations.length === 0,\n      violations,\n      recommendations\n    };\n  }\n\n  private async runTypeScriptCompiler(args: string[]): Promise<{ exitCode: number; stdout: string; stderr: string }> {\n    return new Promise((resolve, reject) => {\n      const options: SpawnOptions = {\n        cwd: this.projectRoot,\n        stdio: ['pipe', 'pipe', 'pipe']\n      };\n\n      // Try to use local TypeScript first, fall back to global\n      const tscCommand = 'npx';\n      const tscArgs = ['tsc', ...args];\n\n      const process = spawn(tscCommand, tscArgs, options);\n      \n      let stdout = '';\n      let stderr = '';\n\n      process.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      process.on('close', (exitCode) => {\n        resolve({\n          exitCode: exitCode ?? 1,\n          stdout,\n          stderr\n        });\n      });\n\n      process.on('error', (error) => {\n        reject(new Error(`Failed to run TypeScript compiler: ${error.message}`));\n      });\n\n      // Set timeout for long-running compilations\n      setTimeout(() => {\n        process.kill();\n        reject(new Error('TypeScript compilation timed out after 30 seconds'));\n      }, 30000);\n    });\n  }\n\n  private parseTypeScriptOutput(output: string): (TypeScriptError | TypeScriptWarning)[] {\n    const errors: (TypeScriptError | TypeScriptWarning)[] = [];\n    const lines = output.split('\\n');\n\n    for (const line of lines) {\n      // Parse TypeScript error format: file(line,column): error TS#### message\n      const match = line.match(/^(.+?)\\((\\d+),(\\d+)\\):\\s+(error|warning)\\s+TS(\\d+):\\s+(.+)$/);\n      \n      if (match) {\n        const [, file, lineStr, columnStr, severity, code, message] = match;\n        \n        const error: TypeScriptError = {\n          file: file.trim(),\n          line: parseInt(lineStr, 10),\n          column: parseInt(columnStr, 10),\n          message: message.trim(),\n          code: `TS${code}`,\n          severity: severity as 'error' | 'warning'\n        };\n\n        if (severity === 'warning') {\n          (error as TypeScriptWarning).ignorable = this.isIgnorableWarning(code);\n        }\n\n        errors.push(error);\n      }\n    }\n\n    return errors;\n  }\n\n  private isIgnorableWarning(code: string): boolean {\n    // Define which warning codes can be ignored\n    const ignorableWarnings = ['7028', '6133']; // unused vars, etc.\n    return ignorableWarnings.includes(code);\n  }\n\n  private async countTypeScriptFiles(): Promise<number> {\n    try {\n      // This is a simplified count - in practice, you'd use glob patterns\n      // to match the include/exclude patterns from tsconfig\n      const result = await this.runCommand('find', ['.', '-name', '*.ts', '-o', '-name', '*.tsx']);\n      return result.stdout.split('\\n').filter(line => line.trim()).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  private async runCommand(command: string, args: string[]): Promise<{ stdout: string; stderr: string }> {\n    return new Promise((resolve, reject) => {\n      const process = spawn(command, args, { \n        cwd: this.projectRoot,\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n      \n      let stdout = '';\n      let stderr = '';\n\n      process.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      process.on('close', (exitCode) => {\n        if (exitCode === 0) {\n          resolve({ stdout, stderr });\n        } else {\n          reject(new Error(`Command failed with exit code ${exitCode}: ${stderr}`));\n        }\n      });\n\n      process.on('error', reject);\n    });\n  }\n}\n\n// Export singleton instance\nexport const typeScriptValidator = new TypeScriptValidatorImpl();"],"mappings":"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","ignoreList":[]}