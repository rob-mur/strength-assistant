{"version":3,"names":["Logger","exports","serviceName","_classCallCheck2","default","_createClass2","key","value","createMessage","level","message","_context","prefix","logWithContext","context","formattedMessage","process","env","NODE_ENV","console","error","warn","log","info"],"sources":["logger.ts"],"sourcesContent":["export interface LogContext {\n\tservice: string;\n\tplatform?: string;\n\toperation?: string;\n\tduration?: number;\n\turl?: string;\n\temulator?: {\n\t\thost: string;\n\t\tport: number;\n\t};\n\terror?: {\n\t\tmessage: string;\n\t\tcode?: string;\n\t\tstack?: string;\n\t};\n}\n\nexport class Logger {\n\tprivate readonly serviceName: string;\n\n\tconstructor(serviceName: string) {\n\t\tthis.serviceName = serviceName;\n\t}\n\n\tprivate createMessage(level: string, message: string, _context?: Record<string, unknown>): string {\n\t\tconst prefix = `[${this.serviceName}]`;\n\t\treturn `${prefix} ${message}`;\n\t}\n\n\tprivate logWithContext(level: 'log' | 'warn' | 'error', message: string, context?: Record<string, unknown>): void {\n\t\tconst formattedMessage = this.createMessage(level, message, context);\n\n\t\t// Only log in development and test environments to avoid SonarQube violations\n\t\tif (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {\n\t\t\tif (level === 'error') {\n\t\t\t\tconsole.error(formattedMessage, context);\n\t\t\t} else if (level === 'warn') {\n\t\t\t\tconsole.warn(formattedMessage, context);\n\t\t\t} else {\n\t\t\t\tconsole.log(formattedMessage, context);\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logWithContext('log', message, context);\n\t}\n\n\twarn(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logWithContext('warn', message, context);\n\t}\n\n\terror(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logWithContext('error', message, context);\n\t}\n}\n"],"mappings":";;;;;;;IAiBaA,MAAM,GAAAC,OAAA,CAAAD,MAAA;EAGlB,SAAAA,OAAYE,WAAmB,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAJ,MAAA;IAChC,IAAI,CAACE,WAAW,GAAGA,WAAW;EAC/B;EAAC,WAAAG,aAAA,CAAAD,OAAA,EAAAJ,MAAA;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAQC,aAAaA,CAACC,KAAa,EAAEC,OAAe,EAAEC,QAAkC,EAAU;MACjG,IAAMC,MAAM,GAAG,IAAI,IAAI,CAACV,WAAW,GAAG;MACtC,OAAO,GAAGU,MAAM,IAAIF,OAAO,EAAE;IAC9B;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAQM,cAAcA,CAACJ,KAA+B,EAAEC,OAAe,EAAEI,OAAiC,EAAQ;MACjH,IAAMC,gBAAgB,GAAG,IAAI,CAACP,aAAa,CAACC,KAAK,EAAEC,OAAO,EAAEI,OAAO,CAAC;MAGpE,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAIF,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;QAC9E,IAAIT,KAAK,KAAK,OAAO,EAAE;UACtBU,OAAO,CAACC,KAAK,CAACL,gBAAgB,EAAED,OAAO,CAAC;QACzC,CAAC,MAAM,IAAIL,KAAK,KAAK,MAAM,EAAE;UAC5BU,OAAO,CAACE,IAAI,CAACN,gBAAgB,EAAED,OAAO,CAAC;QACxC,CAAC,MAAM;UACNK,OAAO,CAACG,GAAG,CAACP,gBAAgB,EAAED,OAAO,CAAC;QACvC;MACD;IACD;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAgB,IAAIA,CAACb,OAAe,EAAEI,OAAiC,EAAQ;MAC9D,IAAI,CAACD,cAAc,CAAC,KAAK,EAAEH,OAAO,EAAEI,OAAO,CAAC;IAC7C;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAc,IAAIA,CAACX,OAAe,EAAEI,OAAiC,EAAQ;MAC9D,IAAI,CAACD,cAAc,CAAC,MAAM,EAAEH,OAAO,EAAEI,OAAO,CAAC;IAC9C;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAa,KAAKA,CAACV,OAAe,EAAEI,OAAiC,EAAQ;MAC/D,IAAI,CAACD,cAAc,CAAC,OAAO,EAAEH,OAAO,EAAEI,OAAO,CAAC;IAC/C;EAAC;AAAA","ignoreList":[]}