537c2fe94e23c3e192496049d5e8226e
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "URL", {
  enumerable: true,
  get: function get() {
    return _whatwgUrlWithoutUnicode.URL;
  }
});
Object.defineProperty(exports, "URLSearchParams", {
  enumerable: true,
  get: function get() {
    return _whatwgUrlWithoutUnicode.URLSearchParams;
  }
});
var _whatwgUrlWithoutUnicode = require("whatwg-url-without-unicode");
var isSetup = false;
var BLOB_URL_PREFIX = null;
function getBlobUrlPrefix() {
  if (isSetup) return BLOB_URL_PREFIX;
  isSetup = true;
  var BlobModule = globalThis.RN$Bridgeless !== true ? globalThis.nativeModuleProxy['BlobModule'] : globalThis.__turboModuleProxy('BlobModule');
  var constants = 'BLOB_URI_SCHEME' in BlobModule ? BlobModule : BlobModule.getConstants();
  if (constants && typeof constants.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = encodeURIComponent(constants.BLOB_URI_SCHEME) + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += `//${encodeURIComponent(constants.BLOB_URI_HOST)}/`;
    }
  }
  return BLOB_URL_PREFIX;
}
_whatwgUrlWithoutUnicode.URL.createObjectURL = function createObjectURL(blob) {
  if (getBlobUrlPrefix() == null) {
    throw new Error('Cannot create URL for blob');
  }
  return `${getBlobUrlPrefix()}${encodeURIComponent(blob.data.blobId)}?offset=${encodeURIComponent(blob.data.offset)}&size=${encodeURIComponent(blob.size)}`;
};
_whatwgUrlWithoutUnicode.URL.revokeObjectURL = function revokeObjectURL(_url) {};
_whatwgUrlWithoutUnicode.URL.canParse = function canParse(url, base) {
  try {
    new _whatwgUrlWithoutUnicode.URL(url, base);
    return true;
  } catch (_unused) {
    return false;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2hhdHdnVXJsV2l0aG91dFVuaWNvZGUiLCJyZXF1aXJlIiwiaXNTZXR1cCIsIkJMT0JfVVJMX1BSRUZJWCIsImdldEJsb2JVcmxQcmVmaXgiLCJCbG9iTW9kdWxlIiwiZ2xvYmFsVGhpcyIsIlJOJEJyaWRnZWxlc3MiLCJuYXRpdmVNb2R1bGVQcm94eSIsIl9fdHVyYm9Nb2R1bGVQcm94eSIsImNvbnN0YW50cyIsImdldENvbnN0YW50cyIsIkJMT0JfVVJJX1NDSEVNRSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkJMT0JfVVJJX0hPU1QiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJibG9iIiwiRXJyb3IiLCJkYXRhIiwiYmxvYklkIiwib2Zmc2V0Iiwic2l6ZSIsInJldm9rZU9iamVjdFVSTCIsIl91cmwiLCJjYW5QYXJzZSIsInVybCIsImJhc2UiLCJfdW51c2VkIl0sInNvdXJjZXMiOlsidXJsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjMtcHJlc2VudCA2NTAgSW5kdXN0cmllcywgSW5jLiAoYWthIEV4cG8pXG4gKiBDb3B5cmlnaHQgwqkgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBmaWxlIHNob3VsZCBub3QgaW1wb3J0IGByZWFjdC1uYXRpdmVgIGluIG9yZGVyIHRvIHJlbWFpbiBzZWxmLWNvbnRhaW5lZC5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3RzLWRlY2xhcmF0aW9ucy93aGF0d2ctdXJsLXdpdGhvdXQtdW5pY29kZS5kLnRzXCIgLz5cbmltcG9ydCB7IFVSTCwgVVJMU2VhcmNoUGFyYW1zIH0gZnJvbSAnd2hhdHdnLXVybC13aXRob3V0LXVuaWNvZGUnO1xuXG5kZWNsYXJlIG5hbWVzcGFjZSBnbG9iYWxUaGlzIHtcbiAgY29uc3QgUk4kQnJpZGdlbGVzczogdW5kZWZpbmVkIHwgYm9vbGVhbjtcbiAgY29uc3QgbmF0aXZlTW9kdWxlUHJveHk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBmdW5jdGlvbiBfX3R1cmJvTW9kdWxlUHJveHkobmFtZTogc3RyaW5nKTogdW5rbm93bjtcbn1cblxuLy8gVE9ETyhAa2l0dGVuKTogUHJvdmlkZSBCbG9iTW9kdWxlIHR5cGVzIG1hdGNoaW5nIG5hdGl2ZSBtb2R1bGVcbmludGVyZmFjZSBOYXRpdmVCbG9iTW9kdWxlIHtcbiAgQkxPQl9VUklfU0NIRU1FOiBzdHJpbmc7XG4gIEJMT0JfVVJJX0hPU1Q6IHN0cmluZztcbn1cbmludGVyZmFjZSBUdXJib0Jsb2JNb2R1bGUge1xuICBnZXRDb25zdGFudHMoKToge1xuICAgIEJMT0JfVVJJX1NDSEVNRTogc3RyaW5nO1xuICAgIEJMT0JfVVJJX0hPU1Q6IHN0cmluZztcbiAgfTtcbn1cblxubGV0IGlzU2V0dXAgPSBmYWxzZTtcbmxldCBCTE9CX1VSTF9QUkVGSVg6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRCbG9iVXJsUHJlZml4KCkge1xuICBpZiAoaXNTZXR1cCkgcmV0dXJuIEJMT0JfVVJMX1BSRUZJWDtcbiAgaXNTZXR1cCA9IHRydWU7XG4gIC8vIGlmIGlPUzogbGV0IEJMT0JfVVJMX1BSRUZJWCA9ICdibG9iOidcblxuICAvLyBQdWxsIHRoZSBibG9iIG1vZHVsZSB3aXRob3V0IGltcG9ydGluZyBSZWFjdCBOYXRpdmUuXG4gIGNvbnN0IEJsb2JNb2R1bGUgPVxuICAgIGdsb2JhbFRoaXMuUk4kQnJpZGdlbGVzcyAhPT0gdHJ1ZVxuICAgICAgPyAvLyBMZWdhY3kgUk4gaW1wbGVtZW50YXRpb25cbiAgICAgICAgKGdsb2JhbFRoaXMubmF0aXZlTW9kdWxlUHJveHlbJ0Jsb2JNb2R1bGUnXSBhcyBOYXRpdmVCbG9iTW9kdWxlKVxuICAgICAgOiAvLyBOZXdlciBSTiBpbXBsZW1lbnRhdGlvblxuICAgICAgICAoZ2xvYmFsVGhpcy5fX3R1cmJvTW9kdWxlUHJveHkoJ0Jsb2JNb2R1bGUnKSBhcyBUdXJib0Jsb2JNb2R1bGUpO1xuXG4gIGNvbnN0IGNvbnN0YW50cyA9ICdCTE9CX1VSSV9TQ0hFTUUnIGluIEJsb2JNb2R1bGUgPyBCbG9iTW9kdWxlIDogQmxvYk1vZHVsZS5nZXRDb25zdGFudHMoKTtcblxuICBpZiAoY29uc3RhbnRzICYmIHR5cGVvZiBjb25zdGFudHMuQkxPQl9VUklfU0NIRU1FID09PSAnc3RyaW5nJykge1xuICAgIEJMT0JfVVJMX1BSRUZJWCA9IGVuY29kZVVSSUNvbXBvbmVudChjb25zdGFudHMuQkxPQl9VUklfU0NIRU1FKSArICc6JztcbiAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5CTE9CX1VSSV9IT1NUID09PSAnc3RyaW5nJykge1xuICAgICAgQkxPQl9VUkxfUFJFRklYICs9IGAvLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbnN0YW50cy5CTE9CX1VSSV9IT1NUKX0vYDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEJMT0JfVVJMX1BSRUZJWDtcbn1cblxuZGVjbGFyZSBtb2R1bGUgJ3doYXR3Zy11cmwtd2l0aG91dC11bmljb2RlJyB7XG4gIC8vIFRPRE8oQGtpdHRlbik6IENsYXJpZnkgd2hlcmUgdGhpcyBjYW1lIGZyb21cbiAgdHlwZSBCbG9iTGlrZSA9IEJsb2IgJiB7IGRhdGE/OiB7IGJsb2JJZDogc3RyaW5nOyBvZmZzZXQ6IG51bWJlciB9IH07XG5cbiAgaW50ZXJmYWNlIFVSTENvbnN0cnVjdG9yIHtcbiAgICBjcmVhdGVPYmplY3RVUkwoYmxvYjogQmxvYkxpa2UpOiBzdHJpbmc7XG4gICAgcmV2b2tlT2JqZWN0VVJMKHVybDogVVJMKTogdm9pZDtcbiAgICBjYW5QYXJzZSh1cmw6IHN0cmluZywgYmFzZT86IHN0cmluZyk6IGJvb2xlYW47XG4gIH1cbn1cblxuLyoqXG4gKiBUbyBhbGxvdyBCbG9icyBiZSBhY2Nlc3NlZCB2aWEgYGNvbnRlbnQ6Ly9gIFVSSXMsXG4gKiB5b3UgbmVlZCB0byByZWdpc3RlciBgQmxvYlByb3ZpZGVyYCBhcyBhIENvbnRlbnRQcm92aWRlciBpbiB5b3VyIGFwcCdzIGBBbmRyb2lkTWFuaWZlc3QueG1sYDpcbiAqXG4gKiBgYGB4bWxcbiAqIDxtYW5pZmVzdD5cbiAqICAgPGFwcGxpY2F0aW9uPlxuICogICAgIDxwcm92aWRlclxuICogICAgICAgYW5kcm9pZDpuYW1lPVwiY29tLmZhY2Vib29rLnJlYWN0Lm1vZHVsZXMuYmxvYi5CbG9iUHJvdmlkZXJcIlxuICogICAgICAgYW5kcm9pZDphdXRob3JpdGllcz1cIkBzdHJpbmcvYmxvYl9wcm92aWRlcl9hdXRob3JpdHlcIlxuICogICAgICAgYW5kcm9pZDpleHBvcnRlZD1cImZhbHNlXCJcbiAqICAgICAvPlxuICogICA8L2FwcGxpY2F0aW9uPlxuICogPC9tYW5pZmVzdD5cbiAqIGBgYFxuICogQW5kIHRoZW4gZGVmaW5lIHRoZSBgYmxvYl9wcm92aWRlcl9hdXRob3JpdHlgIHN0cmluZyBpbiBgcmVzL3ZhbHVlcy9zdHJpbmdzLnhtbGAuXG4gKiBVc2UgYSBkb3R0ZWQgbmFtZSB0aGF0J3MgZW50aXJlbHkgdW5pcXVlIHRvIHlvdXIgYXBwOlxuICpcbiAqIGBgYHhtbFxuICogPHJlc291cmNlcz5cbiAqICAgPHN0cmluZyBuYW1lPVwiYmxvYl9wcm92aWRlcl9hdXRob3JpdHlcIj55b3VyLmFwcC5wYWNrYWdlLmJsb2JzPC9zdHJpbmc+XG4gKiA8L3Jlc291cmNlcz5cbiAqIGBgYFxuICovXG5VUkwuY3JlYXRlT2JqZWN0VVJMID0gZnVuY3Rpb24gY3JlYXRlT2JqZWN0VVJMKGJsb2IpIHtcbiAgaWYgKGdldEJsb2JVcmxQcmVmaXgoKSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY3JlYXRlIFVSTCBmb3IgYmxvYicpO1xuICB9XG4gIHJldHVybiBgJHtnZXRCbG9iVXJsUHJlZml4KCl9JHtlbmNvZGVVUklDb21wb25lbnQoYmxvYi5kYXRhIS5ibG9iSWQpfT9vZmZzZXQ9JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgYmxvYi5kYXRhIS5vZmZzZXRcbiAgKX0mc2l6ZT0ke2VuY29kZVVSSUNvbXBvbmVudChibG9iLnNpemUpfWA7XG59O1xuXG5VUkwucmV2b2tlT2JqZWN0VVJMID0gZnVuY3Rpb24gcmV2b2tlT2JqZWN0VVJMKF91cmwpIHtcbiAgLy8gRG8gbm90aGluZy5cbn07XG5cblVSTC5jYW5QYXJzZSA9IGZ1bmN0aW9uIGNhblBhcnNlKHVybDogc3RyaW5nLCBiYXNlPzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgIG5ldyBVUkwodXJsLCBiYXNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgeyBVUkwsIFVSTFNlYXJjaFBhcmFtcyB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFXQSxJQUFBQSx3QkFBQSxHQUFBQyxPQUFBO0FBb0JBLElBQUlDLE9BQU8sR0FBRyxLQUFLO0FBQ25CLElBQUlDLGVBQThCLEdBQUcsSUFBSTtBQUV6QyxTQUFTQyxnQkFBZ0JBLENBQUEsRUFBRztFQUMxQixJQUFJRixPQUFPLEVBQUUsT0FBT0MsZUFBZTtFQUNuQ0QsT0FBTyxHQUFHLElBQUk7RUFJZCxJQUFNRyxVQUFVLEdBQ2RDLFVBQVUsQ0FBQ0MsYUFBYSxLQUFLLElBQUksR0FFNUJELFVBQVUsQ0FBQ0UsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEdBRTFDRixVQUFVLENBQUNHLGtCQUFrQixDQUFDLFlBQVksQ0FBcUI7RUFFdEUsSUFBTUMsU0FBUyxHQUFHLGlCQUFpQixJQUFJTCxVQUFVLEdBQUdBLFVBQVUsR0FBR0EsVUFBVSxDQUFDTSxZQUFZLENBQUMsQ0FBQztFQUUxRixJQUFJRCxTQUFTLElBQUksT0FBT0EsU0FBUyxDQUFDRSxlQUFlLEtBQUssUUFBUSxFQUFFO0lBQzlEVCxlQUFlLEdBQUdVLGtCQUFrQixDQUFDSCxTQUFTLENBQUNFLGVBQWUsQ0FBQyxHQUFHLEdBQUc7SUFDckUsSUFBSSxPQUFPRixTQUFTLENBQUNJLGFBQWEsS0FBSyxRQUFRLEVBQUU7TUFDL0NYLGVBQWUsSUFBSSxLQUFLVSxrQkFBa0IsQ0FBQ0gsU0FBUyxDQUFDSSxhQUFhLENBQUMsR0FBRztJQUN4RTtFQUNGO0VBQ0EsT0FBT1gsZUFBZTtBQUN4QjtBQXFDQVksNEJBQUcsQ0FBQ0MsZUFBZSxHQUFHLFNBQVNBLGVBQWVBLENBQUNDLElBQUksRUFBRTtFQUNuRCxJQUFJYixnQkFBZ0IsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO0lBQzlCLE1BQU0sSUFBSWMsS0FBSyxDQUFDLDRCQUE0QixDQUFDO0VBQy9DO0VBQ0EsT0FBTyxHQUFHZCxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUdTLGtCQUFrQixDQUFDSSxJQUFJLENBQUNFLElBQUksQ0FBRUMsTUFBTSxDQUFDLFdBQVdQLGtCQUFrQixDQUMvRkksSUFBSSxDQUFDRSxJQUFJLENBQUVFLE1BQ2IsQ0FBQyxTQUFTUixrQkFBa0IsQ0FBQ0ksSUFBSSxDQUFDSyxJQUFJLENBQUMsRUFBRTtBQUMzQyxDQUFDO0FBRURQLDRCQUFHLENBQUNRLGVBQWUsR0FBRyxTQUFTQSxlQUFlQSxDQUFDQyxJQUFJLEVBQUUsQ0FFckQsQ0FBQztBQUVEVCw0QkFBRyxDQUFDVSxRQUFRLEdBQUcsU0FBU0EsUUFBUUEsQ0FBQ0MsR0FBVyxFQUFFQyxJQUFhLEVBQVc7RUFDcEUsSUFBSTtJQUVGLElBQUlaLDRCQUFHLENBQUNXLEdBQUcsRUFBRUMsSUFBSSxDQUFDO0lBQ2xCLE9BQU8sSUFBSTtFQUNiLENBQUMsQ0FBQyxPQUFBQyxPQUFBLEVBQU07SUFDTixPQUFPLEtBQUs7RUFDZDtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=