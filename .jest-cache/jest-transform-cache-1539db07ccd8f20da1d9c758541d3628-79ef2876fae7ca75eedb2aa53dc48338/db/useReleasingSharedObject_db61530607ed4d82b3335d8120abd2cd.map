{"version":3,"names":["Object","defineProperty","exports","value","useReleasingSharedObject","_react","require","factory","dependencies","objectRef","useRef","isFastRefresh","previousDependencies","current","object","useMemo","_previousDependencies","newObject","dependenciesAreEqual","length","every","index","_objectRef$current","release","useEffect"],"sources":["useReleasingSharedObject.ts"],"sourcesContent":["'use client';\n\nimport { DependencyList, useRef, useMemo, useEffect } from 'react';\n\nimport type { SharedObject } from '../ts-declarations/SharedObject';\n\n/**\n * Returns a shared object, which is automatically cleaned up when the component is unmounted.\n */\nexport function useReleasingSharedObject<TSharedObject extends SharedObject>(\n  factory: () => TSharedObject,\n  dependencies: DependencyList\n): TSharedObject {\n  const objectRef = useRef<TSharedObject | null>(null);\n  const isFastRefresh = useRef(false);\n  const previousDependencies = useRef<DependencyList>(dependencies);\n\n  if (objectRef.current == null) {\n    objectRef.current = factory();\n  }\n\n  const object = useMemo(() => {\n    let newObject = objectRef.current;\n    const dependenciesAreEqual =\n      previousDependencies.current?.length === dependencies.length &&\n      dependencies.every((value, index) => value === previousDependencies.current[index]);\n\n    // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called\n    // because of a fast refresh, and we don't want to release the object.\n    if (!newObject || !dependenciesAreEqual) {\n      objectRef.current?.release();\n      newObject = factory();\n      objectRef.current = newObject;\n      previousDependencies.current = dependencies;\n    } else {\n      isFastRefresh.current = true;\n    }\n    return newObject;\n  }, dependencies);\n\n  useEffect(() => {\n    isFastRefresh.current = false;\n\n    return () => {\n      // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.\n      if (!isFastRefresh.current && objectRef.current) {\n        objectRef.current.release();\n      }\n    };\n  }, []);\n\n  return object;\n}\n"],"mappings":"AAAA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,wBAAA,GAAAA,wBAAA;AAEb,IAAAC,MAAA,GAAAC,OAAA;AAOO,SAASF,wBAAwBA,CACtCG,OAA4B,EAC5BC,YAA4B,EACb;EACf,IAAMC,SAAS,GAAG,IAAAC,aAAM,EAAuB,IAAI,CAAC;EACpD,IAAMC,aAAa,GAAG,IAAAD,aAAM,EAAC,KAAK,CAAC;EACnC,IAAME,oBAAoB,GAAG,IAAAF,aAAM,EAAiBF,YAAY,CAAC;EAEjE,IAAIC,SAAS,CAACI,OAAO,IAAI,IAAI,EAAE;IAC7BJ,SAAS,CAACI,OAAO,GAAGN,OAAO,CAAC,CAAC;EAC/B;EAEA,IAAMO,MAAM,GAAG,IAAAC,cAAO,EAAC,YAAM;IAAA,IAAAC,qBAAA;IAC3B,IAAIC,SAAS,GAAGR,SAAS,CAACI,OAAO;IACjC,IAAMK,oBAAoB,GACxB,EAAAF,qBAAA,GAAAJ,oBAAoB,CAACC,OAAO,qBAA5BG,qBAAA,CAA8BG,MAAM,MAAKX,YAAY,CAACW,MAAM,IAC5DX,YAAY,CAACY,KAAK,CAAC,UAACjB,KAAK,EAAEkB,KAAK;MAAA,OAAKlB,KAAK,KAAKS,oBAAoB,CAACC,OAAO,CAACQ,KAAK,CAAC;IAAA,EAAC;IAIrF,IAAI,CAACJ,SAAS,IAAI,CAACC,oBAAoB,EAAE;MAAA,IAAAI,kBAAA;MACvC,CAAAA,kBAAA,GAAAb,SAAS,CAACI,OAAO,aAAjBS,kBAAA,CAAmBC,OAAO,CAAC,CAAC;MAC5BN,SAAS,GAAGV,OAAO,CAAC,CAAC;MACrBE,SAAS,CAACI,OAAO,GAAGI,SAAS;MAC7BL,oBAAoB,CAACC,OAAO,GAAGL,YAAY;IAC7C,CAAC,MAAM;MACLG,aAAa,CAACE,OAAO,GAAG,IAAI;IAC9B;IACA,OAAOI,SAAS;EAClB,CAAC,EAAET,YAAY,CAAC;EAEhB,IAAAgB,gBAAS,EAAC,YAAM;IACdb,aAAa,CAACE,OAAO,GAAG,KAAK;IAE7B,OAAO,YAAM;MAEX,IAAI,CAACF,aAAa,CAACE,OAAO,IAAIJ,SAAS,CAACI,OAAO,EAAE;QAC/CJ,SAAS,CAACI,OAAO,CAACU,OAAO,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOT,MAAM;AACf","ignoreList":[]}