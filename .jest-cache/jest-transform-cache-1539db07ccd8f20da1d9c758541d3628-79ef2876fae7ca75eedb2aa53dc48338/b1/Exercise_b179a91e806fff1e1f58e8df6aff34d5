70d05847751d578f107a2b4daa36e3e5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExerciseValidator = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var ExerciseValidator = exports.ExerciseValidator = function () {
  function ExerciseValidator() {
    (0, _classCallCheck2.default)(this, ExerciseValidator);
  }
  return (0, _createClass2.default)(ExerciseValidator, null, [{
    key: "validateExerciseInput",
    value: function validateExerciseInput(input) {
      if (!input) {
        throw new Error('Exercise input is required');
      }
      this.validateExerciseName(input.name);
    }
  }, {
    key: "validateExerciseName",
    value: function validateExerciseName(name) {
      if (name === null || name === undefined || typeof name !== 'string') {
        throw new Error('Exercise name is required and must be a string');
      }
      var trimmedName = name.trim();
      if (trimmedName.length < this.MIN_NAME_LENGTH) {
        throw new Error('Exercise name cannot be empty');
      }
      if (trimmedName.length > this.MAX_NAME_LENGTH) {
        throw new Error(`Exercise name cannot exceed ${this.MAX_NAME_LENGTH} characters`);
      }
      if (!this.VALID_NAME_PATTERN.test(trimmedName)) {
        throw new Error('Exercise name contains invalid characters. Only letters, numbers, spaces, and basic punctuation are allowed');
      }
    }
  }, {
    key: "sanitizeExerciseName",
    value: function sanitizeExerciseName(name) {
      return name.trim().replace(/\s+/g, ' ');
    }
  }]);
}();
ExerciseValidator.MIN_NAME_LENGTH = 1;
ExerciseValidator.MAX_NAME_LENGTH = 100;
ExerciseValidator.VALID_NAME_PATTERN = /^[a-zA-Z0-9\s\-_.,()]+$/;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFeGVyY2lzZVZhbGlkYXRvciIsImV4cG9ydHMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInZhbGlkYXRlRXhlcmNpc2VJbnB1dCIsImlucHV0IiwiRXJyb3IiLCJ2YWxpZGF0ZUV4ZXJjaXNlTmFtZSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJ0cmltbWVkTmFtZSIsInRyaW0iLCJsZW5ndGgiLCJNSU5fTkFNRV9MRU5HVEgiLCJNQVhfTkFNRV9MRU5HVEgiLCJWQUxJRF9OQU1FX1BBVFRFUk4iLCJ0ZXN0Iiwic2FuaXRpemVFeGVyY2lzZU5hbWUiLCJyZXBsYWNlIl0sInNvdXJjZXMiOlsiRXhlcmNpc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBFeGVyY2lzZSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdXNlcl9pZDogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhlcmNpc2VJbnB1dCB7XG4gIG5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBWYWxpZGF0aW9uIHV0aWxpdGllcyBmb3IgZXhlcmNpc2UgZGF0YVxuICovXG5leHBvcnQgY2xhc3MgRXhlcmNpc2VWYWxpZGF0b3Ige1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNSU5fTkFNRV9MRU5HVEggPSAxO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfTkFNRV9MRU5HVEggPSAxMDA7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFZBTElEX05BTUVfUEFUVEVSTiA9IC9eW2EtekEtWjAtOVxcc1xcLV8uLCgpXSskLztcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGV4ZXJjaXNlIGlucHV0IGRhdGFcbiAgICogQHBhcmFtIGlucHV0IC0gVGhlIGV4ZXJjaXNlIGlucHV0IHRvIHZhbGlkYXRlXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdmFsaWRhdGlvbiBmYWlsc1xuICAgKi9cbiAgc3RhdGljIHZhbGlkYXRlRXhlcmNpc2VJbnB1dChpbnB1dDogRXhlcmNpc2VJbnB1dCk6IHZvaWQge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhlcmNpc2UgaW5wdXQgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbGlkYXRlRXhlcmNpc2VOYW1lKGlucHV0Lm5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBleGVyY2lzZSBuYW1lXG4gICAqIEBwYXJhbSBuYW1lIC0gVGhlIGV4ZXJjaXNlIG5hbWUgdG8gdmFsaWRhdGVcbiAgICogQHRocm93cyBFcnJvciBpZiB2YWxpZGF0aW9uIGZhaWxzXG4gICAqL1xuICBzdGF0aWMgdmFsaWRhdGVFeGVyY2lzZU5hbWUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKG5hbWUgPT09IG51bGwgfHwgbmFtZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGVyY2lzZSBuYW1lIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdHJpbW1lZE5hbWUgPSBuYW1lLnRyaW0oKTtcbiAgICBcbiAgICBpZiAodHJpbW1lZE5hbWUubGVuZ3RoIDwgdGhpcy5NSU5fTkFNRV9MRU5HVEgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhlcmNpc2UgbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICB9XG5cbiAgICBpZiAodHJpbW1lZE5hbWUubGVuZ3RoID4gdGhpcy5NQVhfTkFNRV9MRU5HVEgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXhlcmNpc2UgbmFtZSBjYW5ub3QgZXhjZWVkICR7dGhpcy5NQVhfTkFNRV9MRU5HVEh9IGNoYXJhY3RlcnNgKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuVkFMSURfTkFNRV9QQVRURVJOLnRlc3QodHJpbW1lZE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4ZXJjaXNlIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLiBPbmx5IGxldHRlcnMsIG51bWJlcnMsIHNwYWNlcywgYW5kIGJhc2ljIHB1bmN0dWF0aW9uIGFyZSBhbGxvd2VkJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNhbml0aXplcyBleGVyY2lzZSBuYW1lIGZvciBzYWZlIHN0b3JhZ2VcbiAgICogQHBhcmFtIG5hbWUgLSBUaGUgZXhlcmNpc2UgbmFtZSB0byBzYW5pdGl6ZVxuICAgKiBAcmV0dXJucyBTYW5pdGl6ZWQgbmFtZVxuICAgKi9cbiAgc3RhdGljIHNhbml0aXplRXhlcmNpc2VOYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5hbWUudHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0lBY2FBLGlCQUFpQixHQUFBQyxPQUFBLENBQUFELGlCQUFBO0VBQUEsU0FBQUEsa0JBQUE7SUFBQSxJQUFBRSxnQkFBQSxDQUFBQyxPQUFBLFFBQUFILGlCQUFBO0VBQUE7RUFBQSxXQUFBSSxhQUFBLENBQUFELE9BQUEsRUFBQUgsaUJBQUE7SUFBQUssR0FBQTtJQUFBQyxLQUFBLEVBVTVCLFNBQU9DLHFCQUFxQkEsQ0FBQ0MsS0FBb0IsRUFBUTtNQUN2RCxJQUFJLENBQUNBLEtBQUssRUFBRTtRQUNWLE1BQU0sSUFBSUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDO01BQy9DO01BRUEsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLENBQUM7SUFDdkM7RUFBQztJQUFBTixHQUFBO0lBQUFDLEtBQUEsRUFPRCxTQUFPSSxvQkFBb0JBLENBQUNDLElBQVksRUFBUTtNQUM5QyxJQUFJQSxJQUFJLEtBQUssSUFBSSxJQUFJQSxJQUFJLEtBQUtDLFNBQVMsSUFBSSxPQUFPRCxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ25FLE1BQU0sSUFBSUYsS0FBSyxDQUFDLGdEQUFnRCxDQUFDO01BQ25FO01BRUEsSUFBTUksV0FBVyxHQUFHRixJQUFJLENBQUNHLElBQUksQ0FBQyxDQUFDO01BRS9CLElBQUlELFdBQVcsQ0FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQ0MsZUFBZSxFQUFFO1FBQzdDLE1BQU0sSUFBSVAsS0FBSyxDQUFDLCtCQUErQixDQUFDO01BQ2xEO01BRUEsSUFBSUksV0FBVyxDQUFDRSxNQUFNLEdBQUcsSUFBSSxDQUFDRSxlQUFlLEVBQUU7UUFDN0MsTUFBTSxJQUFJUixLQUFLLENBQUMsK0JBQStCLElBQUksQ0FBQ1EsZUFBZSxhQUFhLENBQUM7TUFDbkY7TUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDTixXQUFXLENBQUMsRUFBRTtRQUM5QyxNQUFNLElBQUlKLEtBQUssQ0FBQyw2R0FBNkcsQ0FBQztNQUNoSTtJQUNGO0VBQUM7SUFBQUosR0FBQTtJQUFBQyxLQUFBLEVBT0QsU0FBT2Msb0JBQW9CQSxDQUFDVCxJQUFZLEVBQVU7TUFDaEQsT0FBT0EsSUFBSSxDQUFDRyxJQUFJLENBQUMsQ0FBQyxDQUFDTyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUN6QztFQUFDO0FBQUE7QUFsRFVyQixpQkFBaUIsQ0FDSmdCLGVBQWUsR0FBRyxDQUFDO0FBRGhDaEIsaUJBQWlCLENBRUppQixlQUFlLEdBQUcsR0FBRztBQUZsQ2pCLGlCQUFpQixDQUdKa0Isa0JBQWtCLEdBQUcseUJBQXlCIiwiaWdub3JlTGlzdCI6W119