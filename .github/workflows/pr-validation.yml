name: PR Validation
on:
  pull_request:
    branches: [main]

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4
      - name: üõ† Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: Test
        working-directory: devbox/minimal
        run: devbox run test

  build-preview:
    runs-on: ubuntu-latest
    environment: Dev
    outputs:
      apk-path: ${{ steps.build-preview.outputs.apk-path }}
      artifact-name: ${{ steps.build-preview.outputs.artifact-name }}
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4
      - name: Build Preview APK
        uses: ./.github/actions/android-build
        with:
          build-type: preview
          devbox-config: android-build
          artifact-name: preview_build
        id: build-preview

  integration-tests-android:
    runs-on: ubuntu-latest
    needs: build-preview
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-preview.outputs.artifact-name }}
      - name: List downloaded files for debugging
        run: |
          echo "Downloaded artifact contents:"
          ls -la
          find . -name "*.apk" -type f
          echo "Expected APK path: ${{ needs.build-preview.outputs.apk-path }}"
          echo "Working directory: $(pwd)"
          echo "All files recursively:"
          find . -type f | head -20
      - name: Verify APK file exists
        run: |
          if [ -f "build_preview.apk" ]; then
            echo "‚úÖ APK file found: build_preview.apk"
            ls -la build_preview.apk
          else
            echo "‚ùå APK file not found at expected location"
            echo "Available APK files:"
            find . -name "*.apk" -type f
            exit 1
          fi
      - name: Run Integration Tests
        uses: ./.github/actions/maestro-test
        with:
          apk-path: ../../build_preview.apk
          test-environment: integration
          skip-data-cleanup: false
          devbox-config: android-testing
        id: integration-tests

  integration-tests-chrome:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4
      - name: üõ† Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: üß™ Run Chrome integration tests
        working-directory: devbox/minimal
        run: devbox run integration_test_chrome
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chrome-integration-test-debug-artifacts
          path: |
            maestro-debug-output/
            *.png
            *.log
            expo-server.log
          retention-days: 14

  sonarqube:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: üõ† Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: Test and coverage
        run: devbox run collect_coverage
        working-directory: devbox/minimal
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

  claude-review:
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        build-preview,
        integration-tests-android,
        integration-tests-chrome,
        sonarqube,
      ]
    if: always() && (needs.unit-tests.result == 'success' && needs.build-preview.result == 'success' && needs.integration-tests-android.result == 'success' && needs.integration-tests-chrome.result == 'success' && needs.sonarqube.result == 'success')
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          direct_prompt: |
            All PR validation tests have passed. Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.
