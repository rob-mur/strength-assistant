{"version":3,"names":["_expoConstants","_interopRequireDefault","require","_expoModulesCore","_AssetUris","ExpoUpdates","requireOptionalNativeModule","NativeExpoGoModule","requireNativeModule","_unused","isRunningInExpoGo","expoUpdatesIsInstalledAndEnabled","isEnabled","expoUpdatesIsUsingEmbeddedAssets","isUsingEmbeddedAssets","shouldUseUpdatesAssetResolution","IS_ENV_WITH_LOCAL_ASSETS","exports","getLocalAssets","_ExpoUpdates$localAss","localAssets","getManifest2","Constants","__unsafeNoWarnManifest2","manifestBaseUrl","experienceUrl","getManifestBaseUrl"],"sources":["../src/PlatformUtils.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { requireNativeModule, requireOptionalNativeModule } from 'expo-modules-core';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { ExpoUpdatesModule } from 'expo-updates';\n\nimport { getManifestBaseUrl } from './AssetUris';\n\nconst ExpoUpdates = requireOptionalNativeModule<ExpoUpdatesModule>('ExpoUpdates');\n\nconst NativeExpoGoModule = (() => {\n  try {\n    return requireNativeModule('ExpoGo');\n  } catch {\n    return null;\n  }\n})();\n\nfunction isRunningInExpoGo(): boolean {\n  return NativeExpoGoModule != null;\n}\n\n// expo-updates (and Expo Go expo-updates override) manages assets from updates and exposes\n// the ExpoUpdates.localAssets constant containing information about the assets.\nconst expoUpdatesIsInstalledAndEnabled = !!ExpoUpdates?.isEnabled;\nconst expoUpdatesIsUsingEmbeddedAssets = ExpoUpdates?.isUsingEmbeddedAssets;\n\n// if expo-updates is installed but we're running directly from the embedded bundle, we don't want\n// to override the AssetSourceResolver.\nconst shouldUseUpdatesAssetResolution =\n  expoUpdatesIsInstalledAndEnabled && !expoUpdatesIsUsingEmbeddedAssets;\n\n// Expo Go always uses the updates module for asset resolution (local assets) since it\n// overrides the expo-updates module.\nexport const IS_ENV_WITH_LOCAL_ASSETS = isRunningInExpoGo() || shouldUseUpdatesAssetResolution;\n\n// Get the localAssets property from the ExpoUpdates native module so that we do\n// not need to include expo-updates as a dependency of expo-asset\nexport function getLocalAssets(): Record<string, string> {\n  return ExpoUpdates?.localAssets ?? {};\n}\n\nexport function getManifest2(): typeof Constants.__unsafeNoWarnManifest2 {\n  return Constants.__unsafeNoWarnManifest2;\n}\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = Constants.experienceUrl\n  ? getManifestBaseUrl(Constants.experienceUrl)\n  : null;\n"],"mappings":";;;;;;;;AAAA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AAIA,IAAAE,UAAA,GAAAF,OAAA;AAEA,IAAMG,WAAW,GAAG,IAAAC,4CAA2B,EAAoB,aAAa,CAAC;AAEjF,IAAMC,kBAAkB,GAAI,YAAK;EAC/B,IAAI;IACF,OAAO,IAAAC,oCAAmB,EAAC,QAAQ,CAAC;EACtC,CAAC,CAAC,OAAAC,OAAA,EAAM;IACN,OAAO,IAAI;EACb;AACF,CAAC,CAAC,CAAE;AAEJ,SAASC,iBAAiBA,CAAA;EACxB,OAAOH,kBAAkB,IAAI,IAAI;AACnC;AAIA,IAAMI,gCAAgC,GAAG,CAAC,EAACN,WAAW,YAAXA,WAAW,CAAEO,SAAS;AACjE,IAAMC,gCAAgC,GAAGR,WAAW,oBAAXA,WAAW,CAAES,qBAAqB;AAI3E,IAAMC,+BAA+B,GACnCJ,gCAAgC,IAAI,CAACE,gCAAgC;AAIhE,IAAMG,wBAAwB,GAAAC,OAAA,CAAAD,wBAAA,GAAGN,iBAAiB,EAAE,IAAIK,+BAA+B;AAIxF,SAAUG,cAAcA,CAAA;EAAA,IAAAC,qBAAA;EAC5B,QAAAA,qBAAA,GAAOd,WAAW,oBAAXA,WAAW,CAAEe,WAAW,YAAAD,qBAAA,GAAI,EAAE;AACvC;AAEM,SAAUE,YAAYA,CAAA;EAC1B,OAAOC,sBAAS,CAACC,uBAAuB;AAC1C;AAGO,IAAMC,eAAe,GAAAP,OAAA,CAAAO,eAAA,GAAGF,sBAAS,CAACG,aAAa,GAClD,IAAAC,6BAAkB,EAACJ,sBAAS,CAACG,aAAa,CAAC,GAC3C,IAAI","ignoreList":[]}