5f60d523db41176d89768e21e70e48fa
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPublicInstance = createPublicInstance;
exports.createPublicRootInstance = createPublicRootInstance;
exports.createPublicTextInstance = createPublicTextInstance;
exports.getInternalInstanceHandleFromPublicInstance = getInternalInstanceHandleFromPublicInstance;
exports.getNativeTagFromPublicInstance = getNativeTagFromPublicInstance;
exports.getNodeFromPublicInstance = getNodeFromPublicInstance;
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ReactNativeDocumentModuleObject;
var ReactFabricHostComponentClass;
var ReactNativeElementClass;
var ReadOnlyTextClass;
var RendererProxy;
function getReactNativeDocumentModule() {
  if (ReactNativeDocumentModuleObject == null) {
    ReactNativeDocumentModuleObject = require('../../../src/private/webapis/dom/nodes/ReactNativeDocument');
  }
  return ReactNativeDocumentModuleObject;
}
function getReactNativeElementClass() {
  if (ReactNativeElementClass == null) {
    ReactNativeElementClass = require('../../../src/private/webapis/dom/nodes/ReactNativeElement').default;
  }
  return ReactNativeElementClass;
}
function getReactFabricHostComponentClass() {
  if (ReactFabricHostComponentClass == null) {
    ReactFabricHostComponentClass = require('./ReactFabricHostComponent').default;
  }
  return ReactFabricHostComponentClass;
}
function getReadOnlyTextClass() {
  if (ReadOnlyTextClass == null) {
    ReadOnlyTextClass = require('../../../src/private/webapis/dom/nodes/ReadOnlyText').default;
  }
  return ReadOnlyTextClass;
}
function createPublicRootInstance(rootTag) {
  if (ReactNativeFeatureFlags.enableAccessToHostTreeInFabric() && ReactNativeFeatureFlags.enableDOMDocumentAPI()) {
    var ReactNativeDocumentModule = getReactNativeDocumentModule();
    return ReactNativeDocumentModule.createReactNativeDocument(rootTag);
  }
  return null;
}
function createPublicInstance(tag, viewConfig, internalInstanceHandle, ownerDocument) {
  if (ReactNativeFeatureFlags.enableAccessToHostTreeInFabric()) {
    var ReactNativeElement = getReactNativeElementClass();
    return new ReactNativeElement(tag, viewConfig, internalInstanceHandle, ownerDocument);
  } else {
    var ReactFabricHostComponent = getReactFabricHostComponentClass();
    return new ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle);
  }
}
function createPublicTextInstance(internalInstanceHandle, ownerDocument) {
  var ReadOnlyText = getReadOnlyTextClass();
  return new ReadOnlyText(internalInstanceHandle, ownerDocument);
}
function getNativeTagFromPublicInstance(publicInstance) {
  return publicInstance.__nativeTag;
}
function getNodeFromPublicInstance(publicInstance) {
  if (publicInstance.__internalInstanceHandle == null) {
    return null;
  }
  if (RendererProxy == null) {
    RendererProxy = require('../../ReactNative/RendererProxy');
  }
  return RendererProxy.getNodeFromInternalInstanceHandle(publicInstance.__internalInstanceHandle);
}
function getInternalInstanceHandleFromPublicInstance(publicInstance) {
  if (publicInstance._internalInstanceHandle != null) {
    return publicInstance._internalInstanceHandle;
  }
  return publicInstance.__internalInstanceHandle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,