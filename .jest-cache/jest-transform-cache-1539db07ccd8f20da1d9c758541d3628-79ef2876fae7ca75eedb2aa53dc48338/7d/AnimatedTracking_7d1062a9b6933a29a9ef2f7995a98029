0c3caec6236ced1a931fa87911c18c4c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _AnimatedNode2 = _interopRequireDefault(require("./AnimatedNode"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var AnimatedTracking = exports.default = function (_AnimatedNode) {
  function AnimatedTracking(value, parent, animationClass, animationConfig, callback, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedTracking);
    _this = _callSuper(this, AnimatedTracking, [config]);
    _this._value = value;
    _this._parent = parent;
    _this._animationClass = animationClass;
    _this._animationConfig = animationConfig;
    _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
    _this._callback = callback;
    _this.__attach();
    return _this;
  }
  (0, _inherits2.default)(AnimatedTracking, _AnimatedNode);
  return (0, _createClass2.default)(AnimatedTracking, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this.__isNative = true;
      this._parent.__makeNative(platformConfig);
      _superPropGet(AnimatedTracking, "__makeNative", this, 3)([platformConfig]);
      this._value.__makeNative(platformConfig);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._parent.__addChild(this);
      if (this._useNativeDriver) {
        var platformConfig = this._animationConfig.platformConfig;
        this.__makeNative(platformConfig);
      }
      _superPropGet(AnimatedTracking, "__attach", this, 3)([]);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._parent.__removeChild(this);
      _superPropGet(AnimatedTracking, "__detach", this, 3)([]);
    }
  }, {
    key: "update",
    value: function update() {
      this._value.animate(new this._animationClass(Object.assign({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var animation = new this._animationClass(Object.assign({}, this._animationConfig, {
        toValue: undefined
      }));
      var animationConfig = animation.__getNativeAnimationConfig();
      return {
        type: 'tracking',
        animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
        animationConfig: animationConfig,
        toValue: this._parent.__getNativeTag(),
        value: this._value.__getNativeTag(),
        debugID: this.__getDebugID()
      };
    }
  }]);
}(_AnimatedNode2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,