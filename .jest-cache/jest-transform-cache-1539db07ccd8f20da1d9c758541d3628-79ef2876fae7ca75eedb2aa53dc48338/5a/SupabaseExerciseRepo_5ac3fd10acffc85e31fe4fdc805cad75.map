{"version":3,"names":["_Exercise","require","_state","_store","_syncConfig","_SupabaseClient","_uuid","_RepositoryUtils","SupabaseExerciseRepo","exports","_classCallCheck2","default","_createClass2","key","value","_addExercise","_asyncToGenerator2","userId","exercise","sanitizedName","validateAndSanitizeExercise","authenticatedUser","validateUserAuthentication","newExercise","createNewExercise","id","performOptimisticUpdate","syncExerciseToSupabase","addExercise","_x","_x2","apply","arguments","ExerciseValidator","validateExerciseInput","sanitizeExerciseName","name","_validateUserAuthentication","supabaseUser","supabaseClient","getCurrentUser","Error","_x3","uuidv4","user_id","created_at","Date","toISOString","_performOptimisticUpdate","newItem","syncOperation","currentExercises","exercises$","get","rollbackOperation","set","concat","_toConsumableArray2","syncError","_x4","_x5","_getExerciseById","uid","exercises","find","getExerciseById","_x6","_x7","getExercises","_userId","computed","currentUser","user$","filter","ex","_deleteExercise","exerciseId","RepositoryUtils","validateExerciseId","performOptimisticDelete","deleteExercise","_x8","_x9","_performOptimisticDelete","updatedExercises","deleteExerciseFromSupabase","_x0","_x1","subscribeToExercises","callback","observe","filteredExercises","isSyncing","syncHelpers","isOnline","getPendingChangesCount","_forceSync","forceSync","hasErrors","getErrorMessage","_syncHelpers$getError","getInstance","instance"],"sources":["SupabaseExerciseRepo.ts"],"sourcesContent":["import { Exercise, ExerciseInput, ExerciseValidator } from \"../models/Exercise\";\nimport { IExerciseRepo } from \"./IExerciseRepo\";\nimport { Observable, observe, computed } from \"@legendapp/state\";\nimport { exercises$, user$ } from \"../data/store\";\nimport { syncExerciseToSupabase, deleteExerciseFromSupabase, syncHelpers } from \"../data/sync/syncConfig\";\nimport { supabaseClient } from \"../data/supabase/SupabaseClient\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { RepositoryUtils } from \"./utils/RepositoryUtils\";\n/**\n * Legend State + Supabase implementation of ExerciseRepo\n * Provides offline-first data access with automatic sync\n */\nexport class SupabaseExerciseRepo implements IExerciseRepo {\n\tprivate static instance: SupabaseExerciseRepo;\n\n\tprivate constructor() { }\n\n\tpublic static getInstance(): SupabaseExerciseRepo {\n\t\tif (!SupabaseExerciseRepo.instance) {\n\t\t\tSupabaseExerciseRepo.instance = new SupabaseExerciseRepo();\n\t\t}\n\t\treturn SupabaseExerciseRepo.instance;\n\t}\n\n\t/**\n\t * Add a new exercise with optimistic updates and error recovery\n\t * Changes are immediately visible in UI and synced in background\n\t * Note: userId parameter is kept for backwards compatibility but Supabase user ID is used internally\n\t */\n\tasync addExercise(userId: string, exercise: ExerciseInput): Promise<void> {\n\t\t// Validate and prepare exercise data\n\t\tconst sanitizedName = this.validateAndSanitizeExercise(exercise);\n\t\tconst authenticatedUser = await this.validateUserAuthentication(userId);\n\t\tconst newExercise = this.createNewExercise(sanitizedName, authenticatedUser.id);\n\n\t\t// Perform optimistic update with rollback capability\n\t\tawait this.performOptimisticUpdate(newExercise, () => syncExerciseToSupabase(newExercise));\n\t}\n\n\t/**\n\t * Validate and sanitize exercise input\n\t */\n\tprivate validateAndSanitizeExercise(exercise: ExerciseInput): string {\n\t\tExerciseValidator.validateExerciseInput(exercise);\n\t\treturn ExerciseValidator.sanitizeExerciseName(exercise.name);\n\t}\n\n\t/**\n\t * Validate user authentication and consistency\n\t */\n\tprivate async validateUserAuthentication(userId: string): Promise<{ id: string }> {\n\t\tconst supabaseUser = await supabaseClient.getCurrentUser();\n\t\tif (!supabaseUser) {\n\t\t\tthrow new Error('User not authenticated with Supabase');\n\t\t}\n\n\t\tif (userId && userId !== supabaseUser.id) {\n\t\t\tthrow new Error(`User ID mismatch: Expected ${userId}, but Supabase user is ${supabaseUser.id}. This may indicate a user mapping issue during Firebase-to-Supabase migration.`);\n\t\t}\n\n\t\treturn supabaseUser;\n\t}\n\n\t/**\n\t * Create new exercise object\n\t */\n\tprivate createNewExercise(sanitizedName: string, userId: string): Exercise {\n\t\treturn {\n\t\t\tid: uuidv4(),\n\t\t\tname: sanitizedName,\n\t\t\tuser_id: userId,\n\t\t\tcreated_at: new Date().toISOString()\n\t\t};\n\t}\n\n\t/**\n\t * Perform optimistic update with rollback on failure\n\t */\n\tprivate async performOptimisticUpdate<T>(newItem: T, syncOperation: () => Promise<void>): Promise<void> {\n\t\tconst currentExercises = exercises$.get();\n\t\tconst rollbackOperation = () => exercises$.set(currentExercises);\n\n\t\t// Optimistic update\n\t\texercises$.set([...currentExercises, newItem] as Exercise[]);\n\n\t\ttry {\n\t\t\tawait syncOperation();\n\t\t} catch (syncError) {\n\t\t\trollbackOperation();\n\t\t\tthrow syncError;\n\t\t}\n\t}\n\n\t/**\n\t * Get exercise by ID from local store (works offline)\n\t */\n\tasync getExerciseById(id: string, uid: string): Promise<Exercise | undefined> {\n\t\t// With Legend State, we can get data immediately from local store\n\t\tconst exercises = exercises$.get();\n\t\treturn exercises.find(exercise => exercise.id === id && exercise.user_id === uid);\n\t}\n\n\t/**\n\t * Get all exercises as a reactive observable\n\t * Filtered for the authenticated Supabase user\n\t * Note: userId parameter is kept for backwards compatibility but Supabase user ID is used internally\n\t */\n\tgetExercises(_userId: string): Observable<Exercise[]> {\n\t\t// Create a computed observable that filters exercises for the current Supabase user\n\t\treturn computed(() => {\n\t\t\tconst currentUser = user$.get();\n\t\t\tif (!currentUser) return [];\n\t\t\treturn exercises$.get().filter(ex => ex.user_id === currentUser.id);\n\t\t}) as unknown as Observable<Exercise[]>;\n\t}\n\n\t/**\n\t * Delete exercise with optimistic updates and error recovery\n\t * Note: userId parameter is kept for backwards compatibility but Supabase user ID is used internally\n\t */\n\tasync deleteExercise(userId: string, exerciseId: string): Promise<void> {\n\t\t// Validate inputs and user authentication\n\t\tRepositoryUtils.validateExerciseId(exerciseId);\n\t\tconst authenticatedUser = await this.validateUserAuthentication(userId);\n\n\t\t// Perform optimistic delete with rollback capability\n\t\tawait this.performOptimisticDelete(exerciseId, authenticatedUser.id);\n\t}\n\n\n\t/**\n\t * Perform optimistic delete with rollback on failure\n\t */\n\tprivate async performOptimisticDelete(exerciseId: string, userId: string): Promise<void> {\n\t\tconst currentExercises = exercises$.get();\n\t\tconst rollbackOperation = () => exercises$.set(currentExercises);\n\n\t\t// Optimistic delete - remove from local store immediately\n\t\tconst updatedExercises = currentExercises.filter(\n\t\t\texercise => !(exercise.id === exerciseId && exercise.user_id === userId)\n\t\t);\n\t\texercises$.set(updatedExercises);\n\n\t\ttry {\n\t\t\tawait deleteExerciseFromSupabase(exerciseId, userId);\n\t\t} catch (syncError) {\n\t\t\trollbackOperation();\n\t\t\tthrow syncError;\n\t\t}\n\t}\n\n\t/**\n\t * Subscribe to exercises changes (for backwards compatibility)\n\t * With Legend State, the observable itself provides real-time updates\n\t * Note: uid parameter is kept for backwards compatibility but Supabase user ID is used internally\n\t */\n\tsubscribeToExercises(uid: string, callback: (exercises: Exercise[]) => void): () => void {\n\t\t// Use Legend State's observe method for reactive updates with Supabase user filtering\n\t\treturn observe(() => {\n\t\t\tconst currentUser = user$.get();\n\t\t\tif (!currentUser) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst filteredExercises = exercises$.get().filter(ex => ex.user_id === currentUser.id);\n\t\t\tcallback(filteredExercises);\n\t\t});\n\t}\n\n\t/**\n\t * Legacy methods for backwards compatibility with tests\n\t */\n\n\n\n\t/**\n\t * New methods for offline-first capabilities\n\t */\n\n\t/**\n\t * Check if we're currently online and syncing\n\t */\n\tisSyncing(): boolean {\n\t\treturn syncHelpers.isSyncing();\n\t}\n\n\t/**\n\t * Check online status\n\t */\n\tisOnline(): boolean {\n\t\treturn syncHelpers.isOnline();\n\t}\n\n\t/**\n\t * Get count of pending changes waiting to sync\n\t */\n\tgetPendingChangesCount(): number {\n\t\treturn syncHelpers.getPendingChangesCount();\n\t}\n\n\t/**\n\t * Force manual sync (useful for pull-to-refresh)\n\t */\n\tasync forceSync(): Promise<void> {\n\t\tawait syncHelpers.forceSync();\n\t}\n\n\t/**\n\t * Check if there are sync errors\n\t */\n\thasErrors(): boolean {\n\t\treturn syncHelpers.hasErrors();\n\t}\n\n\t/**\n\t * Get current sync error message\n\t */\n\tgetErrorMessage(): string | null {\n\t\treturn syncHelpers.getErrorMessage() ?? null;\n\t}\n}"],"mappings":"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","ignoreList":[]}