87822ddc0945a9f2e708d08778ba984a
_getJestObj().mock('@/lib/data/supabase/SupabaseClient');
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig');
_getJestObj().mock('@/lib/models/Exercise');
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid-123';
    })
  };
});
_getJestObj().mock('@legendapp/state', function () {
  return {
    Observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _SupabaseExerciseRepo = require("@/lib/repo/SupabaseExerciseRepo");
var _Exercise = require("@/lib/models/Exercise");
var _SupabaseClient = require("@/lib/data/supabase/SupabaseClient");
var _store = require("@/lib/data/store");
var _syncConfig = require("@/lib/data/sync/syncConfig");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SupabaseExerciseRepo', function () {
  var repo;
  var testUserId = 'test-user-123';
  var testExerciseId = 'test-exercise-123';
  var testExercise = {
    id: testExerciseId,
    name: 'Test Exercise',
    user_id: testUserId,
    created_at: '2023-01-01T00:00:00.000Z'
  };
  var mockUser = {
    id: testUserId,
    email: 'test@example.com'
  };
  var mockExercises = [testExercise];
  beforeEach(function () {
    jest.clearAllMocks();
    _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(mockUser);
    _store.exercises$.get.mockReturnValue(mockExercises);
    _store.exercises$.set.mockImplementation();
    _store.user$.get.mockReturnValue(mockUser);
    _Exercise.ExerciseValidator.validateExerciseInput.mockImplementation();
    _Exercise.ExerciseValidator.sanitizeExerciseName.mockImplementation(function (name) {
      return name.trim();
    });
    _syncConfig.syncExerciseToSupabase.mockResolvedValue(undefined);
    _syncConfig.deleteExerciseFromSupabase.mockResolvedValue(undefined);
    _syncConfig.syncHelpers.isSyncing.mockReturnValue(false);
    _syncConfig.syncHelpers.isOnline.mockReturnValue(true);
    _syncConfig.syncHelpers.getPendingChangesCount.mockReturnValue(0);
    _syncConfig.syncHelpers.forceSync.mockResolvedValue(undefined);
    _syncConfig.syncHelpers.hasErrors.mockReturnValue(false);
    _syncConfig.syncHelpers.getErrorMessage.mockReturnValue(null);
    repo = _SupabaseExerciseRepo.SupabaseExerciseRepo.getInstance();
  });
  describe('Singleton Pattern', function () {
    test('getInstance returns the same instance', function () {
      var repo1 = _SupabaseExerciseRepo.SupabaseExerciseRepo.getInstance();
      var repo2 = _SupabaseExerciseRepo.SupabaseExerciseRepo.getInstance();
      expect(repo1).toBe(repo2);
      expect(repo1).toBeInstanceOf(_SupabaseExerciseRepo.SupabaseExerciseRepo);
    });
  });
  describe('addExercise', function () {
    var exerciseInput = {
      name: 'Test Exercise'
    };
    test('successfully adds exercise with optimistic updates', (0, _asyncToGenerator2.default)(function* () {
      yield repo.addExercise(testUserId, exerciseInput);
      expect(_Exercise.ExerciseValidator.validateExerciseInput).toHaveBeenCalledWith(exerciseInput);
      expect(_Exercise.ExerciseValidator.sanitizeExerciseName).toHaveBeenCalledWith(exerciseInput.name);
      expect(_SupabaseClient.supabaseClient.getCurrentUser).toHaveBeenCalled();
      expect(_store.exercises$.get).toHaveBeenCalled();
      expect(_store.exercises$.set).toHaveBeenCalledWith(expect.arrayContaining([expect.objectContaining({
        id: 'test-uuid-123',
        name: exerciseInput.name.trim(),
        user_id: testUserId
      })]));
      expect(_syncConfig.syncExerciseToSupabase).toHaveBeenCalled();
    }));
    test('throws error when user not authenticated', (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(null);
      yield expect(repo.addExercise(testUserId, exerciseInput)).rejects.toThrow('User not authenticated with Supabase');
    }));
    test('throws error when user ID mismatch', (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue({
        id: 'different-user'
      });
      yield expect(repo.addExercise(testUserId, exerciseInput)).rejects.toThrow('User ID mismatch');
    }));
    test('validates exercise input', (0, _asyncToGenerator2.default)(function* () {
      var validationError = new Error('Invalid exercise name');
      _Exercise.ExerciseValidator.validateExerciseInput.mockImplementation(function () {
        throw validationError;
      });
      yield expect(repo.addExercise(testUserId, exerciseInput)).rejects.toThrow('Invalid exercise name');
    }));
    test('rolls back optimistic update on sync failure', (0, _asyncToGenerator2.default)(function* () {
      var syncError = new Error('Sync failed');
      _syncConfig.syncExerciseToSupabase.mockRejectedValue(syncError);
      var originalExercises = [{
        id: 'existing',
        name: 'Existing'
      }];
      _store.exercises$.get.mockReturnValue(originalExercises);
      yield expect(repo.addExercise(testUserId, exerciseInput)).rejects.toThrow('Sync failed');
      expect(_store.exercises$.set).toHaveBeenCalledWith(originalExercises);
    }));
    test('handles user ID consistency check when userId is empty', (0, _asyncToGenerator2.default)(function* () {
      yield repo.addExercise('', exerciseInput);
      expect(_SupabaseClient.supabaseClient.getCurrentUser).toHaveBeenCalled();
      expect(_syncConfig.syncExerciseToSupabase).toHaveBeenCalled();
    }));
  });
  describe('getExerciseById', function () {
    test('returns exercise when found', (0, _asyncToGenerator2.default)(function* () {
      var result = yield repo.getExerciseById(testExerciseId, testUserId);
      expect(_store.exercises$.get).toHaveBeenCalled();
      expect(result).toEqual(testExercise);
    }));
    test('returns undefined when exercise not found', (0, _asyncToGenerator2.default)(function* () {
      _store.exercises$.get.mockReturnValue([]);
      var result = yield repo.getExerciseById('non-existent', testUserId);
      expect(result).toBeUndefined();
    }));
    test('filters exercises by user_id', (0, _asyncToGenerator2.default)(function* () {
      var otherUserExercise = Object.assign({}, testExercise, {
        id: 'other',
        user_id: 'other-user'
      });
      _store.exercises$.get.mockReturnValue([testExercise, otherUserExercise]);
      var result = yield repo.getExerciseById(testExerciseId, testUserId);
      expect(result).toEqual(testExercise);
    }));
  });
  describe('getExercises', function () {
    test('returns computed observable filtered by current user', function () {
      var computed = require('@legendapp/state').computed;
      var mockObservable = {
        subscribe: jest.fn()
      };
      computed.mockReturnValue(mockObservable);
      var result = repo.getExercises(testUserId);
      expect(computed).toHaveBeenCalled();
      expect(result).toBe(mockObservable);
    });
    test('computed function filters exercises by current user', function () {
      var computed = require('@legendapp/state').computed;
      var computedFunction;
      computed.mockImplementation(function (fn) {
        computedFunction = fn;
        return {
          subscribe: jest.fn()
        };
      });
      repo.getExercises(testUserId);
      var result = computedFunction();
      expect(_store.user$.get).toHaveBeenCalled();
      expect(_store.exercises$.get).toHaveBeenCalled();
      expect(result).toEqual(mockExercises);
    });
    test('returns empty array when no current user', function () {
      var computed = require('@legendapp/state').computed;
      var computedFunction;
      computed.mockImplementation(function (fn) {
        computedFunction = fn;
        return {
          subscribe: jest.fn()
        };
      });
      _store.user$.get.mockReturnValue(null);
      repo.getExercises(testUserId);
      var result = computedFunction();
      expect(result).toEqual([]);
    });
  });
  describe('deleteExercise', function () {
    test('successfully deletes exercise with optimistic update', (0, _asyncToGenerator2.default)(function* () {
      yield repo.deleteExercise(testUserId, testExerciseId);
      expect(_SupabaseClient.supabaseClient.getCurrentUser).toHaveBeenCalled();
      expect(_store.exercises$.get).toHaveBeenCalled();
      expect(_store.exercises$.set).toHaveBeenCalledWith([]);
      expect(_syncConfig.deleteExerciseFromSupabase).toHaveBeenCalledWith(testExerciseId, testUserId);
    }));
    test('validates exerciseId parameter', (0, _asyncToGenerator2.default)(function* () {
      yield expect(repo.deleteExercise(testUserId, '')).rejects.toThrow('Valid exerciseId is required');
      yield expect(repo.deleteExercise(testUserId, '   ')).rejects.toThrow('Valid exerciseId is required');
      yield expect(repo.deleteExercise(testUserId, null)).rejects.toThrow('Valid exerciseId is required');
    }));
    test('throws error when user not authenticated', (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(null);
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('User not authenticated with Supabase');
    }));
    test('throws error when user ID mismatch', (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue({
        id: 'different-user'
      });
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('User ID mismatch');
    }));
    test('rolls back optimistic update on sync failure', (0, _asyncToGenerator2.default)(function* () {
      var syncError = new Error('Delete sync failed');
      _syncConfig.deleteExerciseFromSupabase.mockRejectedValue(syncError);
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('Delete sync failed');
      expect(_store.exercises$.set).toHaveBeenCalledWith(mockExercises);
    }));
    test('only deletes exercises matching both exerciseId and user_id', (0, _asyncToGenerator2.default)(function* () {
      var otherUserExercise = Object.assign({}, testExercise, {
        id: testExerciseId,
        user_id: 'other-user'
      });
      var userExercises = [testExercise, otherUserExercise];
      _store.exercises$.get.mockReturnValue(userExercises);
      yield repo.deleteExercise(testUserId, testExerciseId);
      expect(_store.exercises$.set).toHaveBeenCalledWith([otherUserExercise]);
    }));
  });
  describe('subscribeToExercises', function () {
    test('sets up observable subscription with user filtering', function () {
      var observe = require('@legendapp/state').observe;
      var mockUnsubscribe = jest.fn();
      var callback = jest.fn();
      observe.mockReturnValue(mockUnsubscribe);
      var result = repo.subscribeToExercises(testUserId, callback);
      expect(observe).toHaveBeenCalled();
      expect(result).toBe(mockUnsubscribe);
    });
    test('observe function calls callback with filtered exercises', function () {
      var observe = require('@legendapp/state').observe;
      var observeFunction;
      observe.mockImplementation(function (fn) {
        observeFunction = fn;
        return jest.fn();
      });
      var callback = jest.fn();
      repo.subscribeToExercises(testUserId, callback);
      observeFunction();
      expect(_store.user$.get).toHaveBeenCalled();
      expect(_store.exercises$.get).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledWith(mockExercises);
    });
    test('calls callback with empty array when no current user', function () {
      var observe = require('@legendapp/state').observe;
      var observeFunction;
      observe.mockImplementation(function (fn) {
        observeFunction = fn;
        return jest.fn();
      });
      _store.user$.get.mockReturnValue(null);
      var callback = jest.fn();
      repo.subscribeToExercises(testUserId, callback);
      observeFunction();
      expect(callback).toHaveBeenCalledWith([]);
    });
  });
  describe('Offline-first capabilities', function () {
    test('isSyncing delegates to syncHelpers', function () {
      var result = repo.isSyncing();
      expect(_syncConfig.syncHelpers.isSyncing).toHaveBeenCalled();
      expect(result).toBe(false);
    });
    test('isOnline delegates to syncHelpers', function () {
      var result = repo.isOnline();
      expect(_syncConfig.syncHelpers.isOnline).toHaveBeenCalled();
      expect(result).toBe(true);
    });
    test('getPendingChangesCount delegates to syncHelpers', function () {
      var result = repo.getPendingChangesCount();
      expect(_syncConfig.syncHelpers.getPendingChangesCount).toHaveBeenCalled();
      expect(result).toBe(0);
    });
    test('forceSync delegates to syncHelpers', (0, _asyncToGenerator2.default)(function* () {
      yield repo.forceSync();
      expect(_syncConfig.syncHelpers.forceSync).toHaveBeenCalled();
    }));
    test('hasErrors delegates to syncHelpers', function () {
      var result = repo.hasErrors();
      expect(_syncConfig.syncHelpers.hasErrors).toHaveBeenCalled();
      expect(result).toBe(false);
    });
    test('getErrorMessage delegates to syncHelpers', function () {
      var result = repo.getErrorMessage();
      expect(_syncConfig.syncHelpers.getErrorMessage).toHaveBeenCalled();
      expect(result).toBe(null);
    });
    test('getErrorMessage returns null when syncHelpers returns undefined', function () {
      _syncConfig.syncHelpers.getErrorMessage.mockReturnValue(undefined);
      var result = repo.getErrorMessage();
      expect(result).toBe(null);
    });
  });
  describe('Error handling', function () {
    test('addExercise logs and re-throws errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Test error');
      _SupabaseClient.supabaseClient.getCurrentUser.mockRejectedValue(error);
      yield expect(repo.addExercise(testUserId, {
        name: 'Test'
      })).rejects.toThrow('Test error');
    }));
    test('deleteExercise logs and re-throws errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Test error');
      _SupabaseClient.supabaseClient.getCurrentUser.mockRejectedValue(error);
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('Test error');
    }));
  });
  describe('Error recovery', function () {
    test('sync failure rolls back optimistic update for addExercise', (0, _asyncToGenerator2.default)(function* () {
      var syncError = new Error('Sync failed');
      _syncConfig.syncExerciseToSupabase.mockRejectedValue(syncError);
      var initialExercises = _store.exercises$.get();
      yield expect(repo.addExercise(testUserId, {
        name: 'Test'
      })).rejects.toThrow('Sync failed');
      expect(_store.exercises$.get()).toEqual(initialExercises);
    }));
    test('sync failure rolls back optimistic update for deleteExercise', (0, _asyncToGenerator2.default)(function* () {
      var syncError = new Error('Delete sync failed');
      _syncConfig.deleteExerciseFromSupabase.mockRejectedValue(syncError);
      var initialExercises = _store.exercises$.get();
      yield expect(repo.deleteExercise(testUserId, testExerciseId)).rejects.toThrow('Delete sync failed');
      expect(_store.exercises$.get()).toEqual(initialExercises);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,