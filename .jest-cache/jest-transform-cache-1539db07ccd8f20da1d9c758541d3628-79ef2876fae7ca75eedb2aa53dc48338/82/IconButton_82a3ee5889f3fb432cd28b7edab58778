95c095361af63a59a623700b3c1ba456
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "iconColor", "containerColor", "rippleColor", "size", "accessibilityLabel", "disabled", "onPress", "selected", "animated", "mode", "style", "theme", "testID", "loading", "contentStyle"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _ActivityIndicator = _interopRequireDefault(require("../ActivityIndicator"));
var _CrossFadeIcon = _interopRequireDefault(require("../CrossFadeIcon"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var PADDING = 8;
var IconButton = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
    customIconColor = _ref.iconColor,
    customContainerColor = _ref.containerColor,
    customRippleColor = _ref.rippleColor,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    accessibilityLabel = _ref.accessibilityLabel,
    disabled = _ref.disabled,
    onPress = _ref.onPress,
    _ref$selected = _ref.selected,
    selected = _ref$selected === void 0 ? false : _ref$selected,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? false : _ref$animated,
    mode = _ref.mode,
    style = _ref.style,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'icon-button' : _ref$testID,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    contentStyle = _ref.contentStyle,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3;
  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
  var _ref2 = (0, _utils.getIconButtonColor)({
      theme: theme,
      disabled: disabled,
      selected: selected,
      mode: mode,
      customIconColor: customIconColor,
      customContainerColor: customContainerColor,
      customRippleColor: customRippleColor
    }),
    iconColor = _ref2.iconColor,
    rippleColor = _ref2.rippleColor,
    backgroundColor = _ref2.backgroundColor,
    borderColor = _ref2.borderColor;
  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;
  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
    _ref3$borderWidth = _ref3.borderWidth,
    borderWidth = _ref3$borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref3$borderWidth,
    _ref3$borderRadius = _ref3.borderRadius,
    borderRadius = _ref3$borderRadius === void 0 ? buttonSize / 2 : _ref3$borderRadius;
  var borderStyles = {
    borderWidth: borderWidth,
    borderRadius: borderRadius,
    borderColor: borderColor
  };
  return React.createElement(_Surface.default, _extends({
    ref: ref,
    testID: `${testID}-container`,
    style: [{
      backgroundColor: backgroundColor,
      width: buttonSize,
      height: buttonSize
    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style],
    container: true
  }, isV3 && {
    elevation: 0
  }), React.createElement(_TouchableRipple.default, _extends({
    borderless: true,
    centered: true,
    onPress: onPress,
    rippleColor: rippleColor,
    accessibilityLabel: accessibilityLabel,
    style: [styles.touchable, contentStyle],
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      disabled: disabled
    },
    disabled: disabled,
    hitSlop: _TouchableRipple.default.supported ? {
      top: 10,
      left: 10,
      bottom: 10,
      right: 10
    } : {
      top: 6,
      left: 6,
      bottom: 6,
      right: 6
    },
    testID: testID
  }, rest), loading ? React.createElement(_ActivityIndicator.default, {
    size: size,
    color: iconColor
  }) : React.createElement(IconComponent, {
    color: iconColor,
    source: icon,
    size: size
  })));
});
var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden',
    margin: 6,
    elevation: 0
  },
  touchable: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  disabled: {
    opacity: 0.32
  }
});
var _default = exports.default = IconButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,