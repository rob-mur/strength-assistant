2906af3a85d4206191a16fbe71d1fe57
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileExtension = getFileExtension;
exports.getFilename = getFilename;
exports.getManifestBaseUrl = getManifestBaseUrl;
function getFilename(url) {
  var _URL = new URL(url, 'https://e'),
    pathname = _URL.pathname,
    searchParams = _URL.searchParams;
  if (__DEV__) {
    if (searchParams.has('unstable_path')) {
      var encodedFilePath = decodeURIComponent(searchParams.get('unstable_path'));
      return getBasename(encodedFilePath);
    }
  }
  return getBasename(pathname);
}
function getBasename(pathname) {
  return pathname.substring(pathname.lastIndexOf('/') + 1);
}
function getFileExtension(url) {
  var filename = getFilename(url);
  var dotIndex = filename.lastIndexOf('.');
  return dotIndex > 0 ? filename.substring(dotIndex) : '';
}
function getManifestBaseUrl(manifestUrl) {
  var urlObject = new URL(manifestUrl);
  var nextProtocol = urlObject.protocol;
  if (nextProtocol === 'exp:') {
    nextProtocol = 'http:';
  } else if (nextProtocol === 'exps:') {
    nextProtocol = 'https:';
  }
  urlObject.protocol = nextProtocol;
  var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);
  urlObject.pathname = directory;
  urlObject.search = '';
  urlObject.hash = '';
  return urlObject.protocol !== nextProtocol ? urlObject.href.replace(urlObject.protocol, nextProtocol) : urlObject.href;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRGaWxlbmFtZSIsInVybCIsIl9VUkwiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsIl9fREVWX18iLCJoYXMiLCJlbmNvZGVkRmlsZVBhdGgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJnZXQiLCJnZXRCYXNlbmFtZSIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiZ2V0RmlsZUV4dGVuc2lvbiIsImZpbGVuYW1lIiwiZG90SW5kZXgiLCJnZXRNYW5pZmVzdEJhc2VVcmwiLCJtYW5pZmVzdFVybCIsInVybE9iamVjdCIsIm5leHRQcm90b2NvbCIsInByb3RvY29sIiwiZGlyZWN0b3J5Iiwic2VhcmNoIiwiaGFzaCIsImhyZWYiLCJyZXBsYWNlIl0sInNvdXJjZXMiOlsiLi4vc3JjL0Fzc2V0VXJpcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0RmlsZW5hbWUodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwodXJsLCAnaHR0cHM6Ly9lJyk7XG5cbiAgLy8gV2hlbiBhdHRhY2hlZCB0byBhIGRldiBzZXJ2ZXIsIHdlIHVzZSBgdW5zdGFibGVfcGF0aGAgdG8gcmVwcmVzZW50IHRoZSBmaWxlIHBhdGguIFRoaXMgZW5zdXJlc1xuICAvLyB0aGUgZmlsZSBuYW1lIGlzIG5vdCBjYW5vbmljYWxpemVkIGJ5IHRoZSBicm93c2VyLlxuICAvLyBOT1RFKEV2YW5CYWNvbik6IFRoaXMgaXMgdGVjaG5pY2FsbHkgbm90IHRpZWQgdG8gYF9fREVWX19gIGFzIGl0J3MgcG9zc2libGUgdG8gdXNlIHRoaXMgd2hpbGUgYnVuZGxpbmcgaW4gcHJvZHVjdGlvblxuICAvLyBtb2RlLlxuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChzZWFyY2hQYXJhbXMuaGFzKCd1bnN0YWJsZV9wYXRoJykpIHtcbiAgICAgIGNvbnN0IGVuY29kZWRGaWxlUGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChzZWFyY2hQYXJhbXMuZ2V0KCd1bnN0YWJsZV9wYXRoJykhKTtcbiAgICAgIHJldHVybiBnZXRCYXNlbmFtZShlbmNvZGVkRmlsZVBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRCYXNlbmFtZShwYXRobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VuYW1lKHBhdGhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcGF0aG5hbWUuc3Vic3RyaW5nKHBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVFeHRlbnNpb24odXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBmaWxlbmFtZSA9IGdldEZpbGVuYW1lKHVybCk7XG4gIGNvbnN0IGRvdEluZGV4ID0gZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgLy8gSWdub3JlIGxlYWRpbmcgZG90cyBmb3IgaGlkZGVuIGZpbGVzXG4gIHJldHVybiBkb3RJbmRleCA+IDAgPyBmaWxlbmFtZS5zdWJzdHJpbmcoZG90SW5kZXgpIDogJyc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSBVUkwgZnJvbSBhIG1hbmlmZXN0J3MgVVJMLiBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBtYW5pZmVzdCBob3N0ZWQgYXRcbiAqIGh0dHBzOi8vZXhhbXBsZS5jb20vYXBwL21hbmlmZXN0Lmpzb24sIHRoZSBiYXNlIFVSTCB3b3VsZCBiZSBodHRwczovL2V4YW1wbGUuY29tL2FwcC8uIFF1ZXJ5XG4gKiBwYXJhbWV0ZXJzIGFuZCBmcmFnbWVudHMgYWxzbyBhcmUgcmVtb3ZlZC5cbiAqXG4gKiBGb3IgYW4gRXhwby1ob3N0ZWQgcHJvamVjdCB3aXRoIGEgbWFuaWZlc3QgaG9zdGVkIGF0IGh0dHBzOi8vZXhwLmhvc3QvQHVzZXIvcHJvamVjdC9pbmRleC5leHAsIHRoZVxuICogYmFzZSBVUkwgd291bGQgYmUgaHR0cHM6Ly9leHAuaG9zdC9AdXNlci9wcm9qZWN0LlxuICpcbiAqIFdlIGFsc28gbm9ybWFsaXplIHRoZSBcImV4cFwiIHByb3RvY29sIHRvIFwiaHR0cFwiIHRvIGhhbmRsZSBpbnRlcm5hbCBVUkxzIHdpdGggdGhlIEV4cG8gc2NoZW1lcyB1c2VkXG4gKiB0byB0ZWxsIHRoZSBPUyB0byBvcGVuIHRoZSBVUkxzIGluIHRoZSB0aGUgRXhwbyBjbGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYW5pZmVzdEJhc2VVcmwobWFuaWZlc3RVcmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHVybE9iamVjdCA9IG5ldyBVUkwobWFuaWZlc3RVcmwpO1xuXG4gIGxldCBuZXh0UHJvdG9jb2wgPSB1cmxPYmplY3QucHJvdG9jb2w7XG4gIC8vIENoYW5nZSB0aGUgc2NoZW1lIHRvIGh0dHAocykgaWYgaXQgaXMgZXhwKHMpXG4gIGlmIChuZXh0UHJvdG9jb2wgPT09ICdleHA6Jykge1xuICAgIG5leHRQcm90b2NvbCA9ICdodHRwOic7XG4gIH0gZWxzZSBpZiAobmV4dFByb3RvY29sID09PSAnZXhwczonKSB7XG4gICAgbmV4dFByb3RvY29sID0gJ2h0dHBzOic7XG4gIH1cbiAgdXJsT2JqZWN0LnByb3RvY29sID0gbmV4dFByb3RvY29sO1xuXG4gIC8vIFRyaW0gZmlsZW5hbWUsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBmcmFnbWVudCwgaWYgYW55XG4gIGNvbnN0IGRpcmVjdG9yeSA9IHVybE9iamVjdC5wYXRobmFtZS5zdWJzdHJpbmcoMCwgdXJsT2JqZWN0LnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgdXJsT2JqZWN0LnBhdGhuYW1lID0gZGlyZWN0b3J5O1xuICB1cmxPYmplY3Quc2VhcmNoID0gJyc7XG4gIHVybE9iamVjdC5oYXNoID0gJyc7XG5cbiAgLy8gVGhlIFVSTCBzcGVjIGRvZXNuJ3QgYWxsb3cgZm9yIGNoYW5naW5nIHRoZSBwcm90b2NvbCB0byBgaHR0cGAgb3IgYGh0dHBzYFxuICAvLyB3aXRob3V0IGEgcG9ydCBzZXQgc28gaW5zdGVhZCwgd2UnbGwganVzdCBzd2FwIHRoZSBwcm90b2NvbCBtYW51YWxseS5cbiAgcmV0dXJuIHVybE9iamVjdC5wcm90b2NvbCAhPT0gbmV4dFByb3RvY29sXG4gICAgPyB1cmxPYmplY3QuaHJlZi5yZXBsYWNlKHVybE9iamVjdC5wcm90b2NvbCwgbmV4dFByb3RvY29sKVxuICAgIDogdXJsT2JqZWN0LmhyZWY7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFNLFNBQVVBLFdBQVdBLENBQUNDLEdBQVc7RUFDckMsSUFBQUMsSUFBQSxHQUFtQyxJQUFJQyxHQUFHLENBQUNGLEdBQUcsRUFBRSxXQUFXLENBQUM7SUFBcERHLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO0lBQUVDLFlBQVksR0FBQUgsSUFBQSxDQUFaRyxZQUFZO0VBTTlCLElBQUlDLE9BQU8sRUFBRTtJQUNYLElBQUlELFlBQVksQ0FBQ0UsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFO01BQ3JDLElBQU1DLGVBQWUsR0FBR0Msa0JBQWtCLENBQUNKLFlBQVksQ0FBQ0ssR0FBRyxDQUFDLGVBQWUsQ0FBRSxDQUFDO01BQzlFLE9BQU9DLFdBQVcsQ0FBQ0gsZUFBZSxDQUFDO0lBQ3JDO0VBQ0Y7RUFFQSxPQUFPRyxXQUFXLENBQUNQLFFBQVEsQ0FBQztBQUM5QjtBQUVBLFNBQVNPLFdBQVdBLENBQUNQLFFBQWdCO0VBQ25DLE9BQU9BLFFBQVEsQ0FBQ1EsU0FBUyxDQUFDUixRQUFRLENBQUNTLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUQ7QUFFTSxTQUFVQyxnQkFBZ0JBLENBQUNiLEdBQVc7RUFDMUMsSUFBTWMsUUFBUSxHQUFHZixXQUFXLENBQUNDLEdBQUcsQ0FBQztFQUNqQyxJQUFNZSxRQUFRLEdBQUdELFFBQVEsQ0FBQ0YsV0FBVyxDQUFDLEdBQUcsQ0FBQztFQUUxQyxPQUFPRyxRQUFRLEdBQUcsQ0FBQyxHQUFHRCxRQUFRLENBQUNILFNBQVMsQ0FBQ0ksUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUN6RDtBQWFNLFNBQVVDLGtCQUFrQkEsQ0FBQ0MsV0FBbUI7RUFDcEQsSUFBTUMsU0FBUyxHQUFHLElBQUloQixHQUFHLENBQUNlLFdBQVcsQ0FBQztFQUV0QyxJQUFJRSxZQUFZLEdBQUdELFNBQVMsQ0FBQ0UsUUFBUTtFQUVyQyxJQUFJRCxZQUFZLEtBQUssTUFBTSxFQUFFO0lBQzNCQSxZQUFZLEdBQUcsT0FBTztFQUN4QixDQUFDLE1BQU0sSUFBSUEsWUFBWSxLQUFLLE9BQU8sRUFBRTtJQUNuQ0EsWUFBWSxHQUFHLFFBQVE7RUFDekI7RUFDQUQsU0FBUyxDQUFDRSxRQUFRLEdBQUdELFlBQVk7RUFHakMsSUFBTUUsU0FBUyxHQUFHSCxTQUFTLENBQUNmLFFBQVEsQ0FBQ1EsU0FBUyxDQUFDLENBQUMsRUFBRU8sU0FBUyxDQUFDZixRQUFRLENBQUNTLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDMUZNLFNBQVMsQ0FBQ2YsUUFBUSxHQUFHa0IsU0FBUztFQUM5QkgsU0FBUyxDQUFDSSxNQUFNLEdBQUcsRUFBRTtFQUNyQkosU0FBUyxDQUFDSyxJQUFJLEdBQUcsRUFBRTtFQUluQixPQUFPTCxTQUFTLENBQUNFLFFBQVEsS0FBS0QsWUFBWSxHQUN0Q0QsU0FBUyxDQUFDTSxJQUFJLENBQUNDLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDRSxRQUFRLEVBQUVELFlBQVksQ0FBQyxHQUN4REQsU0FBUyxDQUFDTSxJQUFJO0FBQ3BCIiwiaWdub3JlTGlzdCI6W119