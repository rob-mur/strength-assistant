02347003ca01dbbe95eb77bdbca15edb
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase', function () {
  return {
    db: {},
    auth: {}
  };
});
_getJestObj().mock('@/lib/data/firebase/logger', function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn(),
      warn: jest.fn(),
      debug: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    query: jest.fn(),
    where: jest.fn(),
    onSnapshot: jest.fn(),
    addDoc: jest.fn(),
    doc: jest.fn(),
    deleteDoc: jest.fn(),
    orderBy: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _FirebaseExerciseRepo = require("@/lib/repo/FirebaseExerciseRepo");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('FirebaseExerciseRepo - New Methods', function () {
  var repo;
  var testUserId = 'test-user-123';
  beforeEach(function () {
    jest.clearAllMocks();
    try {
      repo = _FirebaseExerciseRepo.FirebaseExerciseRepo.getInstance();
    } catch (error) {}
  });
  describe('getExerciseById', function () {
    test('is defined and has correct signature', function () {
      expect(_FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.getExerciseById).toBeDefined();
      expect(typeof _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.getExerciseById).toBe('function');
    });
    test('method exists with proper async signature', (0, _asyncToGenerator2.default)(function* () {
      var mockRepo = {
        getExerciseById: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.getExerciseById.bind({
          getExercises: jest.fn().mockReturnValue({
            get: function get() {
              return [];
            }
          })
        })
      };
      var result = yield mockRepo.getExerciseById('test-id', testUserId);
      expect(result).toBeUndefined();
    }));
  });
  describe('Offline-first capability methods', function () {
    test('isSyncing returns false (Firebase handles sync automatically)', function () {
      var mockRepo = {
        isSyncing: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.isSyncing
      };
      expect(mockRepo.isSyncing()).toBe(false);
    });
    test('isOnline method exists and returns boolean', function () {
      var mockRepo = {
        isOnline: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.isOnline
      };
      expect(typeof mockRepo.isOnline).toBe('function');
      var result = mockRepo.isOnline();
      expect(typeof result).toBe('boolean');
      expect([true, false]).toContain(result);
    });
    test('getPendingChangesCount returns 0 (Firebase handles sync automatically)', function () {
      var mockRepo = {
        getPendingChangesCount: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.getPendingChangesCount
      };
      expect(mockRepo.getPendingChangesCount()).toBe(0);
    });
    test('forceSync resolves immediately (Firebase handles sync automatically)', (0, _asyncToGenerator2.default)(function* () {
      var mockRepo = {
        forceSync: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.forceSync
      };
      yield expect(mockRepo.forceSync()).resolves.toBeUndefined();
    }));
    test('hasErrors returns false (Firebase has different error handling)', function () {
      var mockRepo = {
        hasErrors: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.hasErrors
      };
      expect(mockRepo.hasErrors()).toBe(false);
    });
    test('getErrorMessage returns null (Firebase has different error handling)', function () {
      var mockRepo = {
        getErrorMessage: _FirebaseExerciseRepo.FirebaseExerciseRepo.prototype.getErrorMessage
      };
      expect(mockRepo.getErrorMessage()).toBe(null);
    });
  });
  describe('Logger usage', function () {
    test('methods use logger with correct platform property', function () {
      var _require = require('@/lib/data/firebase/logger'),
        logger = _require.logger;
      expect(logger.info).toBeDefined();
      expect(logger.error).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,