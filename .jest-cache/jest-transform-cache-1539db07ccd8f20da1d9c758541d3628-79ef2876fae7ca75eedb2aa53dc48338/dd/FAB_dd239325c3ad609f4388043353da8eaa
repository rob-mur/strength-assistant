237e971a1af0a84fb348b97093ea90c0
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "label", "background", "accessibilityLabel", "accessibilityState", "animated", "color", "rippleColor", "disabled", "onPress", "onLongPress", "delayLongPress", "theme", "style", "visible", "uppercase", "loading", "testID", "size", "customSize", "mode", "variant", "labelMaxFontSizeMultiplier"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FAB = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _ActivityIndicator = _interopRequireDefault(require("../ActivityIndicator"));
var _CrossFadeIcon = _interopRequireDefault(require("../CrossFadeIcon"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var FAB = exports.FAB = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
    label = _ref.label,
    background = _ref.background,
    _ref$accessibilityLab = _ref.accessibilityLabel,
    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,
    accessibilityState = _ref.accessibilityState,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? true : _ref$animated,
    customColor = _ref.color,
    customRippleColor = _ref.rippleColor,
    disabled = _ref.disabled,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    delayLongPress = _ref.delayLongPress,
    themeOverrides = _ref.theme,
    style = _ref.style,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? true : _ref$visible,
    uppercaseProp = _ref.uppercase,
    loading = _ref.loading,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'fab' : _ref$testID,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    customSize = _ref.customSize,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'elevated' : _ref$mode,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
    visibility = _React$useRef.current;
  var isV3 = theme.isV3,
    animation = theme.animation;
  var scale = animation.scale;
  React.useEffect(function () {
    if (visible) {
      _reactNative.Animated.timing(visibility, {
        toValue: 1,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.timing(visibility, {
        toValue: 0,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  }, [visible, scale, visibility]);
  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
  var fabStyle = (0, _utils.getFabStyle)({
    customSize: customSize,
    size: size,
    theme: theme
  });
  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
    _ref2$borderRadius = _ref2.borderRadius,
    borderRadius = _ref2$borderRadius === void 0 ? fabStyle.borderRadius : _ref2$borderRadius,
    customBackgroundColor = _ref2.backgroundColor;
  var _ref3 = (0, _utils.getFABColors)({
      theme: theme,
      variant: variant,
      disabled: disabled,
      customColor: customColor,
      customBackgroundColor: customBackgroundColor,
      customRippleColor: customRippleColor
    }),
    backgroundColor = _ref3.backgroundColor,
    foregroundColor = _ref3.foregroundColor,
    rippleColor = _ref3.rippleColor;
  var isLargeSize = size === 'large';
  var isFlatMode = mode === 'flat';
  var iconSize = isLargeSize ? 36 : 24;
  var loadingIndicatorSize = isLargeSize ? 24 : 18;
  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
  var extendedStyle = (0, _utils.getExtendedFabStyle)({
    customSize: customSize,
    theme: theme
  });
  var textStyle = Object.assign({
    color: foregroundColor
  }, font);
  var md3Elevation = isFlatMode || disabled ? 0 : 3;
  var newAccessibilityState = Object.assign({}, accessibilityState, {
    disabled: disabled
  });
  return React.createElement(_Surface.default, _extends({
    ref: ref
  }, rest, {
    style: [{
      borderRadius: borderRadius,
      backgroundColor: backgroundColor,
      opacity: visibility,
      transform: [{
        scale: visibility
      }]
    }, !isV3 && styles.elevated, !isV3 && disabled && styles.disabled, style],
    pointerEvents: visible ? 'auto' : 'none',
    testID: `${testID}-container`
  }, isV3 && {
    elevation: md3Elevation
  }, {
    container: true
  }), React.createElement(_TouchableRipple.default, _extends({
    borderless: true,
    background: background,
    onPress: onPress,
    onLongPress: onLongPress,
    delayLongPress: delayLongPress,
    rippleColor: rippleColor,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: newAccessibilityState,
    testID: testID,
    style: {
      borderRadius: borderRadius
    }
  }, rest), React.createElement(_reactNative.View, {
    style: [styles.content, label ? extendedStyle : fabStyle],
    testID: `${testID}-content`,
    pointerEvents: "none"
  }, icon && loading !== true ? React.createElement(IconComponent, {
    source: icon,
    size: customSize ? customSize / 2 : iconSize,
    color: foregroundColor
  }) : null, loading ? React.createElement(_ActivityIndicator.default, {
    size: customSize ? customSize / 2 : loadingIndicatorSize,
    color: foregroundColor
  }) : null, label ? React.createElement(_Text.default, {
    variant: "labelLarge",
    selectable: false,
    testID: `${testID}-text`,
    style: [styles.label, uppercase && styles.uppercaseLabel, textStyle],
    maxFontSizeMultiplier: labelMaxFontSizeMultiplier
  }, label) : null)));
});
var styles = _reactNative.StyleSheet.create({
  elevated: {
    elevation: 6
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  label: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  },
  disabled: {
    elevation: 0
  }
});
var _default = exports.default = FAB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,