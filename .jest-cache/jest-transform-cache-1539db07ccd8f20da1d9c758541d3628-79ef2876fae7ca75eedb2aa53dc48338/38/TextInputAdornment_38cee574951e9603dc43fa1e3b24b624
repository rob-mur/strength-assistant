5ec35929f8e6b871c311e94c9ef76c2b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAdornmentConfig = getAdornmentConfig;
exports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;
var _react = _interopRequireDefault(require("react"));
var _enums = require("./enums");
var _TextInputAffix = _interopRequireWildcard(require("./TextInputAffix"));
var _TextInputIcon = _interopRequireWildcard(require("./TextInputIcon"));
var _helpers = require("../helpers");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function getAdornmentConfig(_ref) {
  var left = _ref.left,
    right = _ref.right;
  var adornmentConfig = [];
  if (left || right) {
    [{
      side: _enums.AdornmentSide.Left,
      adornment: left
    }, {
      side: _enums.AdornmentSide.Right,
      adornment: right
    }].forEach(function (_ref2) {
      var side = _ref2.side,
        adornment = _ref2.adornment;
      if (adornment && _react.default.isValidElement(adornment)) {
        var type;
        if (adornment.type === _TextInputAffix.default) {
          type = _enums.AdornmentType.Affix;
        } else if (adornment.type === _TextInputIcon.default) {
          type = _enums.AdornmentType.Icon;
        }
        adornmentConfig.push({
          side: side,
          type: type
        });
      }
    });
  }
  return adornmentConfig;
}
function getAdornmentStyleAdjustmentForNativeInput(_ref3) {
  var adornmentConfig = _ref3.adornmentConfig,
    leftAffixWidth = _ref3.leftAffixWidth,
    rightAffixWidth = _ref3.rightAffixWidth,
    paddingHorizontal = _ref3.paddingHorizontal,
    _ref3$inputOffset = _ref3.inputOffset,
    inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,
    mode = _ref3.mode,
    isV3 = _ref3.isV3;
  var _ref4 = (0, _helpers.getConstants)(isV3),
    OUTLINED_INPUT_OFFSET = _ref4.OUTLINED_INPUT_OFFSET,
    ADORNMENT_OFFSET = _ref4.ADORNMENT_OFFSET;
  if (adornmentConfig.length) {
    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref5) {
      var type = _ref5.type,
        side = _ref5.side;
      var isLeftSide = side === _enums.AdornmentSide.Left;
      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;
      var paddingKey = `padding${captalize(side)}`;
      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
      var offset = affixWidth + padding;
      var isAffix = type === _enums.AdornmentType.Affix;
      var marginKey = `margin${captalize(side)}`;
      return (0, _defineProperty2.default)((0, _defineProperty2.default)({}, marginKey, isAffix ? 0 : offset), paddingKey, isAffix ? offset : inputOffset);
    });
    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {
      return Object.assign({}, mergedStyles, currentStyle);
    }, {});
    return allStyleAdjustmentsMerged;
  } else {
    return [{}];
  }
}
var captalize = function captalize(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
};
var TextInputAdornment = function TextInputAdornment(_ref7) {
  var adornmentConfig = _ref7.adornmentConfig,
    left = _ref7.left,
    right = _ref7.right,
    onAffixChange = _ref7.onAffixChange,
    textStyle = _ref7.textStyle,
    visible = _ref7.visible,
    topPosition = _ref7.topPosition,
    isTextInputFocused = _ref7.isTextInputFocused,
    forceFocus = _ref7.forceFocus,
    paddingHorizontal = _ref7.paddingHorizontal,
    maxFontSizeMultiplier = _ref7.maxFontSizeMultiplier,
    theme = _ref7.theme,
    disabled = _ref7.disabled;
  if (adornmentConfig.length) {
    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref8) {
      var type = _ref8.type,
        side = _ref8.side;
      var inputAdornmentComponent;
      if (side === _enums.AdornmentSide.Left) {
        inputAdornmentComponent = left;
      } else if (side === _enums.AdornmentSide.Right) {
        inputAdornmentComponent = right;
      }
      var commonProps = {
        side: side,
        testID: `${side}-${type}-adornment`,
        isTextInputFocused: isTextInputFocused,
        paddingHorizontal: paddingHorizontal,
        disabled: disabled
      };
      if (type === _enums.AdornmentType.Icon) {
        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {
          theme: theme,
          key: side,
          icon: inputAdornmentComponent,
          topPosition: topPosition[_enums.AdornmentType.Icon],
          forceFocus: forceFocus
        }));
      } else if (type === _enums.AdornmentType.Affix) {
        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {
          key: side,
          topPosition: topPosition[_enums.AdornmentType.Affix][side],
          affix: inputAdornmentComponent,
          textStyle: textStyle,
          onLayout: onAffixChange[side],
          visible: visible,
          maxFontSizeMultiplier: maxFontSizeMultiplier
        }));
      } else {
        return null;
      }
    }));
  } else {
    return null;
  }
};
var _default = exports.default = TextInputAdornment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,