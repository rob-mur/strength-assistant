e5b510693ddd0e84f7033a5bd57889f2
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase/initializer', function () {
  return {
    initializeFirebaseServices: jest.fn(),
    getDb: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/supabase/SupabaseClient', function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig', function () {
  return {
    syncExerciseToSupabase: jest.fn(),
    deleteExerciseFromSupabase: jest.fn(),
    syncHelpers: {
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/models/Exercise', function () {
  return {
    ExerciseValidator: {
      validateExerciseInput: jest.fn(),
      sanitizeExerciseName: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    addDoc: jest.fn(),
    deleteDoc: jest.fn(),
    doc: jest.fn(),
    onSnapshot: jest.fn(),
    query: jest.fn(),
    orderBy: jest.fn()
  };
});
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid';
    })
  };
});
_getJestObj().mock("@/lib/repo/ExerciseRepo");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _useAddExercise = require("@/lib/hooks/useAddExercise");
var _ExerciseRepo = require("@/lib/repo/ExerciseRepo");
var _reactNative = require("@testing-library/react-native");
var _jestMockExtended = require("jest-mock-extended");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRepo = (0, _jestMockExtended.mock)();
describe("useAddExercise", function () {
  beforeEach(function () {
    (0, _jestMockExtended.mockReset)(mockRepo);
    jest.mocked(_ExerciseRepo.ExerciseRepo.getInstance).mockReturnValue(mockRepo);
  });
  test("returns a function that adds an exercise", function () {
    var testUid = "test-user-uid";
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAddExercise.useAddExercise)(testUid);
      }),
      result = _renderHook.result;
    expect(typeof result.current).toBe("function");
  });
  test("calls repo addExercise with correct parameters", (0, _asyncToGenerator2.default)(function* () {
    var testUid = "test-user-uid";
    var testExercise = "Push-ups";
    mockRepo.addExercise.mockResolvedValue(undefined);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAddExercise.useAddExercise)(testUid);
      }),
      result = _renderHook2.result;
    yield result.current(testExercise);
    expect(mockRepo.addExercise).toHaveBeenCalledWith(testUid, {
      name: testExercise
    });
  }));
  test("throws error when uid is empty", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAddExercise.useAddExercise)("");
      }),
      result = _renderHook3.result;
    yield expect(result.current("Push-ups")).rejects.toThrow("User must be authenticated to add exercises");
  }));
  test("propagates repo errors", (0, _asyncToGenerator2.default)(function* () {
    var testUid = "test-user-uid";
    var testError = new Error("Database error");
    mockRepo.addExercise.mockRejectedValue(testError);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAddExercise.useAddExercise)(testUid);
      }),
      result = _renderHook4.result;
    yield expect(result.current("Push-ups")).rejects.toThrow("Database error");
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,