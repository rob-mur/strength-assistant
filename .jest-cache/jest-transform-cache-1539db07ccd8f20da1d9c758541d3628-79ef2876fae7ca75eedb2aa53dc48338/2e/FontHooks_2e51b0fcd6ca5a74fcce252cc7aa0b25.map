{"version":3,"names":["_react","require","_Font","isMapLoaded","map","isLoaded","Object","keys","every","fontFamily","useRuntimeFonts","_useState","useState","_useState2","_slicedToArray2","default","loaded","setLoaded","_useState3","_useState4","error","setError","useEffect","isMounted","loadAsync","then","catch","useStaticFonts","useFonts","exports","window"],"sources":["../src/FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    loadAsync(map)\n      .then(() => {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      })\n      .catch((error) => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * Load a map of fonts at runtime with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n *\n * @example\n * ```tsx\n * const [loaded, error] = useFonts({\n *   'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n * });\n * ```\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AAGA,SAASE,WAAWA,CAACC,GAAwC;EAC3D,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAO,IAAAC,cAAQ,EAACD,GAAG,CAAC;EACtB,CAAC,MAAM;IACL,OAAOE,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,KAAK,CAAC,UAACC,UAAU;MAAA,OAAK,IAAAJ,cAAQ,EAACI,UAAU,CAAC;IAAA,EAAC;EACrE;AACF;AAEA,SAASC,eAAeA,CAACN,GAAwC;EAC/D,IAAAO,SAAA,GAA4B,IAAAC,eAAQ,EAGlCT,WAAW,CAACC,GAAG,CAAC,CACjB;IAAAS,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAJMK,MAAM,GAAAH,UAAA;IAAEI,SAAS,GAAAJ,UAAA;EAKxB,IAAAK,UAAA,GAA0B,IAAAN,eAAQ,EAAe,IAAI,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAA/CE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAAG,gBAAS,EAAC,YAAK;IACb,IAAIC,SAAS,GAAG,IAAI;IAEpB,IAAAC,eAAS,EAACpB,GAAG,CAAC,CACXqB,IAAI,CAAC,YAAK;MACT,IAAIF,SAAS,EAAE;QACbN,SAAS,CAAC,IAAI,CAAC;MACjB;IACF,CAAC,CAAC,CACDS,KAAK,CAAC,UAACN,KAAK,EAAI;MACf,IAAIG,SAAS,EAAE;QACbF,QAAQ,CAACD,KAAK,CAAC;MACjB;IACF,CAAC,CAAC;IAEJ,OAAO,YAAK;MACVG,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACP,MAAM,EAAEI,KAAK,CAAC;AACxB;AAEA,SAASO,cAAcA,CAACvB,GAAwC;EAC9D,IAAAoB,eAAS,EAACpB,GAAG,CAAC;EACd,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB;AAwBO,IAAMwB,QAAQ,GAAAC,OAAA,CAAAD,QAAA,GACnB,OAAOE,MAAM,KAAK,WAAW,GAAGH,cAAc,GAAGjB,eAAe","ignoreList":[]}