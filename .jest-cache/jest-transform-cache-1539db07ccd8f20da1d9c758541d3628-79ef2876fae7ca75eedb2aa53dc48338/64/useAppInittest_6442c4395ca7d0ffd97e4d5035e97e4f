8b13d771ad85be8e33bce4212278ee9a
_getJestObj().mock("@expo-google-fonts/jetbrains-mono", function () {
  return {
    JetBrainsMono_400Regular: "JetBrainsMono_400Regular"
  };
});
_getJestObj().mock("@expo-google-fonts/noto-sans", function () {
  return {
    NotoSans_400Regular: "NotoSans_400Regular"
  };
});
_getJestObj().mock("@expo/vector-icons", function () {
  return {
    MaterialCommunityIcons: {
      font: {
        "MaterialCommunityIcons": "MockedFont"
      }
    }
  };
});
_getJestObj().mock("expo-font", function () {
  return {
    useFonts: jest.fn()
  };
});
_getJestObj().mock("expo-router", function () {
  return {
    SplashScreen: {
      hideAsync: jest.fn()
    }
  };
});
_getJestObj().mock("@/lib/data/firebase", function () {
  return {
    initFirebase: jest.fn()
  };
});
_getJestObj().mock("@/lib/data/firebase/logger", function () {
  return {
    logger: {
      debug: jest.fn(),
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    }
  };
});
_getJestObj().mock("@/lib/data/supabase", function () {
  return {
    initSupabase: jest.fn()
  };
});
_getJestObj().mock("@/lib/data/sync", function () {
  return {
    initializeDataLayer: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _useAppInit = require("@/lib/hooks/useAppInit");
var _reactNative = require("@testing-library/react-native");
var _expoFont = require("expo-font");
var _expoRouter = require("expo-router");
var _firebase = require("@/lib/data/firebase");
var _logger = require("@/lib/data/firebase/logger");
var _supabase = require("@/lib/data/supabase");
var _sync = require("@/lib/data/sync");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("useAppInit", function () {
  var mockUseFonts = _expoFont.useFonts;
  var mockInitFirebase = _firebase.initFirebase;
  var mockInitSupabase = _supabase.initSupabase;
  var mockInitializeDataLayer = _sync.initializeDataLayer;
  var mockHideAsync = _expoRouter.SplashScreen.hideAsync;
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test("returns false when fonts are not loaded", function () {
    mockUseFonts.mockReturnValue([false, null]);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAppInit.useAppInit)();
      }),
      result = _renderHook.result;
    expect(result.current).toBe(false);
  });
  test("throws error when font loading fails", function () {
    var fontError = new Error("Font loading failed");
    mockUseFonts.mockReturnValue([false, fontError]);
    expect(function () {
      return (0, _reactNative.renderHook)(function () {
        return (0, _useAppInit.useAppInit)();
      });
    }).toThrow("Font loading failed");
    expect(_logger.logger.error).toHaveBeenCalledWith("Font loading error", expect.objectContaining({
      service: "App Init",
      platform: "React Native",
      operation: "font_loading"
    }));
  });
  test("initializes services and hides splash screen when ready", (0, _asyncToGenerator2.default)(function* () {
    mockUseFonts.mockReturnValue([true, null]);
    mockInitializeDataLayer.mockResolvedValue(undefined);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAppInit.useAppInit)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current).toBe(true);
    });
    expect(mockInitializeDataLayer).toHaveBeenCalled();
    expect(mockHideAsync).toHaveBeenCalled();
    expect(_logger.logger.info).toHaveBeenCalledWith("Starting app initialization", expect.any(Object));
    expect(_logger.logger.info).toHaveBeenCalledWith("App initialization complete", expect.any(Object));
  }));
  test("handles data layer error gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockUseFonts.mockReturnValue([true, null]);
    mockInitializeDataLayer.mockRejectedValue(new Error("Data layer failed"));
    var originalWindow = global.window;
    delete global.window;
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAppInit.useAppInit)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current).toBe(true);
    });
    expect(_logger.logger.error).toHaveBeenCalledWith("App initialization error", expect.objectContaining({
      operation: "init"
    }));
    expect(_logger.logger.warn).toHaveBeenCalledWith("App will continue with limited functionality", expect.any(Object));
    global.window = originalWindow;
  }));
  test("logs initialization steps correctly", (0, _asyncToGenerator2.default)(function* () {
    mockUseFonts.mockReturnValue([true, null]);
    mockInitializeDataLayer.mockResolvedValue(undefined);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAppInit.useAppInit)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current).toBe(true);
    });
    expect(_logger.logger.info).toHaveBeenCalledWith("Initializing offline-first data layer...", expect.objectContaining({
      operation: "data_layer_init"
    }));
    expect(_logger.logger.info).toHaveBeenCalledWith("Offline-first data layer initialized successfully", expect.objectContaining({
      operation: "data_layer_init"
    }));
  }));
  test("logs debug messages during data layer initialization", (0, _asyncToGenerator2.default)(function* () {
    mockUseFonts.mockReturnValue([true, null]);
    mockInitializeDataLayer.mockResolvedValue(undefined);
    (0, _reactNative.renderHook)(function () {
      return (0, _useAppInit.useAppInit)();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_logger.logger.info).toHaveBeenCalledWith("Initializing offline-first data layer...", expect.objectContaining({
        service: "App Init",
        platform: "React Native",
        operation: "data_layer_init"
      }));
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_logger.logger.info).toHaveBeenCalledWith("Offline-first data layer initialized successfully", expect.objectContaining({
        service: "App Init",
        platform: "React Native",
        operation: "data_layer_init"
      }));
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,