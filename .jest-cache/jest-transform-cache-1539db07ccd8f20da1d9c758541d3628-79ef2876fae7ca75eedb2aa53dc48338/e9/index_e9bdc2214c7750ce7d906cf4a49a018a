a1774d3ce79390d197cd6c0eb678246b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExerciseScreen;
var _ExerciseList = _interopRequireDefault(require("@/lib/components/ExerciseList"));
var _useExercises2 = require("@/lib/hooks/useExercises");
var _useAuth2 = require("@/lib/hooks/useAuth");
var _expoRouter = require("expo-router");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ExerciseScreen() {
  var router = (0, _expoRouter.useRouter)();
  var _useAuth = (0, _useAuth2.useAuth)(),
    user = _useAuth.user;
  var _useExercises = (0, _useExercises2.useExercises)((user == null ? void 0 : user.uid) || ""),
    exercises = _useExercises.exercises;
  React.useEffect(function () {
    if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
      console.log("üîç ExerciseScreen: Component rendered", {
        userId: user == null ? void 0 : user.uid,
        exerciseCount: exercises.length
      });
    }
  }, [user, exercises]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      position: "relative"
    },
    testID: "exercise-screen",
    children: [(0, _jsxRuntime.jsx)(_ExerciseList.default, {
      exercises: exercises
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.FAB, {
      style: {
        position: "absolute",
        margin: 16,
        right: 0,
        bottom: 0
      },
      icon: "plus",
      testID: "add-exercise",
      onPress: function onPress(_) {
        if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
          console.log("üîç ExerciseScreen: Add exercise button tapped");
        }
        router.navigate("/exercises/add");
      }
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXhlcmNpc2VMaXN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXNlRXhlcmNpc2VzMiIsIl91c2VBdXRoMiIsIl9leHBvUm91dGVyIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZVBhcGVyIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkV4ZXJjaXNlU2NyZWVuIiwicm91dGVyIiwidXNlUm91dGVyIiwiX3VzZUF1dGgiLCJ1c2VBdXRoIiwidXNlciIsIl91c2VFeGVyY2lzZXMiLCJ1c2VFeGVyY2lzZXMiLCJ1aWQiLCJleGVyY2lzZXMiLCJ1c2VFZmZlY3QiLCJwcm9jZXNzIiwiZW52IiwiQ0hST01FX1RFU1QiLCJDSSIsImNvbnNvbGUiLCJsb2ciLCJ1c2VySWQiLCJleGVyY2lzZUNvdW50IiwibGVuZ3RoIiwianN4cyIsIlZpZXciLCJzdHlsZSIsImZsZXgiLCJwb3NpdGlvbiIsInRlc3RJRCIsImNoaWxkcmVuIiwianN4IiwiRkFCIiwibWFyZ2luIiwicmlnaHQiLCJib3R0b20iLCJpY29uIiwib25QcmVzcyIsIl8iLCJuYXZpZ2F0ZSJdLCJzb3VyY2VzIjpbImluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXhlcmNpc2VMaXN0IGZyb20gXCJAL2xpYi9jb21wb25lbnRzL0V4ZXJjaXNlTGlzdFwiO1xuaW1wb3J0IHsgdXNlRXhlcmNpc2VzIH0gZnJvbSBcIkAvbGliL2hvb2tzL3VzZUV4ZXJjaXNlc1wiO1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCJAL2xpYi9ob29rcy91c2VBdXRoXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IEZBQiB9IGZyb20gXCJyZWFjdC1uYXRpdmUtcGFwZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXhlcmNpc2VTY3JlZW4oKSB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgY29uc3QgeyBleGVyY2lzZXMgfSA9IHVzZUV4ZXJjaXNlcyh1c2VyPy51aWQgfHwgXCJcIik7XG4gIFxuICAvLyBEZWJ1ZyBsb2dnaW5nIGZvciBDaHJvbWUgdGVzdHNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuQ0hST01FX1RFU1QgPT09ICd0cnVlJyB8fCBwcm9jZXNzLmVudi5DSSA9PT0gJ3RydWUnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIvCflI0gRXhlcmNpc2VTY3JlZW46IENvbXBvbmVudCByZW5kZXJlZFwiLCB7IHVzZXJJZDogdXNlcj8udWlkLCBleGVyY2lzZUNvdW50OiBleGVyY2lzZXMubGVuZ3RoIH0pO1xuICAgIH1cbiAgfSwgW3VzZXIsIGV4ZXJjaXNlc10pO1xuICBcbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17eyBmbGV4OiAxLCBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH19IHRlc3RJRD1cImV4ZXJjaXNlLXNjcmVlblwiPlxuICAgICAgPEV4ZXJjaXNlTGlzdCBleGVyY2lzZXM9e2V4ZXJjaXNlc30gLz5cbiAgICAgIDxGQUJcbiAgICAgICAgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgbWFyZ2luOiAxNiwgcmlnaHQ6IDAsIGJvdHRvbTogMCB9fVxuICAgICAgICBpY29uPVwicGx1c1wiXG4gICAgICAgIHRlc3RJRD1cImFkZC1leGVyY2lzZVwiXG4gICAgICAgIG9uUHJlc3M9eyhfKSA9PiB7XG4gICAgICAgICAgLy8gRGVidWcgbG9nZ2luZyBmb3IgQ2hyb21lIHRlc3RzXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkNIUk9NRV9URVNUID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuQ0kgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCLwn5SNIEV4ZXJjaXNlU2NyZWVuOiBBZGQgZXhlcmNpc2UgYnV0dG9uIHRhcHBlZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcm91dGVyLm5hdmlnYXRlKFwiL2V4ZXJjaXNlcy9hZGRcIik7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvVmlldz5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFDLHVCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBTSxZQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxpQkFBQSxHQUFBUCxPQUFBO0FBQXlDLElBQUFRLFdBQUEsR0FBQVIsT0FBQTtBQUFBLFNBQUFLLHdCQUFBSSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBTix1QkFBQSxZQUFBQSx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxp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