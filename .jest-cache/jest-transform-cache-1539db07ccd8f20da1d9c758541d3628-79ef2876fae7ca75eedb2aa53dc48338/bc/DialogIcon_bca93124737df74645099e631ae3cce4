03d3f13be824067085279af34258c001
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DialogIcon = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _Icon = _interopRequireDefault(require("../Icon"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var DialogIcon = function DialogIcon(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    color = _ref.color,
    icon = _ref.icon,
    themeOverrides = _ref.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  if (!theme.isV3) {
    return null;
  }
  var iconColor = color || theme.colors.secondary;
  return React.createElement(_reactNative.View, {
    style: styles.wrapper
  }, React.createElement(_Icon.default, {
    source: icon,
    color: iconColor,
    size: size
  }));
};
exports.DialogIcon = DialogIcon;
DialogIcon.displayName = 'Dialog.Icon';
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 24
  }
});
var _default = exports.default = DialogIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtaW5nIiwiX0ljb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidCIsIldlYWtNYXAiLCJyIiwibiIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRGlhbG9nSWNvbiIsIl9yZWYiLCJfcmVmJHNpemUiLCJzaXplIiwiY29sb3IiLCJpY29uIiwidGhlbWVPdmVycmlkZXMiLCJ0aGVtZSIsInVzZUludGVybmFsVGhlbWUiLCJpc1YzIiwiaWNvbkNvbG9yIiwiY29sb3JzIiwic2Vjb25kYXJ5IiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsIndyYXBwZXIiLCJzb3VyY2UiLCJleHBvcnRzIiwiZGlzcGxheU5hbWUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ1RvcCIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRGlhbG9nL0RpYWxvZ0ljb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFJQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBMkMsU0FBQUksdUJBQUFDLENBQUE7RUFBQSxPQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFB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