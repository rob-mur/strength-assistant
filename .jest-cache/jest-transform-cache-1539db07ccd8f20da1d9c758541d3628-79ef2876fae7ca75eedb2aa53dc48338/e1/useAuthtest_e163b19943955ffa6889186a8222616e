c9d58d6f086de9a4462e2095f4b042b2
_getJestObj().mock("@/lib/data/firebase/auth.web", function () {
  return {
    initAuth: jest.fn(),
    onAuthStateChangedWeb: jest.fn(),
    signInAnonymouslyWeb: jest.fn(),
    createAccountWeb: jest.fn(),
    signInWeb: jest.fn(),
    signOutWeb: jest.fn(),
    getAuthInstance: jest.fn(),
    __esModule: true
  };
});
_getJestObj().mock("@/lib/data/firebase/auth.native", function () {
  return {
    initAuth: jest.fn(),
    onAuthStateChangedNative: jest.fn(),
    signInAnonymouslyNative: jest.fn(),
    createAccountNative: jest.fn(),
    signInNative: jest.fn(),
    signOutNative: jest.fn(),
    getAuthInstance: jest.fn(),
    __esModule: true
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAuth = require("@/lib/hooks/useAuth");
var AuthWeb = _interopRequireWildcard(require("@/lib/data/firebase/auth.web"));
var AuthNative = _interopRequireWildcard(require("@/lib/data/firebase/auth.native"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockWebAuthFunctions = {
  initAuth: jest.fn(),
  onAuthStateChangedWeb: jest.fn(),
  signInAnonymouslyWeb: jest.fn(),
  createAccountWeb: jest.fn(),
  signInWeb: jest.fn(),
  signOutWeb: jest.fn(),
  getAuthInstance: jest.fn()
};
var mockNativeAuthFunctions = {
  initAuth: jest.fn(),
  onAuthStateChangedNative: jest.fn(),
  signInAnonymouslyNative: jest.fn(),
  createAccountNative: jest.fn(),
  signInNative: jest.fn(),
  signOutNative: jest.fn(),
  getAuthInstance: jest.fn()
};
var mockedAuthWeb = AuthWeb;
var mockedAuthNative = AuthNative;
describe("useAuth", function () {
  var originalEnv = process.env;
  beforeEach(function () {
    jest.clearAllMocks();
    process.env = Object.assign({}, originalEnv);
    delete process.env.CHROME_TEST;
    delete process.env.CI;
    delete process.env.NODE_ENV;
  });
  afterEach(function () {
    process.env = originalEnv;
  });
  test("initializes with loading state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook.result;
    expect(result.current.user).toBeNull();
    expect(result.current.loading).toBe(true);
    expect(result.current.error).toBeNull();
  });
  test("clearError function is available", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook2.result;
    expect(typeof result.current.clearError).toBe("function");
  });
  test("signInAnonymously creates mock user in test environment", (0, _asyncToGenerator2.default)(function* () {
    process.env.NODE_ENV = 'test';
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signInAnonymously();
    }));
    expect(result.current.user).toEqual({
      uid: "test-user-chrome",
      email: null,
      isAnonymous: true
    });
    expect(result.current.loading).toBe(false);
    expect(mockedAuthWeb.signInAnonymouslyWeb).not.toHaveBeenCalled();
  }));
  test("clearError clears the error state", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook4.result;
    mockedAuthWeb.signInWeb.mockRejectedValue(new Error("Invalid credentials"));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signIn("test@example.com", "wrongpassword");
    }));
    expect(result.current.error).toEqual({
      code: "unknown",
      message: "Invalid credentials"
    });
    (0, _reactNative.act)(function () {
      result.current.clearError();
    });
    expect(result.current.error).toBeNull();
  }));
  test("handles CHROME_TEST environment variable", function () {
    process.env.CHROME_TEST = 'true';
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook5.result;
    expect(result.current.user).toBeNull();
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });
  test("handles CI environment variable", function () {
    process.env.CI = 'true';
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook6.result;
    expect(result.current.user).toBeNull();
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });
  test("createAccount calls correct platform function", (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      uid: "test-uid",
      email: "test@example.com",
      isAnonymous: false
    };
    mockedAuthWeb.createAccountWeb.mockResolvedValue(mockUser);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.createAccount("test@example.com", "password123");
    }));
    expect(mockedAuthWeb.createAccountWeb).toHaveBeenCalledWith("test@example.com", "password123");
  }));
  test("createAccount handles errors", (0, _asyncToGenerator2.default)(function* () {
    var testError = {
      code: "auth/email-already-in-use",
      message: "Email already in use"
    };
    mockedAuthWeb.createAccountWeb.mockRejectedValue(testError);
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.createAccount("test@example.com", "password123");
    }));
    expect(result.current.error).toEqual({
      code: "auth/email-already-in-use",
      message: "Email already in use"
    });
    expect(result.current.loading).toBe(false);
  }));
  test("signIn calls correct platform function", (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      uid: "test-uid",
      email: "test@example.com",
      isAnonymous: false
    };
    mockedAuthWeb.signInWeb.mockResolvedValue(mockUser);
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signIn("test@example.com", "password123");
    }));
    expect(mockedAuthWeb.signInWeb).toHaveBeenCalledWith("test@example.com", "password123");
  }));
  test("signIn handles errors", (0, _asyncToGenerator2.default)(function* () {
    var testError = {
      code: "auth/wrong-password",
      message: "Wrong password"
    };
    mockedAuthWeb.signInWeb.mockRejectedValue(testError);
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signIn("test@example.com", "wrongpassword");
    }));
    expect(result.current.error).toEqual({
      code: "auth/wrong-password",
      message: "Wrong password"
    });
    expect(result.current.loading).toBe(false);
  }));
  test("signOut calls correct platform function", (0, _asyncToGenerator2.default)(function* () {
    mockedAuthWeb.signOutWeb.mockResolvedValue(undefined);
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signOut();
    }));
    expect(mockedAuthWeb.signOutWeb).toHaveBeenCalledWith();
  }));
  test("signOut handles errors", (0, _asyncToGenerator2.default)(function* () {
    var testError = {
      code: "auth/network-error",
      message: "Network error"
    };
    mockedAuthWeb.signOutWeb.mockRejectedValue(testError);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signOut();
    }));
    expect(result.current.error).toEqual({
      code: "auth/network-error",
      message: "Network error"
    });
    expect(result.current.loading).toBe(false);
  }));
  test("signInAnonymously in CHROME_TEST environment", (0, _asyncToGenerator2.default)(function* () {
    process.env.CHROME_TEST = 'true';
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signInAnonymously();
    }));
    expect(result.current.user).toEqual({
      uid: "test-user-chrome",
      email: null,
      isAnonymous: true
    });
    expect(result.current.loading).toBe(false);
    expect(mockedAuthWeb.signInAnonymouslyWeb).not.toHaveBeenCalled();
  }));
  test("signInAnonymously in CI environment", (0, _asyncToGenerator2.default)(function* () {
    process.env.CI = 'true';
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuth.useAuth)();
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.signInAnonymously();
    }));
    expect(result.current.user).toEqual({
      uid: "test-user-chrome",
      email: null,
      isAnonymous: true
    });
    expect(result.current.loading).toBe(false);
    expect(mockedAuthWeb.signInAnonymouslyWeb).not.toHaveBeenCalled();
  }));
  describe("Native Platform Tests", function () {
    var _require = require("react-native"),
      Platform = _require.Platform;
    beforeEach(function () {
      Platform.OS = "ios";
      jest.clearAllMocks();
    });
    afterEach(function () {
      Platform.OS = "web";
    });
    test("createAccount calls native function on iOS", (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockedAuthNative.createAccountNative.mockResolvedValue(mockUser);
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.createAccount("test@example.com", "password123");
      }));
      expect(mockedAuthNative.createAccountNative).toHaveBeenCalledWith("test@example.com", "password123");
      expect(mockedAuthWeb.createAccountWeb).not.toHaveBeenCalled();
    }));
    test("signIn calls native function on iOS", (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockedAuthNative.signInNative.mockResolvedValue(mockUser);
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signIn("test@example.com", "password123");
      }));
      expect(mockedAuthNative.signInNative).toHaveBeenCalledWith("test@example.com", "password123");
      expect(mockedAuthWeb.signInWeb).not.toHaveBeenCalled();
    }));
    test("signOut calls native function on iOS", (0, _asyncToGenerator2.default)(function* () {
      mockedAuthNative.signOutNative.mockResolvedValue(undefined);
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signOut();
      }));
      expect(mockedAuthNative.signOutNative).toHaveBeenCalledWith();
      expect(mockedAuthWeb.signOutWeb).not.toHaveBeenCalled();
    }));
    test("signInAnonymously calls native function on iOS", (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        uid: "test-uid",
        email: null,
        isAnonymous: true
      };
      mockedAuthNative.signInAnonymouslyNative.mockResolvedValue(mockUser);
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signInAnonymously();
      }));
      expect(mockedAuthNative.signInAnonymouslyNative).toHaveBeenCalledWith();
      expect(mockedAuthWeb.signInAnonymouslyWeb).not.toHaveBeenCalled();
    }));
  });
  describe("Auth Initialization and Error Scenarios", function () {
    beforeEach(function () {
      jest.clearAllMocks();
      delete process.env.CHROME_TEST;
      delete process.env.CI;
      delete process.env.NODE_ENV;
    });
    test("handles auth initialization timeout", (0, _asyncToGenerator2.default)(function* () {
      mockedAuthWeb.initAuth.mockImplementation(function () {
        throw new Error("Auth initialization timeout");
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      }));
      expect(result.current.user).toBeNull();
      expect(result.current.loading).toBe(false);
    }));
    test("handles auth listener setup", (0, _asyncToGenerator2.default)(function* () {
      var mockUnsubscribe = jest.fn();
      mockedAuthWeb.initAuth.mockReturnValue(undefined);
      mockedAuthWeb.onAuthStateChangedWeb.mockReturnValue(mockUnsubscribe);
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        unmount = _renderHook18.unmount;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      }));
      unmount();
    }));
    test("handles signInAnonymously error in normal environment", (0, _asyncToGenerator2.default)(function* () {
      var testError = {
        code: "auth/network-error",
        message: "Network error"
      };
      mockedAuthWeb.signInAnonymouslyWeb.mockRejectedValue(testError);
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signInAnonymously();
      }));
      expect(result.current.error).toEqual({
        code: "auth/network-error",
        message: "Network error"
      });
      expect(result.current.loading).toBe(false);
    }));
    test("handles auth functions with missing properties", (0, _asyncToGenerator2.default)(function* () {
      var testError = {
        message: "Auth error without code"
      };
      mockedAuthWeb.signInWeb.mockRejectedValue(testError);
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signIn("test@example.com", "password");
      }));
      expect(result.current.error).toEqual({
        code: "unknown",
        message: "Auth error without code"
      });
    }));
    test("handles auth functions with no message", (0, _asyncToGenerator2.default)(function* () {
      var testError = {
        code: "auth/custom-error"
      };
      mockedAuthWeb.signOutWeb.mockRejectedValue(testError);
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useAuth.useAuth)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.signOut();
      }));
      expect(result.current.error).toEqual({
        code: "auth/custom-error",
        message: "An error occurred"
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,