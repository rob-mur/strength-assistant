855c9d0d553150b26289c380352b4a54
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HomeScreen;
var _GettingStartedCard = _interopRequireDefault(require("@/lib/components/Cards/GettingStartedCard"));
var _locales = require("@/lib/locales");
var _expoRouter = require("expo-router");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function HomeScreen() {
  var router = (0, _expoRouter.useRouter)();
  React.useEffect(function () {
    if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
      console.log("üîç HomeScreen: Component rendered");
    }
  }, []);
  return (0, _jsxRuntime.jsx)(_GettingStartedCard.default, {
    style: {
      padding: 16
    },
    content: _locales.Locales.t("getStartedMessage"),
    call_to_action: _locales.Locales.t("getStartedCallToAction"),
    on_get_started: function on_get_started() {
      if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
        console.log("üîç HomeScreen: Navigating to exercises screen");
      }
      router.navigate("./exercises");
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfR2V0dGluZ1N0YXJ0ZWRDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9jYWxlcyIsIl9leHBvUm91dGVyIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJIb21lU2NyZWVuIiwicm91dGVyIiwidXNlUm91dGVyIiwidXNlRWZmZWN0IiwicHJvY2VzcyIsImVudiIsIkNIUk9NRV9URVNUIiwiQ0kiLCJjb25zb2xlIiwibG9nIiwianN4Iiwic3R5bGUiLCJwYWRkaW5nIiwiY29udGVudCIsIkxvY2FsZXMiLCJjYWxsX3RvX2FjdGlvbiIsIm9uX2dldF9zdGFydGVkIiwibmF2aWdhdGUiXSwic291cmNlcyI6WyJpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdldHRpbmdTdGFydGVkQ2FyZCBmcm9tIFwiQC9saWIvY29tcG9uZW50cy9DYXJkcy9HZXR0aW5nU3RhcnRlZENhcmRcIjtcbmltcG9ydCB7IExvY2FsZXMgfSBmcm9tIFwiQC9saWIvbG9jYWxlc1wiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcImV4cG8tcm91dGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZVNjcmVlbigpIHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIFxuICAvLyBEZWJ1ZyBsb2dnaW5nIGZvciBDaHJvbWUgdGVzdHNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuQ0hST01FX1RFU1QgPT09ICd0cnVlJyB8fCBwcm9jZXNzLmVudi5DSSA9PT0gJ3RydWUnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIvCflI0gSG9tZVNjcmVlbjogQ29tcG9uZW50IHJlbmRlcmVkXCIpO1xuICAgIH1cbiAgfSwgW10pO1xuICBcbiAgcmV0dXJuIChcbiAgICA8R2V0dGluZ1N0YXJ0ZWRDYXJkXG4gICAgICBzdHlsZT17eyBwYWRkaW5nOiAxNiB9fVxuICAgICAgY29udGVudD17TG9jYWxlcy50KFwiZ2V0U3RhcnRlZE1lc3NhZ2VcIil9XG4gICAgICBjYWxsX3RvX2FjdGlvbj17TG9jYWxlcy50KFwiZ2V0U3RhcnRlZENhbGxUb0FjdGlvblwiKX1cbiAgICAgIG9uX2dldF9zdGFydGVkPXsoKSA9PiB7XG4gICAgICAgIC8vIERlYnVnIGxvZ2dpbmcgZm9yIENocm9tZSB0ZXN0c1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuQ0hST01FX1RFU1QgPT09ICd0cnVlJyB8fCBwcm9jZXNzLmVudi5DSSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCLwn5SNIEhvbWVTY3JlZW46IE5hdmlnYXRpbmcgdG8gZXhlcmNpc2VzIHNjcmVlblwiKTtcbiAgICAgICAgfVxuICAgICAgICByb3V0ZXIubmF2aWdhdGUoXCIuL2V4ZXJjaXNlc1wiKTtcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxtQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsS0FBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQStCLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFJLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFFaEIsU0FBU21CLFVBQVVBLENBQUEsRUFBRztFQUNuQyxJQUFNQyxNQUFNLEdBQUcsSUFBQUMscUJBQVMsRUFBQyxDQUFDO0VBRzFCekIsS0FBSyxDQUFDMEIsU0FBUyxDQUFDLFlBQU07SUFDcEIsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsS0FBSyxNQUFNLElBQUlGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxFQUFFLEtBQUssTUFBTSxFQUFFO01BQ25FQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQztJQUNsRDtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUNFLElBQUE5QixXQUFBLENBQUErQixHQUFBLEVBQUN0QyxtQkFBQSxDQUFBa0IsT0FBa0I7SUFDakJxQixLQUFLLEVBQUU7TUFBRUMsT0FBTyxFQUFFO0lBQUcsQ0FBRTtJQUN2QkMsT0FBTyxFQUFFQyxnQkFBTyxDQUFDakMsQ0FBQyxDQUFDLG1CQUFtQixDQUFFO0lBQ3hDa0MsY0FBYyxFQUFFRCxnQkFBTyxDQUFDakMsQ0FBQyxDQUFDLHdCQUF3QixDQUFFO0lBQ3BEbUMsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFBLEVBQVE7TUFFcEIsSUFBSVosT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsS0FBSyxNQUFNLElBQUlGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxFQUFFLEtBQUssTUFBTSxFQUFFO1FBQ25FQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywrQ0FBK0MsQ0FBQztNQUM5RDtNQUNBUixNQUFNLENBQUNnQixRQUFRLENBQUMsYUFBYSxDQUFDO0lBQ2hDO0VBQUUsQ0FDSCxDQUFDO0FBRU4iLCJpZ25vcmVMaXN0IjpbXX0=