# Example Frontend Deployment Workflow
# This demonstrates how to integrate the production validation gate
# into your deployment workflows

name: Frontend Deployment (Example)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
  
  # Automatic deployment after production validation passes
  workflow_run:
    workflows: ["Production Validation"]
    types: [completed]
    branches: [main]

jobs:
  # Gate job - blocks deployment if production validation failed
  deployment-gate:
    name: Check Deployment Readiness
    uses: ./.github/workflows/deployment-gate.yml
    with:
      deployment_type: "frontend"
      deployment_environment: ${{ github.event.inputs.environment || 'production' }}
    secrets: inherit
    
  # Example frontend deployment job
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deployment-gate
    
    # Only run if gate approves deployment
    if: needs.deployment-gate.outputs.deployment_approved == 'true'
    
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: |
          echo "🏗️  Building frontend application..."
          # Add your build commands here
          # npm run build
          
      - name: Deploy to ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment || 'production' }}..."
          echo "✅ Production validation passed - deployment approved"
          echo "📊 Validation status: ${{ needs.deployment-gate.outputs.validation_status }}"
          
          # Add your deployment commands here
          # For example:
          # - Deploy to Vercel, Netlify, or AWS
          # - Update CDN
          # - Notify monitoring systems
          
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "🎉 Frontend deployment completed successfully!"
          echo "🌐 Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "✅ Production validation: ${{ needs.deployment-gate.outputs.validation_status }}"
          
  # Example job that runs when deployment is blocked
  deployment-blocked:
    name: Handle Blocked Deployment
    runs-on: ubuntu-latest
    needs: deployment-gate
    
    # Only run if gate blocks deployment
    if: needs.deployment-gate.outputs.deployment_approved == 'false'
    
    steps:
      - name: Deployment Blocked Notification
        run: |
          echo "🚫 Frontend deployment blocked!"
          echo "🔍 Validation status: ${{ needs.deployment-gate.outputs.validation_status }}"
          echo ""
          echo "📋 Resolution steps:"
          echo "1. Check production validation workflow results"
          echo "2. Fix any production environment issues"
          echo "3. Re-run production validation if needed"
          echo "4. Retry deployment once validation passes"
          
          # Optional: Create GitHub issue or send team notification
          # gh issue create --title "Deployment Blocked" --body "..."