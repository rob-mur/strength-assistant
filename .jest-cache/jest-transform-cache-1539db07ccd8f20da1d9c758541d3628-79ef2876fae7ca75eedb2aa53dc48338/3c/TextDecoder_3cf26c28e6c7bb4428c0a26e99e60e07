8138514539741c0f881cd7b3d40fe116
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextDecoder = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function inRange(a, min, max) {
  return min <= a && a <= max;
}
function codePointsToString(codePoints) {
  var s = '';
  for (var i = 0; i < codePoints.length; ++i) {
    var cp = codePoints[i];
    if (cp <= 0xffff) {
      s += String.fromCharCode(cp);
    } else {
      cp -= 0x10000;
      s += String.fromCharCode((cp >> 10) + 0xd800, (cp & 0x3ff) + 0xdc00);
    }
  }
  return s;
}
function normalizeBytes(input) {
  if (typeof input === 'object' && input instanceof ArrayBuffer) {
    return new Uint8Array(input);
  } else if (typeof input === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {
    return new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
  }
  return new Uint8Array(0);
}
var END_OF_STREAM = -1;
var FINISHED = -1;
var Stream = function () {
  function Stream(tokens) {
    (0, _classCallCheck2.default)(this, Stream);
    this.tokens = Array.prototype.slice.call(tokens);
    this.tokens.reverse();
  }
  return (0, _createClass2.default)(Stream, [{
    key: "endOfStream",
    value: function endOfStream() {
      return !this.tokens.length;
    }
  }, {
    key: "read",
    value: function read() {
      if (!this.tokens.length) return END_OF_STREAM;
      return this.tokens.pop();
    }
  }, {
    key: "prepend",
    value: function prepend(token) {
      if (Array.isArray(token)) {
        while (token.length) this.tokens.push(token.pop());
      } else {
        this.tokens.push(token);
      }
    }
  }, {
    key: "push",
    value: function push(token) {
      if (Array.isArray(token)) {
        while (token.length) this.tokens.unshift(token.shift());
      } else {
        this.tokens.unshift(token);
      }
    }
  }]);
}();
function decoderError(fatal, opt_code_point) {
  if (fatal) throw TypeError('Decoder error');
  return opt_code_point || 0xfffd;
}
var LABEL_ENCODING_MAP = {};
function getEncoding(label) {
  label = label.trim().toLowerCase();
  if (label in LABEL_ENCODING_MAP) {
    return LABEL_ENCODING_MAP[label];
  }
  return null;
}
var ENCODING_MAP = [{
  encodings: [{
    labels: ['unicode-1-1-utf-8', 'unicode11utf8', 'unicode20utf8', 'utf-8', 'utf8', 'x-unicode20utf8'],
    name: 'UTF-8'
  }],
  heading: 'The Encoding'
}];
ENCODING_MAP.forEach(function (category) {
  category.encodings.forEach(function (encoding) {
    encoding.labels.forEach(function (label) {
      LABEL_ENCODING_MAP[label] = encoding;
    });
  });
});
var DECODERS = {
  'UTF-8': function UTF8(options) {
    return new UTF8Decoder(options);
  }
};
var UTF8Decoder = function () {
  function UTF8Decoder(options) {
    (0, _classCallCheck2.default)(this, UTF8Decoder);
    this.options = options;
    this.utf8CodePoint = 0;
    this.utf8BytesSeen = 0;
    this.utf8BytesNeeded = 0;
    this.utf8LowerBoundary = 0x80;
    this.utf8UpperBoundary = 0xbf;
  }
  return (0, _createClass2.default)(UTF8Decoder, [{
    key: "handler",
    value: function handler(stream, bite) {
      if (bite === END_OF_STREAM && this.utf8BytesNeeded !== 0) {
        this.utf8BytesNeeded = 0;
        return decoderError(this.options.fatal);
      }
      if (bite === END_OF_STREAM) return FINISHED;
      if (this.utf8BytesNeeded === 0) {
        if (inRange(bite, 0x00, 0x7f)) {
          return bite;
        } else if (inRange(bite, 0xc2, 0xdf)) {
          this.utf8BytesNeeded = 1;
          this.utf8CodePoint = bite & 0x1f;
        } else if (inRange(bite, 0xe0, 0xef)) {
          if (bite === 0xe0) this.utf8LowerBoundary = 0xa0;
          if (bite === 0xed) this.utf8UpperBoundary = 0x9f;
          this.utf8BytesNeeded = 2;
          this.utf8CodePoint = bite & 0xf;
        } else if (inRange(bite, 0xf0, 0xf4)) {
          if (bite === 0xf0) this.utf8LowerBoundary = 0x90;
          if (bite === 0xf4) this.utf8UpperBoundary = 0x8f;
          this.utf8BytesNeeded = 3;
          this.utf8CodePoint = bite & 0x7;
        } else {
          return decoderError(this.options.fatal);
        }
        return null;
      }
      if (!inRange(bite, this.utf8LowerBoundary, this.utf8UpperBoundary)) {
        this.utf8CodePoint = 0;
        this.utf8BytesNeeded = 0;
        this.utf8BytesSeen = 0;
        this.utf8LowerBoundary = 0x80;
        this.utf8UpperBoundary = 0xbf;
        stream.prepend(bite);
        return decoderError(this.options.fatal);
      }
      this.utf8LowerBoundary = 0x80;
      this.utf8UpperBoundary = 0xbf;
      this.utf8CodePoint = this.utf8CodePoint << 6 | bite & 0x3f;
      this.utf8BytesSeen += 1;
      if (this.utf8BytesSeen !== this.utf8BytesNeeded) return null;
      var code_point = this.utf8CodePoint;
      this.utf8CodePoint = 0;
      this.utf8BytesNeeded = 0;
      this.utf8BytesSeen = 0;
      return code_point;
    }
  }]);
}();
var TextDecoder = exports.TextDecoder = function () {
  function TextDecoder() {
    var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, TextDecoder);
    this._BOMseen = false;
    this._doNotFlush = false;
    this._decoder = null;
    if (options != null && typeof options !== 'object') {
      throw new TypeError('Second argument of TextDecoder must be undefined or an object, e.g. { fatal: true }');
    }
    var normalizedLabel = String(label).trim().toLowerCase();
    var encoding = getEncoding(normalizedLabel);
    if (encoding === null || encoding.name === 'replacement') {
      throw new RangeError(`Unknown encoding: ${label} (normalized: ${normalizedLabel})`);
    }
    if (!DECODERS[encoding.name]) {
      throw new Error(`Decoder not present: ${encoding.name}`);
    }
    this._encoding = encoding;
    this._ignoreBOM = !!options.ignoreBOM;
    this._errorMode = options.fatal ? 'fatal' : 'replacement';
  }
  return (0, _createClass2.default)(TextDecoder, [{
    key: "encoding",
    get: function get() {
      var _this$_encoding$name$, _this$_encoding;
      return (_this$_encoding$name$ = (_this$_encoding = this._encoding) == null ? void 0 : _this$_encoding.name.toLowerCase()) != null ? _this$_encoding$name$ : '';
    }
  }, {
    key: "fatal",
    get: function get() {
      return this._errorMode === 'fatal';
    }
  }, {
    key: "ignoreBOM",
    get: function get() {
      return this._ignoreBOM;
    }
  }, {
    key: "decode",
    value: function decode(input) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var bytes = normalizeBytes(input);
      if (!this._doNotFlush) {
        this._decoder = DECODERS[this._encoding.name]({
          fatal: this.fatal
        });
        this._BOMseen = false;
      }
      this._doNotFlush = Boolean(options['stream']);
      var input_stream = new Stream(bytes);
      var output = [];
      while (true) {
        var token = input_stream.read();
        if (token === END_OF_STREAM) break;
        var result = this._decoder.handler(input_stream, token);
        if (result === FINISHED) break;
        if (result !== null) {
          output.push(result);
        }
      }
      if (!this._doNotFlush) {
        do {
          var _result = this._decoder.handler(input_stream, input_stream.read());
          if (_result === FINISHED) break;
          if (_result === null) continue;
          if (Array.isArray(_result)) output.push.apply(output, (0, _toConsumableArray2.default)(_result));else output.push(_result);
        } while (!input_stream.endOfStream());
        this._decoder = null;
      }
      return this.serializeStream(output);
    }
  }, {
    key: "serializeStream",
    value: function serializeStream(stream) {
      if (this._encoding.name === 'UTF-8') {
        if (!this._ignoreBOM && !this._BOMseen && stream[0] === 0xfeff) {
          this._BOMseen = true;
          stream.shift();
        } else if (stream.length > 0) {
          this._BOMseen = true;
        }
      }
      return codePointsToString(stream);
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpblJhbmdlIiwiYSIsIm1pbiIsIm1heCIsImNvZGVQb2ludHNUb1N0cmluZyIsImNvZGVQb2ludHMiLCJzIiwiaSIsImxlbmd0aCIsImNwIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibm9ybWFsaXplQnl0ZXMiLCJpbnB1dCIsIkFycmF5QnVmZmVyIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiRU5EX09GX1NUUkVBTSIsIkZJTklTSEVEIiwiU3RyZWFtIiwidG9rZW5zIiwiX2NsYXNzQ2FsbENoZWNrMiIsImRlZmF1bHQiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsInJldmVyc2UiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJlbmRPZlN0cmVhbSIsInJlYWQiLCJwb3AiLCJwcmVwZW5kIiwidG9rZW4iLCJpc0FycmF5IiwicHVzaCIsInVuc2hpZnQiLCJzaGlmdCIsImRlY29kZXJFcnJvciIsImZhdGFsIiwib3B0X2NvZGVfcG9pbnQiLCJUeXBlRXJyb3IiLCJMQUJFTF9FTkNPRElOR19NQVAiLCJnZXRFbmNvZGluZyIsImxhYmVsIiwidHJpbSIsInRvTG93ZXJDYXNlIiwiRU5DT0RJTkdfTUFQIiwiZW5jb2RpbmdzIiwibGFiZWxzIiwibmFtZSIsImhlYWRpbmciLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJlbmNvZGluZyIsIkRFQ09ERVJTIiwiVVRGOCIsIm9wdGlvbnMiLCJVVEY4RGVjb2RlciIsInV0ZjhDb2RlUG9pbnQiLCJ1dGY4Qnl0ZXNTZWVuIiwidXRmOEJ5dGVzTmVlZGVkIiwidXRmOExvd2VyQm91bmRhcnkiLCJ1dGY4VXBwZXJCb3VuZGFyeSIsImhhbmRsZXIiLCJzdHJlYW0iLCJiaXRlIiwiY29kZV9wb2ludCIsIlRleHREZWNvZGVyIiwiZXhwb3J0cyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9CT01zZWVuIiwiX2RvTm90Rmx1c2giLCJfZGVjb2RlciIsIm5vcm1hbGl6ZWRMYWJlbCIsIlJhbmdlRXJyb3IiLCJFcnJvciIsIl9lbmNvZGluZyIsIl9pZ25vcmVCT00iLCJpZ25vcmVCT00iLCJfZXJyb3JNb2RlIiwiZ2V0IiwiX3RoaXMkX2VuY29kaW5nJG5hbWUkIiwiX3RoaXMkX2VuY29kaW5nIiwiZGVjb2RlIiwiYnl0ZXMiLCJCb29sZWFuIiwiaW5wdXRfc3RyZWFtIiwib3V0cHV0IiwicmVzdWx0IiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwic2VyaWFsaXplU3RyZWFtIl0sInNvdXJjZXMiOlsiVGV4dERlY29kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBmb3JrIG9mIHRleHQtZW5jb2RpbmcgYnV0IHdpdGggb25seSBVVEYtOCBkZWNvZGVyLlxuLy8gYFRleHRFbmNvZGVyYCBpcyBpbiBIZXJtZXMgYW5kIHdlIG9ubHkgbmVlZCB1dGYtOCBkZWNvZGVyIGZvciBSZWFjdCBTZXJ2ZXIgQ29tcG9uZW50cy5cbi8vXG4vLyBodHRwczovL2dpdGh1Yi5jb20vaW5leG9yYWJsZXRhc2gvdGV4dC1lbmNvZGluZy9ibG9iLzNmMzMwOTY0YzBlOTdlMWVkMzQ0YzJhM2U5NjNmNDU5ODYxMGE3YWQvbGliL2VuY29kaW5nLmpzI0wxXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbnVtYmVyIGlzIHdpdGhpbiBhIHNwZWNpZmllZCByYW5nZS5cbiAqIEBwYXJhbSBhIFRoZSBudW1iZXIgdG8gdGVzdC5cbiAqIEBwYXJhbSBtaW4gVGhlIG1pbmltdW0gdmFsdWUgaW4gdGhlIHJhbmdlLCBpbmNsdXNpdmUuXG4gKiBAcGFyYW0gbWF4IFRoZSBtYXhpbXVtIHZhbHVlIGluIHRoZSByYW5nZSwgaW5jbHVzaXZlLlxuICogQHJldHVybnMgYHRydWVgIGlmIGEgcGFzc2VkIG51bWJlciBpcyB3aXRoaW4gdGhlIHNwZWNpZmllZCByYW5nZS5cbiAqL1xuZnVuY3Rpb24gaW5SYW5nZShhOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gbWluIDw9IGEgJiYgYSA8PSBtYXg7XG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgb2YgY29kZSBwb2ludHMgdG8gYSBzdHJpbmcuXG4gKiBAcGFyYW0gY29kZVBvaW50cyBBcnJheSBvZiBjb2RlIHBvaW50cy5cbiAqIEByZXR1cm5zIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgZ2l2ZW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNvZGVQb2ludHNUb1N0cmluZyhjb2RlUG9pbnRzOiBudW1iZXJbXSk6IHN0cmluZyB7XG4gIGxldCBzID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgIGxldCBjcCA9IGNvZGVQb2ludHNbaV07XG4gICAgaWYgKGNwIDw9IDB4ZmZmZikge1xuICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3AgLT0gMHgxMDAwMDtcbiAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoY3AgPj4gMTApICsgMHhkODAwLCAoY3AgJiAweDNmZikgKyAweGRjMDApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQnl0ZXMoaW5wdXQ/OiBBcnJheUJ1ZmZlciB8IERhdGFWaWV3KTogVWludDhBcnJheSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xuICB9IGVsc2UgaWYgKFxuICAgIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcbiAgICAnYnVmZmVyJyBpbiBpbnB1dCAmJlxuICAgIGlucHV0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnB1dC5idWZmZXIsIGlucHV0LmJ5dGVPZmZzZXQsIGlucHV0LmJ5dGVMZW5ndGgpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbn1cblxuLyoqXG4gKiBFbmQtb2Ytc3RyZWFtIGlzIGEgc3BlY2lhbCB0b2tlbiB0aGF0IHNpZ25pZmllcyBubyBtb3JlIHRva2Vuc1xuICogYXJlIGluIHRoZSBzdHJlYW0uXG4gKi9cbmNvbnN0IEVORF9PRl9TVFJFQU0gPSAtMTtcblxuY29uc3QgRklOSVNIRUQgPSAtMTtcblxuLyoqXG4gKiBBIHN0cmVhbSByZXByZXNlbnRzIGFuIG9yZGVyZWQgc2VxdWVuY2Ugb2YgdG9rZW5zLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHshKG51bWJlcltdfFVpbnQ4QXJyYXkpfSB0b2tlbnMgQXJyYXkgb2YgdG9rZW5zIHRoYXQgcHJvdmlkZSB0aGUgc3RyZWFtLlxuICovXG5jbGFzcyBTdHJlYW0ge1xuICBwcml2YXRlIHRva2VuczogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3IodG9rZW5zOiBudW1iZXJbXSB8IFVpbnQ4QXJyYXkpIHtcbiAgICB0aGlzLnRva2VucyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRva2Vucyk7XG4gICAgLy8gUmV2ZXJzZWQgYXMgcHVzaC9wb3AgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBzaGlmdC91bnNoaWZ0LlxuICAgIHRoaXMudG9rZW5zLnJldmVyc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGVuZC1vZi1zdHJlYW0gaGFzIGJlZW4gaGl0LlxuICAgKi9cbiAgZW5kT2ZTdHJlYW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnRva2Vucy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhIHRva2VuIGlzIHJlYWQgZnJvbSBhIHN0cmVhbSwgdGhlIGZpcnN0IHRva2VuIGluIHRoZVxuICAgKiBzdHJlYW0gbXVzdCBiZSByZXR1cm5lZCBhbmQgc3Vic2VxdWVudGx5IHJlbW92ZWQsIGFuZFxuICAgKiBlbmQtb2Ytc3RyZWFtIG11c3QgYmUgcmV0dXJuZWQgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEdldCB0aGUgbmV4dCB0b2tlbiBmcm9tIHRoZSBzdHJlYW0sIG9yXG4gICAqIGVuZF9vZl9zdHJlYW0uXG4gICAqL1xuICByZWFkKCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLnRva2Vucy5sZW5ndGgpIHJldHVybiBFTkRfT0ZfU1RSRUFNO1xuICAgIHJldHVybiB0aGlzLnRva2Vucy5wb3AoKSE7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBvbmUgb3IgbW9yZSB0b2tlbnMgYXJlIHByZXBlbmRlZCB0byBhIHN0cmVhbSwgdGhvc2UgdG9rZW5zXG4gICAqIG11c3QgYmUgaW5zZXJ0ZWQsIGluIGdpdmVuIG9yZGVyLCBiZWZvcmUgdGhlIGZpcnN0IHRva2VuIGluIHRoZVxuICAgKiBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiBUaGUgdG9rZW4ocykgdG8gcHJlcGVuZCB0byB0aGUgc3RyZWFtLlxuICAgKi9cbiAgcHJlcGVuZCh0b2tlbjogbnVtYmVyIHwgbnVtYmVyW10pOiB2b2lkIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcbiAgICAgIHdoaWxlICh0b2tlbi5sZW5ndGgpIHRoaXMudG9rZW5zLnB1c2godG9rZW4ucG9wKCkhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gb25lIG9yIG1vcmUgdG9rZW5zIGFyZSBwdXNoZWQgdG8gYSBzdHJlYW0sIHRob3NlIHRva2Vuc1xuICAgKiBtdXN0IGJlIGluc2VydGVkLCBpbiBnaXZlbiBvcmRlciwgYWZ0ZXIgdGhlIGxhc3QgdG9rZW4gaW4gdGhlXG4gICAqIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIHRva2VuIFRoZSB0b2tlbnMocykgdG8gcHVzaCB0byB0aGUgc3RyZWFtLlxuICAgKi9cbiAgcHVzaCh0b2tlbjogbnVtYmVyIHwgbnVtYmVyW10pOiB2b2lkIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcbiAgICAgIHdoaWxlICh0b2tlbi5sZW5ndGgpIHRoaXMudG9rZW5zLnVuc2hpZnQodG9rZW4uc2hpZnQoKSEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRva2Vucy51bnNoaWZ0KHRva2VuKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjb2RlckVycm9yKGZhdGFsOiBib29sZWFuLCBvcHRfY29kZV9wb2ludD86IG51bWJlcikge1xuICBpZiAoZmF0YWwpIHRocm93IFR5cGVFcnJvcignRGVjb2RlciBlcnJvcicpO1xuICByZXR1cm4gb3B0X2NvZGVfcG9pbnQgfHwgMHhmZmZkO1xufVxuXG5pbnRlcmZhY2UgRW5jb2Rpbmcge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxhYmVsczogc3RyaW5nW107XG59XG5cbmNvbnN0IExBQkVMX0VOQ09ESU5HX01BUDogeyBba2V5OiBzdHJpbmddOiBFbmNvZGluZyB9ID0ge307XG5cbmZ1bmN0aW9uIGdldEVuY29kaW5nKGxhYmVsOiBzdHJpbmcpOiBFbmNvZGluZyB8IG51bGwge1xuICBsYWJlbCA9IGxhYmVsLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobGFiZWwgaW4gTEFCRUxfRU5DT0RJTkdfTUFQKSB7XG4gICAgcmV0dXJuIExBQkVMX0VOQ09ESU5HX01BUFtsYWJlbF07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKiBbRW5jb2RpbmdzIHRhYmxlXShodHRwczovL2VuY29kaW5nLnNwZWMud2hhdHdnLm9yZy9lbmNvZGluZ3MuanNvbikgKEluY29tcGxldGUgYXMgd2Ugb25seSBuZWVkIFRleHREZWNvZGVyIHV0ZjggaW4gRXhwbyBSU0MuIEEgbW9yZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUgYWRkZWQgdG8gSGVybWVzIGFzIG5hdGl2ZSBjb2RlLikgKi9cbmNvbnN0IEVOQ09ESU5HX01BUDogeyBoZWFkaW5nOiBzdHJpbmc7IGVuY29kaW5nczogRW5jb2RpbmdbXSB9W10gPSBbXG4gIHtcbiAgICBlbmNvZGluZ3M6IFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWxzOiBbXG4gICAgICAgICAgJ3VuaWNvZGUtMS0xLXV0Zi04JyxcbiAgICAgICAgICAndW5pY29kZTExdXRmOCcsXG4gICAgICAgICAgJ3VuaWNvZGUyMHV0ZjgnLFxuICAgICAgICAgICd1dGYtOCcsXG4gICAgICAgICAgJ3V0ZjgnLFxuICAgICAgICAgICd4LXVuaWNvZGUyMHV0ZjgnLFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiAnVVRGLTgnLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGhlYWRpbmc6ICdUaGUgRW5jb2RpbmcnLFxuICB9LFxuXTtcblxuRU5DT0RJTkdfTUFQLmZvckVhY2goKGNhdGVnb3J5KSA9PiB7XG4gIGNhdGVnb3J5LmVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZykgPT4ge1xuICAgIGVuY29kaW5nLmxhYmVscy5mb3JFYWNoKChsYWJlbCkgPT4ge1xuICAgICAgTEFCRUxfRU5DT0RJTkdfTUFQW2xhYmVsXSA9IGVuY29kaW5nO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBSZWdpc3RyeSBvZiBvZiBlbmNvZGVyL2RlY29kZXIgZmFjdG9yaWVzLCBieSBlbmNvZGluZyBuYW1lLlxuY29uc3QgREVDT0RFUlM6IHsgW2tleTogc3RyaW5nXTogKG9wdGlvbnM6IHsgZmF0YWw6IGJvb2xlYW4gfSkgPT4gVVRGOERlY29kZXIgfSA9IHtcbiAgJ1VURi04JzogKG9wdGlvbnMpID0+IG5ldyBVVEY4RGVjb2RlcihvcHRpb25zKSxcbn07XG5cbi8vIDkuMS4xIHV0Zi04IGRlY29kZXJcblxuaW50ZXJmYWNlIERlY29kZXIge1xuICBoYW5kbGVyOiAoc3RyZWFtOiBTdHJlYW0sIGJpdGU6IG51bWJlcikgPT4gbnVtYmVyIHwgbnVtYmVyW10gfCBudWxsIHwgLTE7XG59XG5cbmNsYXNzIFVURjhEZWNvZGVyIGltcGxlbWVudHMgRGVjb2RlciB7XG4gIC8vIHV0Zi04J3MgZGVjb2RlcidzIGhhcyBhbiBhc3NvY2lhdGVkIHV0Zi04IGNvZGUgcG9pbnQsIHV0Zi04XG4gIC8vIGJ5dGVzIHNlZW4sIGFuZCB1dGYtOCBieXRlcyBuZWVkZWQgKGFsbCBpbml0aWFsbHkgMCksIGEgdXRmLThcbiAgLy8gbG93ZXIgYm91bmRhcnkgKGluaXRpYWxseSAweDgwKSwgYW5kIGEgdXRmLTggdXBwZXIgYm91bmRhcnlcbiAgLy8gKGluaXRpYWxseSAweEJGKS5cbiAgcHJpdmF0ZSB1dGY4Q29kZVBvaW50ID0gMDtcbiAgcHJpdmF0ZSB1dGY4Qnl0ZXNTZWVuID0gMDtcbiAgcHJpdmF0ZSB1dGY4Qnl0ZXNOZWVkZWQgPSAwO1xuICBwcml2YXRlIHV0ZjhMb3dlckJvdW5kYXJ5ID0gMHg4MDtcbiAgcHJpdmF0ZSB1dGY4VXBwZXJCb3VuZGFyeSA9IDB4YmY7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogeyBmYXRhbDogYm9vbGVhbiB9KSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSBUaGUgc3RyZWFtIG9mIGJ5dGVzIGJlaW5nIGRlY29kZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRlIFRoZSBuZXh0IGJ5dGUgcmVhZCBmcm9tIHRoZSBzdHJlYW0uXG4gICAqIEByZXR1cm4gez8obnVtYmVyfCFBcnJheS48bnVtYmVyPil9IFRoZSBuZXh0IGNvZGUgcG9pbnQocylcbiAgICogICAgIGRlY29kZWQsIG9yIG51bGwgaWYgbm90IGVub3VnaCBkYXRhIGV4aXN0cyBpbiB0aGUgaW5wdXRcbiAgICogICAgIHN0cmVhbSB0byBkZWNvZGUgYSBjb21wbGV0ZSBjb2RlIHBvaW50LlxuICAgKi9cbiAgaGFuZGxlcihzdHJlYW06IFN0cmVhbSwgYml0ZTogbnVtYmVyKTogbnVtYmVyIHwgbnVsbCB8IC0xIHtcbiAgICAvLyAxLiBJZiBieXRlIGlzIGVuZC1vZi1zdHJlYW0gYW5kIHV0Zi04IGJ5dGVzIG5lZWRlZCBpcyBub3QgMCxcbiAgICAvLyBzZXQgdXRmLTggYnl0ZXMgbmVlZGVkIHRvIDAgYW5kIHJldHVybiBlcnJvci5cbiAgICBpZiAoYml0ZSA9PT0gRU5EX09GX1NUUkVBTSAmJiB0aGlzLnV0ZjhCeXRlc05lZWRlZCAhPT0gMCkge1xuICAgICAgdGhpcy51dGY4Qnl0ZXNOZWVkZWQgPSAwO1xuICAgICAgcmV0dXJuIGRlY29kZXJFcnJvcih0aGlzLm9wdGlvbnMuZmF0YWwpO1xuICAgIH1cblxuICAgIC8vIDIuIElmIGJ5dGUgaXMgZW5kLW9mLXN0cmVhbSwgcmV0dXJuIGZpbmlzaGVkLlxuICAgIGlmIChiaXRlID09PSBFTkRfT0ZfU1RSRUFNKSByZXR1cm4gRklOSVNIRUQ7XG5cbiAgICAvLyAzLiBJZiB1dGYtOCBieXRlcyBuZWVkZWQgaXMgMCwgYmFzZWQgb24gYnl0ZTpcbiAgICBpZiAodGhpcy51dGY4Qnl0ZXNOZWVkZWQgPT09IDApIHtcbiAgICAgIC8vIDB4MDAgdG8gMHg3RlxuICAgICAgaWYgKGluUmFuZ2UoYml0ZSwgMHgwMCwgMHg3ZikpIHtcbiAgICAgICAgLy8gUmV0dXJuIGEgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSBpcyBieXRlLlxuICAgICAgICByZXR1cm4gYml0ZTtcbiAgICAgIH1cblxuICAgICAgLy8gMHhDMiB0byAweERGXG4gICAgICBlbHNlIGlmIChpblJhbmdlKGJpdGUsIDB4YzIsIDB4ZGYpKSB7XG4gICAgICAgIC8vIDEuIFNldCB1dGYtOCBieXRlcyBuZWVkZWQgdG8gMS5cbiAgICAgICAgdGhpcy51dGY4Qnl0ZXNOZWVkZWQgPSAxO1xuXG4gICAgICAgIC8vIDIuIFNldCBVVEYtOCBjb2RlIHBvaW50IHRvIGJ5dGUgJiAweDFGLlxuICAgICAgICB0aGlzLnV0ZjhDb2RlUG9pbnQgPSBiaXRlICYgMHgxZjtcbiAgICAgIH1cblxuICAgICAgLy8gMHhFMCB0byAweEVGXG4gICAgICBlbHNlIGlmIChpblJhbmdlKGJpdGUsIDB4ZTAsIDB4ZWYpKSB7XG4gICAgICAgIC8vIDEuIElmIGJ5dGUgaXMgMHhFMCwgc2V0IHV0Zi04IGxvd2VyIGJvdW5kYXJ5IHRvIDB4QTAuXG4gICAgICAgIGlmIChiaXRlID09PSAweGUwKSB0aGlzLnV0ZjhMb3dlckJvdW5kYXJ5ID0gMHhhMDtcbiAgICAgICAgLy8gMi4gSWYgYnl0ZSBpcyAweEVELCBzZXQgdXRmLTggdXBwZXIgYm91bmRhcnkgdG8gMHg5Ri5cbiAgICAgICAgaWYgKGJpdGUgPT09IDB4ZWQpIHRoaXMudXRmOFVwcGVyQm91bmRhcnkgPSAweDlmO1xuICAgICAgICAvLyAzLiBTZXQgdXRmLTggYnl0ZXMgbmVlZGVkIHRvIDIuXG4gICAgICAgIHRoaXMudXRmOEJ5dGVzTmVlZGVkID0gMjtcbiAgICAgICAgLy8gNC4gU2V0IFVURi04IGNvZGUgcG9pbnQgdG8gYnl0ZSAmIDB4Ri5cbiAgICAgICAgdGhpcy51dGY4Q29kZVBvaW50ID0gYml0ZSAmIDB4ZjtcbiAgICAgIH1cblxuICAgICAgLy8gMHhGMCB0byAweEY0XG4gICAgICBlbHNlIGlmIChpblJhbmdlKGJpdGUsIDB4ZjAsIDB4ZjQpKSB7XG4gICAgICAgIC8vIDEuIElmIGJ5dGUgaXMgMHhGMCwgc2V0IHV0Zi04IGxvd2VyIGJvdW5kYXJ5IHRvIDB4OTAuXG4gICAgICAgIGlmIChiaXRlID09PSAweGYwKSB0aGlzLnV0ZjhMb3dlckJvdW5kYXJ5ID0gMHg5MDtcbiAgICAgICAgLy8gMi4gSWYgYnl0ZSBpcyAweEY0LCBzZXQgdXRmLTggdXBwZXIgYm91bmRhcnkgdG8gMHg4Ri5cbiAgICAgICAgaWYgKGJpdGUgPT09IDB4ZjQpIHRoaXMudXRmOFVwcGVyQm91bmRhcnkgPSAweDhmO1xuICAgICAgICAvLyAzLiBTZXQgdXRmLTggYnl0ZXMgbmVlZGVkIHRvIDMuXG4gICAgICAgIHRoaXMudXRmOEJ5dGVzTmVlZGVkID0gMztcbiAgICAgICAgLy8gNC4gU2V0IFVURi04IGNvZGUgcG9pbnQgdG8gYnl0ZSAmIDB4Ny5cbiAgICAgICAgdGhpcy51dGY4Q29kZVBvaW50ID0gYml0ZSAmIDB4NztcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlXG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGVycm9yLlxuICAgICAgICByZXR1cm4gZGVjb2RlckVycm9yKHRoaXMub3B0aW9ucy5mYXRhbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBjb250aW51ZS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIDQuIElmIGJ5dGUgaXMgbm90IGluIHRoZSByYW5nZSB1dGYtOCBsb3dlciBib3VuZGFyeSB0byB1dGYtOFxuICAgIC8vIHVwcGVyIGJvdW5kYXJ5LCBpbmNsdXNpdmUsIHJ1biB0aGVzZSBzdWJzdGVwczpcbiAgICBpZiAoIWluUmFuZ2UoYml0ZSwgdGhpcy51dGY4TG93ZXJCb3VuZGFyeSwgdGhpcy51dGY4VXBwZXJCb3VuZGFyeSkpIHtcbiAgICAgIC8vIDEuIFNldCB1dGYtOCBjb2RlIHBvaW50LCB1dGYtOCBieXRlcyBuZWVkZWQsIGFuZCB1dGYtOFxuICAgICAgLy8gYnl0ZXMgc2VlbiB0byAwLCBzZXQgdXRmLTggbG93ZXIgYm91bmRhcnkgdG8gMHg4MCwgYW5kIHNldFxuICAgICAgLy8gdXRmLTggdXBwZXIgYm91bmRhcnkgdG8gMHhCRi5cbiAgICAgIHRoaXMudXRmOENvZGVQb2ludCA9IDA7XG4gICAgICB0aGlzLnV0ZjhCeXRlc05lZWRlZCA9IDA7XG4gICAgICB0aGlzLnV0ZjhCeXRlc1NlZW4gPSAwO1xuICAgICAgdGhpcy51dGY4TG93ZXJCb3VuZGFyeSA9IDB4ODA7XG4gICAgICB0aGlzLnV0ZjhVcHBlckJvdW5kYXJ5ID0gMHhiZjtcblxuICAgICAgLy8gMi4gUHJlcGVuZCBieXRlIHRvIHN0cmVhbS5cbiAgICAgIHN0cmVhbS5wcmVwZW5kKGJpdGUpO1xuXG4gICAgICAvLyAzLiBSZXR1cm4gZXJyb3IuXG4gICAgICByZXR1cm4gZGVjb2RlckVycm9yKHRoaXMub3B0aW9ucy5mYXRhbCk7XG4gICAgfVxuXG4gICAgLy8gNS4gU2V0IHV0Zi04IGxvd2VyIGJvdW5kYXJ5IHRvIDB4ODAgYW5kIHV0Zi04IHVwcGVyIGJvdW5kYXJ5XG4gICAgLy8gdG8gMHhCRi5cbiAgICB0aGlzLnV0ZjhMb3dlckJvdW5kYXJ5ID0gMHg4MDtcbiAgICB0aGlzLnV0ZjhVcHBlckJvdW5kYXJ5ID0gMHhiZjtcblxuICAgIC8vIDYuIFNldCBVVEYtOCBjb2RlIHBvaW50IHRvIChVVEYtOCBjb2RlIHBvaW50IDw8IDYpIHwgKGJ5dGUgJlxuICAgIC8vIDB4M0YpXG4gICAgdGhpcy51dGY4Q29kZVBvaW50ID0gKHRoaXMudXRmOENvZGVQb2ludCA8PCA2KSB8IChiaXRlICYgMHgzZik7XG5cbiAgICAvLyA3LiBJbmNyZWFzZSB1dGYtOCBieXRlcyBzZWVuIGJ5IG9uZS5cbiAgICB0aGlzLnV0ZjhCeXRlc1NlZW4gKz0gMTtcblxuICAgIC8vIDguIElmIHV0Zi04IGJ5dGVzIHNlZW4gaXMgbm90IGVxdWFsIHRvIHV0Zi04IGJ5dGVzIG5lZWRlZCxcbiAgICAvLyBjb250aW51ZS5cbiAgICBpZiAodGhpcy51dGY4Qnl0ZXNTZWVuICE9PSB0aGlzLnV0ZjhCeXRlc05lZWRlZCkgcmV0dXJuIG51bGw7XG5cbiAgICAvLyA5LiBMZXQgY29kZSBwb2ludCBiZSB1dGYtOCBjb2RlIHBvaW50LlxuICAgIGNvbnN0IGNvZGVfcG9pbnQgPSB0aGlzLnV0ZjhDb2RlUG9pbnQ7XG5cbiAgICAvLyAxMC4gU2V0IHV0Zi04IGNvZGUgcG9pbnQsIHV0Zi04IGJ5dGVzIG5lZWRlZCwgYW5kIHV0Zi04IGJ5dGVzXG4gICAgLy8gc2VlbiB0byAwLlxuICAgIHRoaXMudXRmOENvZGVQb2ludCA9IDA7XG4gICAgdGhpcy51dGY4Qnl0ZXNOZWVkZWQgPSAwO1xuICAgIHRoaXMudXRmOEJ5dGVzU2VlbiA9IDA7XG5cbiAgICAvLyAxMS4gUmV0dXJuIGEgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSBpcyBjb2RlIHBvaW50LlxuICAgIHJldHVybiBjb2RlX3BvaW50O1xuICB9XG59XG5cbi8vIDguMSBJbnRlcmZhY2UgVGV4dERlY29kZXJcbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IGNsYXNzIFRleHREZWNvZGVyIHtcbiAgcHJpdmF0ZSBfZW5jb2Rpbmc6IEVuY29kaW5nIHwgbnVsbDtcbiAgcHJpdmF0ZSBfaWdub3JlQk9NOiBib29sZWFuO1xuICBwcml2YXRlIF9lcnJvck1vZGU6IHN0cmluZztcbiAgcHJpdmF0ZSBfQk9Nc2VlbjogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9kb05vdEZsdXNoOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2RlY29kZXI6IFVURjhEZWNvZGVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbGFiZWw6IHN0cmluZyA9ICd1dGYtOCcsXG4gICAgb3B0aW9uczoge1xuICAgICAgZmF0YWw/OiBib29sZWFuO1xuICAgICAgaWdub3JlQk9NPzogYm9vbGVhbjtcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdTZWNvbmQgYXJndW1lbnQgb2YgVGV4dERlY29kZXIgbXVzdCBiZSB1bmRlZmluZWQgb3IgYW4gb2JqZWN0LCBlLmcuIHsgZmF0YWw6IHRydWUgfSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZExhYmVsID0gU3RyaW5nKGxhYmVsKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBlbmNvZGluZyA9IGdldEVuY29kaW5nKG5vcm1hbGl6ZWRMYWJlbCk7XG4gICAgaWYgKGVuY29kaW5nID09PSBudWxsIHx8IGVuY29kaW5nLm5hbWUgPT09ICdyZXBsYWNlbWVudCcpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVbmtub3duIGVuY29kaW5nOiAke2xhYmVsfSAobm9ybWFsaXplZDogJHtub3JtYWxpemVkTGFiZWx9KWApO1xuICAgIH1cblxuICAgIGlmICghREVDT0RFUlNbZW5jb2RpbmcubmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRGVjb2RlciBub3QgcHJlc2VudDogJHtlbmNvZGluZy5uYW1lfWApO1xuICAgIH1cblxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgdGhpcy5faWdub3JlQk9NID0gISFvcHRpb25zLmlnbm9yZUJPTTtcbiAgICB0aGlzLl9lcnJvck1vZGUgPSBvcHRpb25zLmZhdGFsID8gJ2ZhdGFsJyA6ICdyZXBsYWNlbWVudCc7XG4gIH1cblxuICAvLyBHZXR0ZXIgbWV0aG9kcyBmb3IgZW5jb2RpbmcsIGZhdGFsLCBhbmQgaWdub3JlQk9NXG4gIGdldCBlbmNvZGluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9lbmNvZGluZz8ubmFtZS50b0xvd2VyQ2FzZSgpID8/ICcnO1xuICB9XG5cbiAgZ2V0IGZhdGFsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9lcnJvck1vZGUgPT09ICdmYXRhbCc7XG4gIH1cblxuICBnZXQgaWdub3JlQk9NKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pZ25vcmVCT007XG4gIH1cblxuICBkZWNvZGUoaW5wdXQ/OiBBcnJheUJ1ZmZlciB8IERhdGFWaWV3LCBvcHRpb25zOiB7IHN0cmVhbT86IGJvb2xlYW4gfSA9IHt9KTogc3RyaW5nIHtcbiAgICBjb25zdCBieXRlcyA9IG5vcm1hbGl6ZUJ5dGVzKGlucHV0KTtcblxuICAgIC8vIDEuIElmIHRoZSBkbyBub3QgZmx1c2ggZmxhZyBpcyB1bnNldCwgc2V0IGRlY29kZXIgdG8gYSBuZXdcbiAgICAvLyBlbmNvZGluZydzIGRlY29kZXIsIHNldCBzdHJlYW0gdG8gYSBuZXcgc3RyZWFtLCBhbmQgdW5zZXQgdGhlXG4gICAgLy8gQk9NIHNlZW4gZmxhZy5cbiAgICBpZiAoIXRoaXMuX2RvTm90Rmx1c2gpIHtcbiAgICAgIHRoaXMuX2RlY29kZXIgPSBERUNPREVSU1t0aGlzLl9lbmNvZGluZyEubmFtZV0oe1xuICAgICAgICBmYXRhbDogdGhpcy5mYXRhbCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fQk9Nc2VlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIDIuIElmIG9wdGlvbnMncyBzdHJlYW0gaXMgdHJ1ZSwgc2V0IHRoZSBkbyBub3QgZmx1c2ggZmxhZywgYW5kXG4gICAgLy8gdW5zZXQgdGhlIGRvIG5vdCBmbHVzaCBmbGFnIG90aGVyd2lzZS5cbiAgICB0aGlzLl9kb05vdEZsdXNoID0gQm9vbGVhbihvcHRpb25zWydzdHJlYW0nXSk7XG5cbiAgICAvLyAzLiBJZiBpbnB1dCBpcyBnaXZlbiwgcHVzaCBhIGNvcHkgb2YgaW5wdXQgdG8gc3RyZWFtLlxuICAgIC8vIFRPRE86IEFsaWduIHdpdGggc3BlYyBhbGdvcml0aG0gLSBtYWludGFpbiBzdHJlYW0gb24gaW5zdGFuY2UuXG4gICAgY29uc3QgaW5wdXRfc3RyZWFtID0gbmV3IFN0cmVhbShieXRlcyk7XG5cbiAgICAvLyA0LiBMZXQgb3V0cHV0IGJlIGEgbmV3IHN0cmVhbS5cbiAgICBjb25zdCBvdXRwdXQ6IG51bWJlcltdID0gW107XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgdG9rZW4gPSBpbnB1dF9zdHJlYW0ucmVhZCgpO1xuXG4gICAgICBpZiAodG9rZW4gPT09IEVORF9PRl9TVFJFQU0pIGJyZWFrO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWNvZGVyIS5oYW5kbGVyKGlucHV0X3N0cmVhbSwgdG9rZW4pO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBGSU5JU0hFRCkgYnJlYWs7XG5cbiAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgb3V0cHV0LnB1c2gocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2RvTm90Rmx1c2gpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVjb2RlciEuaGFuZGxlcihpbnB1dF9zdHJlYW0sIGlucHV0X3N0cmVhbS5yZWFkKCkpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBGSU5JU0hFRCkgYnJlYWs7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSBvdXRwdXQucHVzaCguLi5yZXN1bHQpO1xuICAgICAgICBlbHNlIG91dHB1dC5wdXNoKHJlc3VsdCk7XG4gICAgICB9IHdoaWxlICghaW5wdXRfc3RyZWFtLmVuZE9mU3RyZWFtKCkpO1xuICAgICAgdGhpcy5fZGVjb2RlciA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplU3RyZWFtKG91dHB1dCk7XG4gIH1cblxuICAvLyBzZXJpYWxpemVTdHJlYW0gbWV0aG9kIGZvciBjb252ZXJ0aW5nIGNvZGUgcG9pbnRzIHRvIGEgc3RyaW5nXG4gIHByaXZhdGUgc2VyaWFsaXplU3RyZWFtKHN0cmVhbTogbnVtYmVyW10pOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLl9lbmNvZGluZyEubmFtZSA9PT0gJ1VURi04Jykge1xuICAgICAgaWYgKCF0aGlzLl9pZ25vcmVCT00gJiYgIXRoaXMuX0JPTXNlZW4gJiYgc3RyZWFtWzBdID09PSAweGZlZmYpIHtcbiAgICAgICAgLy8gSWYgQk9NIGlzIGRldGVjdGVkIGF0IHRoZSBzdGFydCBvZiB0aGUgc3RyZWFtIGFuZCB3ZSdyZSBub3QgaWdub3JpbmcgaXRcbiAgICAgICAgdGhpcy5fQk9Nc2VlbiA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5zaGlmdCgpOyAvLyBSZW1vdmUgdGhlIEJPTVxuICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl9CT01zZWVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IHRoZSBzdHJlYW0gb2YgY29kZSBwb2ludHMgdG8gYSBzdHJpbmdcbiAgICByZXR1cm4gY29kZVBvaW50c1RvU3RyaW5nKHN0cmVhbSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFZQSxTQUFTQSxPQUFPQSxDQUFDQyxDQUFTLEVBQUVDLEdBQVcsRUFBRUMsR0FBVyxFQUFXO0VBQzdELE9BQU9ELEdBQUcsSUFBSUQsQ0FBQyxJQUFJQSxDQUFDLElBQUlFLEdBQUc7QUFDN0I7QUFPQSxTQUFTQyxrQkFBa0JBLENBQUNDLFVBQW9CLEVBQVU7RUFDeEQsSUFBSUMsQ0FBQyxHQUFHLEVBQUU7RUFDVixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsVUFBVSxDQUFDRyxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO0lBQzFDLElBQUlFLEVBQUUsR0FBR0osVUFBVSxDQUFDRSxDQUFDLENBQUM7SUFDdEIsSUFBSUUsRUFBRSxJQUFJLE1BQU0sRUFBRTtNQUNoQkgsQ0FBQyxJQUFJSSxNQUFNLENBQUNDLFlBQVksQ0FBQ0YsRUFBRSxDQUFDO0lBQzlCLENBQUMsTUFBTTtNQUNMQSxFQUFFLElBQUksT0FBTztNQUNiSCxDQUFDLElBQUlJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDLENBQUNGLEVBQUUsSUFBSSxFQUFFLElBQUksTUFBTSxFQUFFLENBQUNBLEVBQUUsR0FBRyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQ3RFO0VBQ0Y7RUFDQSxPQUFPSCxDQUFDO0FBQ1Y7QUFFQSxTQUFTTSxjQUFjQSxDQUFDQyxLQUE4QixFQUFjO0VBQ2xFLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSUEsS0FBSyxZQUFZQyxXQUFXLEVBQUU7SUFDN0QsT0FBTyxJQUFJQyxVQUFVLENBQUNGLEtBQUssQ0FBQztFQUM5QixDQUFDLE1BQU0sSUFDTCxPQUFPQSxLQUFLLEtBQUss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