5ecb7b6e00d88a9b66f0fe8d05a31d3e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureSyncEngine = configureSyncEngine;
exports.deleteExerciseFromSupabase = deleteExerciseFromSupabase;
exports.syncExerciseToSupabase = syncExerciseToSupabase;
exports.syncHelpers = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _SupabaseClient = require("../supabase/SupabaseClient");
var _store = require("../store");
var _SYNC_RETRY_DELAY = 1000;
var _SYNC_TIMEOUT = 30000;
var _NETWORK_CHECK_INTERVAL = 5000;
function configureSyncEngine() {
  loadInitialData();
  setupRealtimeSubscription();
}
function loadInitialData() {
  return _loadInitialData.apply(this, arguments);
}
function _loadInitialData() {
  _loadInitialData = (0, _asyncToGenerator2.default)(function* () {
    try {
      var user = yield _SupabaseClient.supabaseClient.getCurrentUser();
      if (!user) return;
      var _yield$select$eq2 = yield _SupabaseClient.supabaseClient.getSupabaseClient().from('exercises').select('*').eq('user_id', user.id),
        data = _yield$select$eq2.data,
        error = _yield$select$eq2.error;
      if (error) throw error;
      _store.exercises$.set(data || []);
    } catch (error) {
      console.error('Failed to load initial exercises:', error);
    }
  });
  return _loadInitialData.apply(this, arguments);
}
function setupRealtimeSubscription() {
  var subscription = null;
  var startSubscription = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var user = yield _SupabaseClient.supabaseClient.getCurrentUser();
        if (!user) return;
        subscription = _SupabaseClient.supabaseClient.getSupabaseClient().channel('exercises').on('postgres_changes', {
          event: '*',
          schema: 'public',
          table: 'exercises',
          filter: `user_id=eq.${user.id}`
        }, function (payload) {
          var currentExercises = _store.exercises$.get();
          if (payload.eventType === 'INSERT') {
            var newExercise = payload.new;
            if (newExercise.user_id === user.id) {
              _store.exercises$.push(newExercise);
            }
          } else if (payload.eventType === 'DELETE') {
            var deletedExercise = payload.old;
            var indexToDelete = currentExercises.findIndex(function (ex) {
              return ex.id === deletedExercise.id;
            });
            if (indexToDelete !== -1) {
              _store.exercises$.splice(indexToDelete, 1);
            }
          } else if (payload.eventType === 'UPDATE') {
            var updatedExercise = payload.new;
            if (updatedExercise.user_id === user.id) {
              var indexToUpdate = currentExercises.findIndex(function (ex) {
                return ex.id === updatedExercise.id;
              });
              if (indexToUpdate !== -1) {
                _store.exercises$[indexToUpdate].set(updatedExercise);
              }
            }
          }
        }).subscribe();
      } catch (error) {
        console.error('Failed to set up real-time subscription:', error);
      }
    });
    return function startSubscription() {
      return _ref.apply(this, arguments);
    };
  }();
  _SupabaseClient.supabaseClient.onAuthStateChange(function (event, session) {
    _store.user$.set((session == null ? void 0 : session.user) || null);
    if (subscription) {
      subscription.unsubscribe();
      subscription = null;
    }
    if (session != null && session.user) {
      startSubscription();
      loadInitialData();
    } else {
      _store.exercises$.set([]);
    }
  });
}
function syncExerciseToSupabase(_x) {
  return _syncExerciseToSupabase.apply(this, arguments);
}
function _syncExerciseToSupabase() {
  _syncExerciseToSupabase = (0, _asyncToGenerator2.default)(function* (exercise) {
    try {
      var user = yield _SupabaseClient.supabaseClient.getCurrentUser();
      if (!user) throw new Error('User not authenticated');
      var exerciseToUpsert = {
        id: exercise.id,
        name: exercise.name,
        user_id: exercise.user_id,
        created_at: exercise.created_at
      };
      var _yield$upsert = yield _SupabaseClient.supabaseClient.getSupabaseClient().from('exercises').upsert(exerciseToUpsert),
        error = _yield$upsert.error;
      if (error) throw error;
    } catch (error) {
      console.error('Failed to sync exercise to Supabase:', error);
      throw error;
    }
  });
  return _syncExerciseToSupabase.apply(this, arguments);
}
function deleteExerciseFromSupabase(_x2, _x3) {
  return _deleteExerciseFromSupabase.apply(this, arguments);
}
function _deleteExerciseFromSupabase() {
  _deleteExerciseFromSupabase = (0, _asyncToGenerator2.default)(function* (exerciseId, userId) {
    try {
      var _yield$delete$eq$eq = yield _SupabaseClient.supabaseClient.getSupabaseClient().from('exercises').delete().eq('id', exerciseId).eq('user_id', userId),
        error = _yield$delete$eq$eq.error;
      if (error) throw error;
    } catch (error) {
      console.error('Failed to delete exercise from Supabase:', error);
      throw error;
    }
  });
  return _deleteExerciseFromSupabase.apply(this, arguments);
}
var syncHelpers = exports.syncHelpers = {
  forceSync: function () {
    var _forceSync = (0, _asyncToGenerator2.default)(function* () {
      try {
        var user = yield _SupabaseClient.supabaseClient.getCurrentUser();
        if (!user) return;
        var _yield$select$eq = yield _SupabaseClient.supabaseClient.getSupabaseClient().from('exercises').select('*').eq('user_id', user.id),
          data = _yield$select$eq.data,
          error = _yield$select$eq.error;
        if (!error && data) {
          _store.exercises$.set(data);
        }
      } catch (error) {
        console.error('Failed to force sync:', error);
      }
    });
    function forceSync() {
      return _forceSync.apply(this, arguments);
    }
    return forceSync;
  }(),
  isSyncing: function isSyncing() {
    return false;
  },
  isOnline: function isOnline() {
    if (typeof navigator !== 'undefined' && 'onLine' in navigator) {
      return navigator.onLine;
    }
    return true;
  },
  getPendingChangesCount: function getPendingChangesCount() {
    return 0;
  },
  hasErrors: function hasErrors() {
    return false;
  },
  getErrorMessage: function getErrorMessage() {
    return undefined;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,