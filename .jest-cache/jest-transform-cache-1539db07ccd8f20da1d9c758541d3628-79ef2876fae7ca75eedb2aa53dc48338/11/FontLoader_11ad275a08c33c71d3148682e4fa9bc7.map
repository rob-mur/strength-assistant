{"version":3,"names":["_expoAsset","require","_expoModulesCore","_ExpoFontLoader","_interopRequireDefault","getAssetForSource","source","Asset","fromURI","fromModule","uri","loadSingleFontAsync","_x","_x2","_loadSingleFontAsync","apply","arguments","_asyncToGenerator2","default","name","input","asset","downloadAsync","CodedError","downloaded","ExpoFontLoader","loadAsync","localUri"],"sources":["../src/FontLoader.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource } from './Font.types';\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as Asset;\n  if (!asset.downloadAsync) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'\n    );\n  }\n\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(name, asset.localUri);\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAC,sBAAA,CAAAH,OAAA;AAGM,SAAUI,iBAAiBA,CAACC,MAAkB;EAClD,IAAIA,MAAM,YAAYC,gBAAK,EAAE;IAC3B,OAAOD,MAAM;EACf;EAEA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOC,gBAAK,CAACC,OAAO,CAACF,MAAM,CAAC;EAC9B,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IACrC,OAAOC,gBAAK,CAACE,UAAU,CAACH,MAAM,CAAC;EACjC,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACI,GAAG,KAAK,WAAW,EAAE;IAC1E,OAAOL,iBAAiB,CAACC,MAAM,CAACI,GAAG,CAAC;EACtC;EAKA,OAAOJ,MAAM;AACf;AAAC,SAEqBK,mBAAmBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAlC,WACLC,IAAY,EACZC,KAA2B;IAE3B,IAAMC,KAAK,GAAGD,KAAc;IAC5B,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE;MACxB,MAAM,IAAIC,2BAAU,CAClB,iBAAiB,EACjB,mFAAmF,CACpF;IACH;IAEA,MAAMF,KAAK,CAACC,aAAa,EAAE;IAC3B,IAAI,CAACD,KAAK,CAACG,UAAU,EAAE;MACrB,MAAM,IAAID,2BAAU,CAAC,cAAc,EAAE,sCAAsCJ,IAAI,GAAG,CAAC;IACrF;IACA,MAAMM,uBAAc,CAACC,SAAS,CAACP,IAAI,EAAEE,KAAK,CAACM,QAAQ,CAAC;EACtD,CAAC;EAAA,OAAAb,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}