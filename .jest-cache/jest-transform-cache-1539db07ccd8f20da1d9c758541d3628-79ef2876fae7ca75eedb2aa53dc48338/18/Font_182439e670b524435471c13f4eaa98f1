c5a6f272de4ea1b2c3c36b02d4fafb82
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FontDisplay", {
  enumerable: true,
  get: function get() {
    return _Font.FontDisplay;
  }
});
exports.getLoadedFonts = getLoadedFonts;
exports.isLoaded = isLoaded;
exports.isLoading = isLoading;
exports.loadAsync = loadAsync;
exports.unloadAllAsync = unloadAllAsync;
exports.unloadAsync = unloadAsync;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _ExpoFontLoader = _interopRequireDefault(require("./ExpoFontLoader"));
var _Font = require("./Font.types");
var _FontLoader = require("./FontLoader");
var _memory = require("./memory");
var _server = require("./server");
function isLoaded(fontFamily) {
  if (_expoModulesCore.Platform.OS === 'web') {
    return (0, _memory.isLoadedInCache)(fontFamily) || !!_ExpoFontLoader.default.isLoaded(fontFamily);
  }
  return (0, _memory.isLoadedNative)(fontFamily);
}
function getLoadedFonts() {
  return _ExpoFontLoader.default.getLoadedFonts();
}
function isLoading(fontFamily) {
  return fontFamily in _memory.loadPromises;
}
function loadAsync(fontFamilyOrFontMap, source) {
  var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';
  if (typeof fontFamilyOrFontMap === 'object') {
    if (source) {
      return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \`loadAsync()\` can only be used with a \`string\` value as the first argument.`));
    }
    var fontMap = fontFamilyOrFontMap;
    var names = Object.keys(fontMap);
    if (isServer) {
      names.map(function (name) {
        return (0, _server.registerStaticFont)(name, fontMap[name]);
      });
      return Promise.resolve();
    }
    return Promise.all(names.map(function (name) {
      return loadFontInNamespaceAsync(name, fontMap[name]);
    })).then(function () {});
  }
  if (isServer) {
    (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);
    return Promise.resolve();
  }
  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);
}
function loadFontInNamespaceAsync(_x, _x2) {
  return _loadFontInNamespaceAsync.apply(this, arguments);
}
function _loadFontInNamespaceAsync() {
  _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {
    if (!source) {
      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { "${fontFamily}": ${source} }. Expected asset of type \`FontSource\` for fontFamily of name: "${fontFamily}"`);
    }
    if (isLoaded(fontFamily)) {
      return;
    }
    if (_memory.loadPromises.hasOwnProperty(fontFamily)) {
      return _memory.loadPromises[fontFamily];
    }
    var asset = (0, _FontLoader.getAssetForSource)(source);
    _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {
      try {
        yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);
        (0, _memory.markLoaded)(fontFamily);
      } finally {
        delete _memory.loadPromises[fontFamily];
      }
    })();
    yield _memory.loadPromises[fontFamily];
  });
  return _loadFontInNamespaceAsync.apply(this, arguments);
}
function unloadAllAsync() {
  return _unloadAllAsync.apply(this, arguments);
}
function _unloadAllAsync() {
  _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {
    if (!_ExpoFontLoader.default.unloadAllAsync) {
      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');
    }
    if (Object.keys(_memory.loadPromises).length) {
      throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);
    }
    (0, _memory.purgeCache)();
    yield _ExpoFontLoader.default.unloadAllAsync();
  });
  return _unloadAllAsync.apply(this, arguments);
}
function unloadAsync(_x3, _x4) {
  return _unloadAsync.apply(this, arguments);
}
function _unloadAsync() {
  _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {
    if (!_ExpoFontLoader.default.unloadAsync) {
      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');
    }
    if (typeof fontFamilyOrFontMap === 'object') {
      if (options) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \`unloadAsync()\` can only be used with a \`string\` value as the first argument.`);
      }
      var fontMap = fontFamilyOrFontMap;
      var names = Object.keys(fontMap);
      yield Promise.all(names.map(function (name) {
        return unloadFontInNamespaceAsync(name, fontMap[name]);
      }));
      return;
    }
    return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);
  });
  return _unloadAsync.apply(this, arguments);
}
function unloadFontInNamespaceAsync(_x5, _x6) {
  return _unloadFontInNamespaceAsync.apply(this, arguments);
}
function _unloadFontInNamespaceAsync() {
  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {
    if (!isLoaded(fontFamily)) {
      return;
    } else {
      (0, _memory.purgeFontFamilyFromCache)(fontFamily);
    }
    if (!fontFamily) {
      throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);
    }
    yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);
  });
  return _unloadFontInNamespaceAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,