ac21f4b7008c2d1ae0e6a72832517e6c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["name", "color", "size"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.accessibilityProps = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _colors = require("../styles/themes/v2/colors");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var accessibilityProps = exports.accessibilityProps = _reactNative.Platform.OS === 'web' ? {
  role: 'img',
  focusable: false
} : {
  accessibilityElementsHidden: true,
  importantForAccessibility: 'no-hide-descendants'
};
var loadIconModule = function loadIconModule() {
  try {
    return require('@react-native-vector-icons/material-design-icons').default;
  } catch (e) {
    try {
      return require('@expo/vector-icons/MaterialCommunityIcons').default;
    } catch (e) {
      try {
        return require('react-native-vector-icons/MaterialCommunityIcons').default;
      } catch (e) {
        return null;
      }
    }
  }
};
var IconModule = loadIconModule();
var FallbackIcon = function FallbackIcon(_ref) {
  var name = _ref.name,
    color = _ref.color,
    size = _ref.size,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  console.warn(`Tried to use the icon '${name}' in a component from 'react-native-paper', but none of the required icon libraries are installed.`, `To fix this, please install one of the following:\n` + `- @expo/vector-icons\n` + `- @react-native-vector-icons/material-design-icons\n` + `- react-native-vector-icons\n\n` + `You can also use another method to specify icon: https://callstack.github.io/react-native-paper/docs/guides/icons`);
  return React.createElement(_reactNative.Text, _extends({}, rest, {
    style: [styles.icon, {
      color: color,
      fontSize: size
    }],
    selectable: false
  }), "\u25A1");
};
var MaterialCommunityIcons = IconModule || FallbackIcon;
var DefaultIcon = function DefaultIcon(_ref2) {
  var name = _ref2.name,
    _ref2$color = _ref2.color,
    color = _ref2$color === void 0 ? _colors.black : _ref2$color,
    size = _ref2.size,
    direction = _ref2.direction,
    allowFontScaling = _ref2.allowFontScaling,
    testID = _ref2.testID;
  return React.createElement(MaterialCommunityIcons, _extends({
    allowFontScaling: allowFontScaling,
    name: name,
    color: color,
    size: size,
    style: [{
      transform: [{
        scaleX: direction === 'rtl' ? -1 : 1
      }],
      lineHeight: size
    }, styles.icon],
    pointerEvents: "none",
    selectable: false,
    testID: testID
  }, accessibilityProps));
};
var styles = _reactNative.StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  }
});
var _default = exports.default = DefaultIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb2xvcnMiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsImFjY2Vzc2liaWxpdHlQcm9wcyIsImV4cG9ydHMiLCJQbGF0Zm9ybSIsIk9TIiwicm9sZSIsImZvY3VzYWJsZSIsImFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJsb2FkSWNvbk1vZHVsZSIsIkljb25Nb2R1bGUiLCJGYWxsYmFja0ljb24iLCJfcmVmIiwibmFtZSIsImNvbG9yIiwic2l6ZSIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiY29uc29sZSIsIndhcm4iLCJjcmVhdGVFbGVtZW50IiwiVGV4dCIsInN0eWxlIiwic3R5bGVzIiwiaWNvbiIsImZvbnRTaXplIiwic2VsZWN0YWJsZSIsIk1hdGVyaWFsQ29tbXVuaXR5SWNvbnMiLCJEZWZhdWx0SWNvbiIsIl9yZWYyIiwiX3JlZjIkY29sb3IiLCJibGFjayIsImRpcmVjdGlvbiIsImFsbG93Rm9udFNjYWxpbmciLCJ0ZXN0SUQiLCJ0cmFuc2Zvcm0iLCJzY2FsZVgiLCJsaW5lSGVpZ2h0IiwicG9pbnRlckV2ZW50cyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01hdGVy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