name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

# Concurrency handling - cancel running deployments on new pushes
concurrency:
  group: production-deployment
  cancel-in-progress: true

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  SKIP_DATA_CLEANUP: true
  NODE_ENV: production

permissions:
  contents: write

jobs:
  build-production-apk:
    name: Build Production APK
    runs-on: ubuntu-latest
    environment: Dev
    outputs:
      apk-artifact-name: ${{ steps.build-production.outputs.artifact-name }}
      apk-filename: build_production.apk
      apk-path: ${{ steps.build-production.outputs.apk-path }}
      build-successful: ${{ steps.build-production.outputs.build-successful }}
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: Build Production APK
        uses: ./.github/actions/android-build
        with:
          build-type: production
          devbox-config: android-build
          artifact-name: production-release-apk
        id: build-production

      - name: Create GitHub Release
        id: upload
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            Production build from commit ${{ github.sha }}
            Build successful: ${{ steps.build-production.outputs.build-successful }}

            Changes: ${{ github.event.head_commit.message }}
          files: ${{ steps.build-production.outputs.apk-path }}

  terraform-deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-production-apk
    environment: dev
    outputs:
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
      infrastructure-url: ${{ steps.deploy.outputs.infrastructure-url }}
      terraform-plan-artifact: ${{ steps.deploy.outputs.terraform-plan-artifact }}
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: üìù Create terraform.tfvars
        working-directory: terraform
        run: |
          cat << EOF > terraform.tfvars
          supabase_project_ref = "${{ secrets.SUPABASE_PROJECT_REF }}"
          supabase_access_token = "${{ secrets.SUPABASE_ACCESS_TOKEN }}"
          environment = "dev"
          EOF

      - name: üöÄ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: üìã Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: ‚úÖ Terraform Apply
        id: deploy
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan
          # Generate deployment ID for tracking
          DEPLOYMENT_ID="deploy-$(date +%s)-${GITHUB_SHA:0:8}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "infrastructure-url=https://api.example.com" >> $GITHUB_OUTPUT
          echo "terraform-plan-artifact=terraform-plan-dev" >> $GITHUB_OUTPUT

      - name: üì§ Upload plan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev
          path: terraform/tfplan
          retention-days: 30

