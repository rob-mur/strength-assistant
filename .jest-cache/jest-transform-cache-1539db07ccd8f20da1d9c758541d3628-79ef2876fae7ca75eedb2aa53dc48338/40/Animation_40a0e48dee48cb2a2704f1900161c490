8ec0c4155e0870a98e2e45a93573661b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _AnimatedProps = _interopRequireDefault(require("../nodes/AnimatedProps"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var startNativeAnimationNextId = 1;
var _nativeID = (0, _classPrivateFieldLooseKey2.default)("nativeID");
var _onEnd = (0, _classPrivateFieldLooseKey2.default)("onEnd");
var _useNativeDriver = (0, _classPrivateFieldLooseKey2.default)("useNativeDriver");
var Animation = exports.default = function () {
  function Animation(config) {
    var _config$isInteraction, _config$iterations;
    (0, _classCallCheck2.default)(this, Animation);
    Object.defineProperty(this, _nativeID, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _onEnd, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _useNativeDriver, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
    this.__active = false;
    this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver];
    this.__isLooping = config.isLooping;
    this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    if (__DEV__) {
      this.__debugID = config.debugID;
    }
  }
  return (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] && animatedValue.__isNative === true) {
        throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = onEnd;
      this.__active = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if ((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] != null) {
        var nativeID = (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID];
        var identifier = `${nativeID}:stopAnimation`;
        try {
          _NativeAnimatedHelper.default.API.setWaitingForIdentifier(identifier);
          _NativeAnimatedHelper.default.API.stopAnimation(nativeID);
        } finally {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(identifier);
        }
      }
      this.__active = false;
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__findAnimatedPropsNodes",
    value: function __findAnimatedPropsNodes(node) {
      var result = [];
      if (node instanceof _AnimatedProps.default) {
        result.push(node);
        return result;
      }
      for (var child of node.__getChildren()) {
        result.push.apply(result, (0, _toConsumableArray2.default)(this.__findAnimatedPropsNodes(child)));
      }
      return result;
    }
  }, {
    key: "__startAnimationIfNative",
    value: function __startAnimationIfNative(animatedValue) {
      var _this = this;
      if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver]) {
        return false;
      }
      var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID], animatedValue.__getNativeTag(), config, function (result) {
          _this.__notifyAnimationEnd(result);
          var value = result.value;
          if (value != null) {
            animatedValue.__onAnimatedValueUpdateReceived(value);
            if (_this.__isLooping === true) {
              return;
            }
            _this.__findAnimatedPropsNodes(animatedValue).forEach(function (node) {
              return node.update();
            });
          }
        });
        return true;
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }, {
    key: "__notifyAnimationEnd",
    value: function __notifyAnimationEnd(result) {
      var callback = (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd];
      if (callback != null) {
        (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = null;
        callback(result);
      }
    }
  }, {
    key: "__getDebugID",
    value: function __getDebugID() {
      if (__DEV__) {
        return this.__debugID;
      }
      return undefined;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,