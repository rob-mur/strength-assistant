{"version":3,"names":["_getJestObj","mock","JetBrainsMono_400Regular","NotoSans_400Regular","MaterialCommunityIcons","font","useFonts","jest","fn","SplashScreen","hideAsync","initFirebase","logger","debug","info","warn","error","initSupabase","initializeDataLayer","_interopRequireDefault","require","_asyncToGenerator2","_useAppInit","_reactNative","_expoFont","_expoRouter","_firebase","_logger","_supabase","_sync","_require","describe","mockUseFonts","mockInitFirebase","mockInitSupabase","mockInitializeDataLayer","mockHideAsync","beforeEach","clearAllMocks","test","mockReturnValue","_renderHook","renderHook","useAppInit","result","expect","current","toBe","fontError","Error","toThrow","toHaveBeenCalledWith","objectContaining","service","platform","operation","default","mockResolvedValue","undefined","_renderHook2","waitFor","toHaveBeenCalled","any","Object","mockRejectedValue","originalWindow","global","window","_renderHook3","_renderHook4"],"sources":["useAppInit-test.tsx"],"sourcesContent":["import { useAppInit } from \"@/lib/hooks/useAppInit\";\nimport { renderHook, waitFor } from \"@testing-library/react-native\";\n\n// Mock external dependencies\njest.mock(\"@expo-google-fonts/jetbrains-mono\", () => ({\n  JetBrainsMono_400Regular: \"JetBrainsMono_400Regular\",\n}));\n\njest.mock(\"@expo-google-fonts/noto-sans\", () => ({\n  NotoSans_400Regular: \"NotoSans_400Regular\",\n}));\n\njest.mock(\"@expo/vector-icons\", () => ({\n  MaterialCommunityIcons: {\n    font: { \"MaterialCommunityIcons\": \"MockedFont\" },\n  },\n}));\n\n// Mock the actual modules these depend on\njest.mock(\"expo-font\", () => ({\n  useFonts: jest.fn(),\n}));\n\njest.mock(\"expo-router\", () => ({\n  SplashScreen: {\n    hideAsync: jest.fn(),\n  },\n}));\n\njest.mock(\"@/lib/data/firebase\", () => ({\n  initFirebase: jest.fn(),\n}));\n\njest.mock(\"@/lib/data/firebase/logger\", () => ({\n  logger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\njest.mock(\"@/lib/data/supabase\", () => ({\n  initSupabase: jest.fn(),\n}));\n\njest.mock(\"@/lib/data/sync\", () => ({\n  initializeDataLayer: jest.fn(),\n}));\n\nimport { useFonts } from \"expo-font\";\nimport { SplashScreen } from \"expo-router\";\nimport { initFirebase } from \"@/lib/data/firebase\";\nimport { logger } from \"@/lib/data/firebase/logger\";\nimport { initSupabase } from \"@/lib/data/supabase\";\nimport { initializeDataLayer } from \"@/lib/data/sync\";\n\ndescribe(\"useAppInit\", () => {\n  const mockUseFonts = useFonts as jest.MockedFunction<typeof useFonts>;\n  const mockInitFirebase = initFirebase as jest.MockedFunction<typeof initFirebase>;\n  const mockInitSupabase = initSupabase as jest.MockedFunction<typeof initSupabase>;\n  const mockInitializeDataLayer = initializeDataLayer as jest.MockedFunction<typeof initializeDataLayer>;\n  const mockHideAsync = SplashScreen.hideAsync as jest.MockedFunction<typeof SplashScreen.hideAsync>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test(\"returns false when fonts are not loaded\", () => {\n    mockUseFonts.mockReturnValue([false, null]);\n    \n    const { result } = renderHook(() => useAppInit());\n    \n    expect(result.current).toBe(false);\n  });\n\n  test(\"throws error when font loading fails\", () => {\n    const fontError = new Error(\"Font loading failed\");\n    mockUseFonts.mockReturnValue([false, fontError]);\n    \n    expect(() => renderHook(() => useAppInit())).toThrow(\"Font loading failed\");\n    expect(logger.error).toHaveBeenCalledWith(\"Font loading error\", expect.objectContaining({\n      service: \"App Init\",\n      platform: \"React Native\",\n      operation: \"font_loading\"\n    }));\n  });\n\n  test(\"initializes services and hides splash screen when ready\", async () => {\n    mockUseFonts.mockReturnValue([true, null]);\n    mockInitializeDataLayer.mockResolvedValue(undefined);\n    \n    const { result } = renderHook(() => useAppInit());\n    \n    await waitFor(() => {\n      expect(result.current).toBe(true);\n    });\n    \n    expect(mockInitializeDataLayer).toHaveBeenCalled();\n    expect(mockHideAsync).toHaveBeenCalled();\n    expect(logger.info).toHaveBeenCalledWith(\"Starting app initialization\", expect.any(Object));\n    expect(logger.info).toHaveBeenCalledWith(\"App initialization complete\", expect.any(Object));\n  });\n\n  test(\"handles data layer error gracefully\", async () => {\n    mockUseFonts.mockReturnValue([true, null]);\n    mockInitializeDataLayer.mockRejectedValue(new Error(\"Data layer failed\"));\n    \n    // Mock window to be undefined to test native path\n    const originalWindow = global.window;\n    // @ts-ignore\n    delete global.window;\n    \n    const { result } = renderHook(() => useAppInit());\n    \n    await waitFor(() => {\n      expect(result.current).toBe(true);\n    });\n    \n    expect(logger.error).toHaveBeenCalledWith(\"App initialization error\", expect.objectContaining({\n      operation: \"init\"\n    }));\n    expect(logger.warn).toHaveBeenCalledWith(\"App will continue with limited functionality\", expect.any(Object));\n    \n    // Restore window\n    global.window = originalWindow;\n  });\n\n  test(\"logs initialization steps correctly\", async () => {\n    mockUseFonts.mockReturnValue([true, null]);\n    mockInitializeDataLayer.mockResolvedValue(undefined);\n    \n    const { result } = renderHook(() => useAppInit());\n    \n    await waitFor(() => {\n      expect(result.current).toBe(true);\n    });\n    \n    expect(logger.info).toHaveBeenCalledWith(\"Initializing offline-first data layer...\", expect.objectContaining({\n      operation: \"data_layer_init\"\n    }));\n    expect(logger.info).toHaveBeenCalledWith(\"Offline-first data layer initialized successfully\", expect.objectContaining({\n      operation: \"data_layer_init\"\n    }));\n  });\n\n  test(\"logs debug messages during data layer initialization\", async () => {\n    mockUseFonts.mockReturnValue([true, null]);\n    mockInitializeDataLayer.mockResolvedValue(undefined);\n    \n    renderHook(() => useAppInit());\n    \n    await waitFor(() => {\n      expect(logger.info).toHaveBeenCalledWith(\"Initializing offline-first data layer...\", expect.objectContaining({\n        service: \"App Init\",\n        platform: \"React Native\",\n        operation: \"data_layer_init\"\n      }));\n    });\n    \n    await waitFor(() => {\n      expect(logger.info).toHaveBeenCalledWith(\"Offline-first data layer initialized successfully\", expect.objectContaining({\n        service: \"App Init\", \n        platform: \"React Native\",\n        operation: \"data_layer_init\"\n      }));\n    });\n  });\n});"],"mappings":"AAIAA,WAAA,GAAKC,IAAI,CAAC,mCAAmC,EAAE;EAAA,OAAO;IACpDC,wBAAwB,EAAE;EAC5B,CAAC;AAAA,CAAC,CAAC;AAEHF,WAAA,GAAKC,IAAI,CAAC,8BAA8B,EAAE;EAAA,OAAO;IAC/CE,mBAAmB,EAAE;EACvB,CAAC;AAAA,CAAC,CAAC;AAEHH,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE;EAAA,OAAO;IACrCG,sBAAsB,EAAE;MACtBC,IAAI,EAAE;QAAE,wBAAwB,EAAE;MAAa;IACjD;EACF,CAAC;AAAA,CAAC,CAAC;AAGHL,WAAA,GAAKC,IAAI,CAAC,WAAW,EAAE;EAAA,OAAO;IAC5BK,QAAQ,EAAEC,IAAI,CAACC,EAAE,CAAC;EACpB,CAAC;AAAA,CAAC,CAAC;AAEHR,WAAA,GAAKC,IAAI,CAAC,aAAa,EAAE;EAAA,OAAO;IAC9BQ,YAAY,EAAE;MACZC,SAAS,EAAEH,IAAI,CAACC,EAAE,CAAC;IACrB;EACF,CAAC;AAAA,CAAC,CAAC;AAEHR,WAAA,GAAKC,IAAI,CAAC,qBAAqB,EAAE;EAAA,OAAO;IACtCU,YAAY,EAAEJ,IAAI,CAACC,EAAE,CAAC;EACxB,CAAC;AAAA,CAAC,CAAC;AAEHR,WAAA,GAAKC,IAAI,CAAC,4BAA4B,EAAE;EAAA,OAAO;IAC7CW,MAAM,EAAE;MACNC,KAAK,EAAEN,IAAI,CAACC,EAAE,CAAC,CAAC;MAChBM,IAAI,EAAEP,IAAI,CAACC,EAAE,CAAC,CAAC;MACfO,IAAI,EAAER,IAAI,CAACC,EAAE,CAAC,CAAC;MACfQ,KAAK,EAAET,IAAI,CAACC,EAAE,CAAC;IACjB;EACF,CAAC;AAAA,CAAC,CAAC;AAEHR,WAAA,GAAKC,IAAI,CAAC,qBAAqB,EAAE;EAAA,OAAO;IACtCgB,YAAY,EAAEV,IAAI,CAACC,EAAE,CAAC;EACxB,CAAC;AAAA,CAAC,CAAC;AAEHR,WAAA,GAAKC,IAAI,CAAC,iBAAiB,EAAE;EAAA,OAAO;IAClCiB,mBAAmB,EAAEX,IAAI,CAACC,EAAE,CAAC;EAC/B,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAW,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAhDJ,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAiDA,IAAAI,SAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AACA,IAAAM,SAAA,GAAAN,OAAA;AACA,IAAAO,OAAA,GAAAP,OAAA;AACA,IAAAQ,SAAA,GAAAR,OAAA;AACA,IAAAS,KAAA,GAAAT,OAAA;AAAsD,SAAApB,YAAA;EAAA,IAAA8B,QAAA,GAAAV,OAAA;IAAAb,IAAA,GAAAuB,QAAA,CAAAvB,IAAA;EAAAP,WAAA,YAAAA,YAAA;IAAA,OAAAO,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEtDwB,QAAQ,CAAC,YAAY,EAAE,YAAM;EAC3B,IAAMC,YAAY,GAAG1B,kBAAgD;EACrE,IAAM2B,gBAAgB,GAAGtB,sBAAwD;EACjF,IAAMuB,gBAAgB,GAAGjB,sBAAwD;EACjF,IAAMkB,uBAAuB,GAAGjB,yBAAsE;EACtG,IAAMkB,aAAa,GAAG3B,wBAAY,CAACC,SAA+D;EAElG2B,UAAU,CAAC,YAAM;IACf9B,IAAI,CAAC+B,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,IAAI,CAAC,yCAAyC,EAAE,YAAM;IACpDP,YAAY,CAACQ,eAAe,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAE3C,IAAAC,WAAA,GAAmB,IAAAC,uBAAU,EAAC;QAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;MAAA,EAAC;MAAzCC,MAAM,GAAAH,WAAA,CAANG,MAAM;IAEdC,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;EACpC,CAAC,CAAC;EAEFR,IAAI,CAAC,sCAAsC,EAAE,YAAM;IACjD,IAAMS,SAAS,GAAG,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IAClDjB,YAAY,CAACQ,eAAe,CAAC,CAAC,KAAK,EAAEQ,SAAS,CAAC,CAAC;IAEhDH,MAAM,CAAC;MAAA,OAAM,IAAAH,uBAAU,EAAC;QAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;MAAA,EAAC;IAAA,EAAC,CAACO,OAAO,CAAC,qBAAqB,CAAC;IAC3EL,MAAM,CAACjC,cAAM,CAACI,KAAK,CAAC,CAACmC,oBAAoB,CAAC,oBAAoB,EAAEN,MAAM,CAACO,gBAAgB,CAAC;MACtFC,OAAO,EAAE,UAAU;MACnBC,QAAQ,EAAE,cAAc;MACxBC,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;EAEFhB,IAAI,CAAC,yDAAyD,MAAAlB,kBAAA,CAAAmC,OAAA,EAAE,aAAY;IAC1ExB,YAAY,CAACQ,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1CL,uBAAuB,CAACsB,iBAAiB,CAACC,SAAS,CAAC;IAEpD,IAAAC,YAAA,GAAmB,IAAAjB,uBAAU,EAAC;QAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;MAAA,EAAC;MAAzCC,MAAM,GAAAe,YAAA,CAANf,MAAM;IAEd,MAAM,IAAAgB,oBAAO,EAAC,YAAM;MAClBf,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC,CAAC;IAEFF,MAAM,CAACV,uBAAuB,CAAC,CAAC0B,gBAAgB,CAAC,CAAC;IAClDhB,MAAM,CAACT,aAAa,CAAC,CAACyB,gBAAgB,CAAC,CAAC;IACxChB,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,6BAA6B,EAAEN,MAAM,CAACiB,GAAG,CAACC,MAAM,CAAC,CAAC;IAC3FlB,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,6BAA6B,EAAEN,MAAM,CAACiB,GAAG,CAACC,MAAM,CAAC,CAAC;EAC7F,CAAC,EAAC;EAEFxB,IAAI,CAAC,qCAAqC,MAAAlB,kBAAA,CAAAmC,OAAA,EAAE,aAAY;IACtDxB,YAAY,CAACQ,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1CL,uBAAuB,CAAC6B,iBAAiB,CAAC,IAAIf,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAGzE,IAAMgB,cAAc,GAAGC,MAAM,CAACC,MAAM;IAEpC,OAAOD,MAAM,CAACC,MAAM;IAEpB,IAAAC,YAAA,GAAmB,IAAA1B,uBAAU,EAAC;QAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;MAAA,EAAC;MAAzCC,MAAM,GAAAwB,YAAA,CAANxB,MAAM;IAEd,MAAM,IAAAgB,oBAAO,EAAC,YAAM;MAClBf,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC,CAAC;IAEFF,MAAM,CAACjC,cAAM,CAACI,KAAK,CAAC,CAACmC,oBAAoB,CAAC,0BAA0B,EAAEN,MAAM,CAACO,gBAAgB,CAAC;MAC5FG,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IACHV,MAAM,CAACjC,cAAM,CAACG,IAAI,CAAC,CAACoC,oBAAoB,CAAC,8CAA8C,EAAEN,MAAM,CAACiB,GAAG,CAACC,MAAM,CAAC,CAAC;IAG5GG,MAAM,CAACC,MAAM,GAAGF,cAAc;EAChC,CAAC,EAAC;EAEF1B,IAAI,CAAC,qCAAqC,MAAAlB,kBAAA,CAAAmC,OAAA,EAAE,aAAY;IACtDxB,YAAY,CAACQ,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1CL,uBAAuB,CAACsB,iBAAiB,CAACC,SAAS,CAAC;IAEpD,IAAAW,YAAA,GAAmB,IAAA3B,uBAAU,EAAC;QAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;MAAA,EAAC;MAAzCC,MAAM,GAAAyB,YAAA,CAANzB,MAAM;IAEd,MAAM,IAAAgB,oBAAO,EAAC,YAAM;MAClBf,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC,CAAC;IAEFF,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,0CAA0C,EAAEN,MAAM,CAACO,gBAAgB,CAAC;MAC3GG,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IACHV,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,mDAAmD,EAAEN,MAAM,CAACO,gBAAgB,CAAC;MACpHG,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;EACL,CAAC,EAAC;EAEFhB,IAAI,CAAC,sDAAsD,MAAAlB,kBAAA,CAAAmC,OAAA,EAAE,aAAY;IACvExB,YAAY,CAACQ,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1CL,uBAAuB,CAACsB,iBAAiB,CAACC,SAAS,CAAC;IAEpD,IAAAhB,uBAAU,EAAC;MAAA,OAAM,IAAAC,sBAAU,EAAC,CAAC;IAAA,EAAC;IAE9B,MAAM,IAAAiB,oBAAO,EAAC,YAAM;MAClBf,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,0CAA0C,EAAEN,MAAM,CAACO,gBAAgB,CAAC;QAC3GC,OAAO,EAAE,UAAU;QACnBC,QAAQ,EAAE,cAAc;QACxBC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,IAAAK,oBAAO,EAAC,YAAM;MAClBf,MAAM,CAACjC,cAAM,CAACE,IAAI,CAAC,CAACqC,oBAAoB,CAAC,mDAAmD,EAAEN,MAAM,CAACO,gBAAgB,CAAC;QACpHC,OAAO,EAAE,UAAU;QACnBC,QAAQ,EAAE,cAAc;QACxBC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACJ,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}