{"version":3,"names":["_getJestObj","mock","getSupabaseClient","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_SupabaseClient","_supabase","_require","describe","mockSupabaseClient","from","auth","getUser","onAuthStateChange","signInAnonymously","beforeEach","clearAllMocks","mockReturnValue","test","client","SupabaseClient","expect","not","toHaveBeenCalled","toBeInstanceOf","exercises","toHaveBeenCalledTimes","result","toBe","toThrow","invalid","mockTableRef","select","insert","toHaveBeenCalledWith","default","mockUser","id","email","mockResolvedValue","data","user","error","getCurrentUser","mockError","Error","mockAnonUser","rejects","mockCallback","mockUnsubscribe","mockImplementation","callback","access_token","supabaseClient"],"sources":["SupabaseClient-test.ts"],"sourcesContent":["import { SupabaseClient, supabaseClient } from \"@/lib/data/supabase/SupabaseClient\";\nimport { getSupabaseClient } from \"@/lib/data/supabase/supabase\";\n\n// Mock the supabase module\njest.mock(\"@/lib/data/supabase/supabase\", () => ({\n  getSupabaseClient: jest.fn(),\n}));\n\ndescribe(\"SupabaseClient\", () => {\n  const mockSupabaseClient = {\n    from: jest.fn(),\n    auth: {\n      getUser: jest.fn(),\n      onAuthStateChange: jest.fn(),\n      signInAnonymously: jest.fn(),\n    },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (getSupabaseClient as jest.Mock).mockReturnValue(mockSupabaseClient);\n  });\n\n  describe(\"constructor and client initialization\", () => {\n    test(\"creates instance without immediately calling getSupabaseClient\", () => {\n      const client = new SupabaseClient();\n      expect(getSupabaseClient).not.toHaveBeenCalled();\n      expect(client).toBeInstanceOf(SupabaseClient);\n    });\n\n    test(\"lazy loads client on first access\", () => {\n      const client = new SupabaseClient();\n      \n      // Access exercises to trigger client initialization\n      client.exercises;\n      \n      expect(getSupabaseClient).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"reuses client on subsequent accesses\", () => {\n      const client = new SupabaseClient();\n      \n      // Access multiple times\n      client.exercises;\n      client.exercises;\n      client.getSupabaseClient();\n      \n      expect(getSupabaseClient).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe(\"getSupabaseClient\", () => {\n    test(\"returns the underlying Supabase client\", () => {\n      const client = new SupabaseClient();\n      const result = client.getSupabaseClient();\n      \n      expect(result).toBe(mockSupabaseClient);\n      expect(getSupabaseClient).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"throws error when getSupabaseClient returns null\", () => {\n      (getSupabaseClient as jest.Mock).mockReturnValue(null);\n      \n      const client = new SupabaseClient();\n      \n      expect(() => client.getSupabaseClient()).toThrow(\n        \"Invalid Supabase client: missing required methods\"\n      );\n    });\n\n    test(\"throws error when getSupabaseClient returns invalid client\", () => {\n      (getSupabaseClient as jest.Mock).mockReturnValue({ invalid: true });\n      \n      const client = new SupabaseClient();\n      \n      expect(() => client.getSupabaseClient()).toThrow(\n        \"Invalid Supabase client: missing required methods\"\n      );\n    });\n  });\n\n  describe(\"exercises table access\", () => {\n    test(\"returns typed reference to exercises table\", () => {\n      const mockTableRef = { select: jest.fn(), insert: jest.fn() };\n      mockSupabaseClient.from.mockReturnValue(mockTableRef);\n      \n      const client = new SupabaseClient();\n      const result = client.exercises;\n      \n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');\n      expect(result).toBe(mockTableRef);\n    });\n  });\n\n  describe(\"getCurrentUser\", () => {\n    test(\"returns user when authenticated\", async () => {\n      const mockUser = { id: \"user-123\", email: \"test@example.com\" };\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      });\n      \n      const client = new SupabaseClient();\n      const result = await client.getCurrentUser();\n      \n      expect(result).toBe(mockUser);\n      expect(mockSupabaseClient.auth.getUser).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"signs in anonymously when getUser fails\", async () => {\n      const mockError = new Error(\"Auth error\");\n      const mockAnonUser = { id: \"anon-123\", email: null };\n      \n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: mockError,\n      });\n      \n      mockSupabaseClient.auth.signInAnonymously.mockResolvedValue({\n        data: { user: mockAnonUser },\n        error: null,\n      });\n      \n      const client = new SupabaseClient();\n      const result = await client.getCurrentUser();\n      \n      expect(mockSupabaseClient.auth.signInAnonymously).toHaveBeenCalledTimes(1);\n      expect(result).toBe(mockAnonUser);\n    });\n\n    test(\"throws error when both getUser and signInAnonymously fail\", async () => {\n      const mockError = new Error(\"Auth error\");\n      \n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: mockError,\n      });\n      \n      mockSupabaseClient.auth.signInAnonymously.mockResolvedValue({\n        data: { user: null },\n        error: mockError,\n      });\n      \n      const client = new SupabaseClient();\n      \n      await expect(client.getCurrentUser()).rejects.toThrow(\"Auth error\");\n    });\n  });\n\n  describe(\"onAuthStateChange\", () => {\n    test(\"sets up auth state change listener with proper types\", () => {\n      const mockCallback = jest.fn();\n      const mockUnsubscribe = jest.fn();\n      mockSupabaseClient.auth.onAuthStateChange.mockReturnValue(mockUnsubscribe);\n      \n      const client = new SupabaseClient();\n      const result = client.onAuthStateChange(mockCallback);\n      \n      expect(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);\n      expect(result).toBe(mockUnsubscribe);\n    });\n\n    test(\"callback receives properly typed parameters\", () => {\n      const mockCallback = jest.fn();\n      const mockUnsubscribe = jest.fn();\n      \n      mockSupabaseClient.auth.onAuthStateChange.mockImplementation((callback) => {\n        // Simulate auth state change with properly typed parameters\n        callback('SIGNED_IN', { access_token: 'test', user: { id: 'user-123' } });\n        return mockUnsubscribe;\n      });\n      \n      const client = new SupabaseClient();\n      client.onAuthStateChange(mockCallback);\n      \n      expect(mockCallback).toHaveBeenCalledWith(\n        'SIGNED_IN', \n        { access_token: 'test', user: { id: 'user-123' } }\n      );\n    });\n  });\n\n  describe(\"singleton instance\", () => {\n    test(\"exports working singleton instance\", () => {\n      expect(supabaseClient).toBeInstanceOf(SupabaseClient);\n    });\n\n    test(\"singleton instance works correctly\", () => {\n      const mockTableRef = { select: jest.fn() };\n      mockSupabaseClient.from.mockReturnValue(mockTableRef);\n      \n      const result = supabaseClient.exercises;\n      \n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');\n      expect(result).toBe(mockTableRef);\n    });\n  });\n});"],"mappings":"AAIAA,WAAA,GAAKC,IAAI,CAAC,8BAA8B,EAAE;EAAA,OAAO;IAC/CC,iBAAiB,EAAEC,IAAI,CAACC,EAAE,CAAC;EAC7B,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AANJ,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,SAAA,GAAAH,OAAA;AAAiE,SAAAN,YAAA;EAAA,IAAAU,QAAA,GAAAJ,OAAA;IAAAH,IAAA,GAAAO,QAAA,CAAAP,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAOjEQ,QAAQ,CAAC,gBAAgB,EAAE,YAAM;EAC/B,IAAMC,kBAAkB,GAAG;IACzBC,IAAI,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC;IACfU,IAAI,EAAE;MACJC,OAAO,EAAEZ,IAAI,CAACC,EAAE,CAAC,CAAC;MAClBY,iBAAiB,EAAEb,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5Ba,iBAAiB,EAAEd,IAAI,CAACC,EAAE,CAAC;IAC7B;EACF,CAAC;EAEDc,UAAU,CAAC,YAAM;IACff,IAAI,CAACgB,aAAa,CAAC,CAAC;IACnBjB,2BAAiB,CAAekB,eAAe,CAACR,kBAAkB,CAAC;EACtE,CAAC,CAAC;EAEFD,QAAQ,CAAC,uCAAuC,EAAE,YAAM;IACtDU,IAAI,CAAC,gEAAgE,EAAE,YAAM;MAC3E,IAAMC,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnCC,MAAM,CAACtB,2BAAiB,CAAC,CAACuB,GAAG,CAACC,gBAAgB,CAAC,CAAC;MAChDF,MAAM,CAACF,MAAM,CAAC,CAACK,cAAc,CAACJ,8BAAc,CAAC;IAC/C,CAAC,CAAC;IAEFF,IAAI,CAAC,mCAAmC,EAAE,YAAM;MAC9C,IAAMC,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MAGnCD,MAAM,CAACM,SAAS;MAEhBJ,MAAM,CAACtB,2BAAiB,CAAC,CAAC2B,qBAAqB,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;IAEFR,IAAI,CAAC,sCAAsC,EAAE,YAAM;MACjD,IAAMC,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MAGnCD,MAAM,CAACM,SAAS;MAChBN,MAAM,CAACM,SAAS;MAChBN,MAAM,CAACpB,iBAAiB,CAAC,CAAC;MAE1BsB,MAAM,CAACtB,2BAAiB,CAAC,CAAC2B,qBAAqB,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFlB,QAAQ,CAAC,mBAAmB,EAAE,YAAM;IAClCU,IAAI,CAAC,wCAAwC,EAAE,YAAM;MACnD,IAAMC,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnC,IAAMO,MAAM,GAAGR,MAAM,CAACpB,iBAAiB,CAAC,CAAC;MAEzCsB,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACnB,kBAAkB,CAAC;MACvCY,MAAM,CAACtB,2BAAiB,CAAC,CAAC2B,qBAAqB,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;IAEFR,IAAI,CAAC,kDAAkD,EAAE,YAAM;MAC5DnB,2BAAiB,CAAekB,eAAe,CAAC,IAAI,CAAC;MAEtD,IAAME,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MAEnCC,MAAM,CAAC;QAAA,OAAMF,MAAM,CAACpB,iBAAiB,CAAC,CAAC;MAAA,EAAC,CAAC8B,OAAO,CAC9C,mDACF,CAAC;IACH,CAAC,CAAC;IAEFX,IAAI,CAAC,4DAA4D,EAAE,YAAM;MACtEnB,2BAAiB,CAAekB,eAAe,CAAC;QAAEa,OAAO,EAAE;MAAK,CAAC,CAAC;MAEnE,IAAMX,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MAEnCC,MAAM,CAAC;QAAA,OAAMF,MAAM,CAACpB,iBAAiB,CAAC,CAAC;MAAA,EAAC,CAAC8B,OAAO,CAC9C,mDACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFrB,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCU,IAAI,CAAC,4CAA4C,EAAE,YAAM;MACvD,IAAMa,YAAY,GAAG;QAAEC,MAAM,EAAEhC,IAAI,CAACC,EAAE,CAAC,CAAC;QAAEgC,MAAM,EAAEjC,IAAI,CAACC,EAAE,CAAC;MAAE,CAAC;MAC7DQ,kBAAkB,CAACC,IAAI,CAACO,eAAe,CAACc,YAAY,CAAC;MAErD,IAAMZ,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnC,IAAMO,MAAM,GAAGR,MAAM,CAACM,SAAS;MAE/BJ,MAAM,CAACZ,kBAAkB,CAACC,IAAI,CAAC,CAACwB,oBAAoB,CAAC,WAAW,CAAC;MACjEb,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACG,YAAY,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFvB,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/BU,IAAI,CAAC,iCAAiC,MAAAd,kBAAA,CAAA+B,OAAA,EAAE,aAAY;MAClD,IAAMC,QAAQ,GAAG;QAAEC,EAAE,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAmB,CAAC;MAC9D7B,kBAAkB,CAACE,IAAI,CAACC,OAAO,CAAC2B,iBAAiB,CAAC;QAChDC,IAAI,EAAE;UAAEC,IAAI,EAAEL;QAAS,CAAC;QACxBM,KAAK,EAAE;MACT,CAAC,CAAC;MAEF,IAAMvB,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnC,IAAMO,MAAM,SAASR,MAAM,CAACwB,cAAc,CAAC,CAAC;MAE5CtB,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACQ,QAAQ,CAAC;MAC7Bf,MAAM,CAACZ,kBAAkB,CAACE,IAAI,CAACC,OAAO,CAAC,CAACc,qBAAqB,CAAC,CAAC,CAAC;IAClE,CAAC,EAAC;IAEFR,IAAI,CAAC,yCAAyC,MAAAd,kBAAA,CAAA+B,OAAA,EAAE,aAAY;MAC1D,IAAMS,SAAS,GAAG,IAAIC,KAAK,CAAC,YAAY,CAAC;MACzC,IAAMC,YAAY,GAAG;QAAET,EAAE,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAK,CAAC;MAEpD7B,kBAAkB,CAACE,IAAI,CAACC,OAAO,CAAC2B,iBAAiB,CAAC;QAChDC,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAK,CAAC;QACpBC,KAAK,EAAEE;MACT,CAAC,CAAC;MAEFnC,kBAAkB,CAACE,IAAI,CAACG,iBAAiB,CAACyB,iBAAiB,CAAC;QAC1DC,IAAI,EAAE;UAAEC,IAAI,EAAEK;QAAa,CAAC;QAC5BJ,KAAK,EAAE;MACT,CAAC,CAAC;MAEF,IAAMvB,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnC,IAAMO,MAAM,SAASR,MAAM,CAACwB,cAAc,CAAC,CAAC;MAE5CtB,MAAM,CAACZ,kBAAkB,CAACE,IAAI,CAACG,iBAAiB,CAAC,CAACY,qBAAqB,CAAC,CAAC,CAAC;MAC1EL,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACkB,YAAY,CAAC;IACnC,CAAC,EAAC;IAEF5B,IAAI,CAAC,2DAA2D,MAAAd,kBAAA,CAAA+B,OAAA,EAAE,aAAY;MAC5E,IAAMS,SAAS,GAAG,IAAIC,KAAK,CAAC,YAAY,CAAC;MAEzCpC,kBAAkB,CAACE,IAAI,CAACC,OAAO,CAAC2B,iBAAiB,CAAC;QAChDC,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAK,CAAC;QACpBC,KAAK,EAAEE;MACT,CAAC,CAAC;MAEFnC,kBAAkB,CAACE,IAAI,CAACG,iBAAiB,CAACyB,iBAAiB,CAAC;QAC1DC,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAK,CAAC;QACpBC,KAAK,EAAEE;MACT,CAAC,CAAC;MAEF,IAAMzB,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MAEnC,MAAMC,MAAM,CAACF,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAACI,OAAO,CAAClB,OAAO,CAAC,YAAY,CAAC;IACrE,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFrB,QAAQ,CAAC,mBAAmB,EAAE,YAAM;IAClCU,IAAI,CAAC,sDAAsD,EAAE,YAAM;MACjE,IAAM8B,YAAY,GAAGhD,IAAI,CAACC,EAAE,CAAC,CAAC;MAC9B,IAAMgD,eAAe,GAAGjD,IAAI,CAACC,EAAE,CAAC,CAAC;MACjCQ,kBAAkB,CAACE,IAAI,CAACE,iBAAiB,CAACI,eAAe,CAACgC,eAAe,CAAC;MAE1E,IAAM9B,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnC,IAAMO,MAAM,GAAGR,MAAM,CAACN,iBAAiB,CAACmC,YAAY,CAAC;MAErD3B,MAAM,CAACZ,kBAAkB,CAACE,IAAI,CAACE,iBAAiB,CAAC,CAACqB,oBAAoB,CAACc,YAAY,CAAC;MACpF3B,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACqB,eAAe,CAAC;IACtC,CAAC,CAAC;IAEF/B,IAAI,CAAC,6CAA6C,EAAE,YAAM;MACxD,IAAM8B,YAAY,GAAGhD,IAAI,CAACC,EAAE,CAAC,CAAC;MAC9B,IAAMgD,eAAe,GAAGjD,IAAI,CAACC,EAAE,CAAC,CAAC;MAEjCQ,kBAAkB,CAACE,IAAI,CAACE,iBAAiB,CAACqC,kBAAkB,CAAC,UAACC,QAAQ,EAAK;QAEzEA,QAAQ,CAAC,WAAW,EAAE;UAAEC,YAAY,EAAE,MAAM;UAAEX,IAAI,EAAE;YAAEJ,EAAE,EAAE;UAAW;QAAE,CAAC,CAAC;QACzE,OAAOY,eAAe;MACxB,CAAC,CAAC;MAEF,IAAM9B,MAAM,GAAG,IAAIC,8BAAc,CAAC,CAAC;MACnCD,MAAM,CAACN,iBAAiB,CAACmC,YAAY,CAAC;MAEtC3B,MAAM,CAAC2B,YAAY,CAAC,CAACd,oBAAoB,CACvC,WAAW,EACX;QAAEkB,YAAY,EAAE,MAAM;QAAEX,IAAI,EAAE;UAAEJ,EAAE,EAAE;QAAW;MAAE,CACnD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF7B,QAAQ,CAAC,oBAAoB,EAAE,YAAM;IACnCU,IAAI,CAAC,oCAAoC,EAAE,YAAM;MAC/CG,MAAM,CAACgC,8BAAc,CAAC,CAAC7B,cAAc,CAACJ,8BAAc,CAAC;IACvD,CAAC,CAAC;IAEFF,IAAI,CAAC,oCAAoC,EAAE,YAAM;MAC/C,IAAMa,YAAY,GAAG;QAAEC,MAAM,EAAEhC,IAAI,CAACC,EAAE,CAAC;MAAE,CAAC;MAC1CQ,kBAAkB,CAACC,IAAI,CAACO,eAAe,CAACc,YAAY,CAAC;MAErD,IAAMJ,MAAM,GAAG0B,8BAAc,CAAC5B,SAAS;MAEvCJ,MAAM,CAACZ,kBAAkB,CAACC,IAAI,CAAC,CAACwB,oBAAoB,CAAC,WAAW,CAAC;MACjEb,MAAM,CAACM,MAAM,CAAC,CAACC,IAAI,CAACG,YAAY,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}