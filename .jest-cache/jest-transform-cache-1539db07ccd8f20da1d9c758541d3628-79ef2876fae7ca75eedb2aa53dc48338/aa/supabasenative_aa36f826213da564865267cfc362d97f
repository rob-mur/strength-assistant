152e6456864932060cc4004504b322f2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SupabaseClient", {
  enumerable: true,
  get: function get() {
    return _supabaseJs.SupabaseClient;
  }
});
exports.getSupabaseClient = getSupabaseClient;
exports.initSupabase = initSupabase;
exports.resetSupabaseService = resetSupabaseService;
var _env2 = require("expo/virtual/env");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _supabaseCore = require("./supabase-core");
var _supabaseJs = require("@supabase/supabase-js");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var SupabaseNativeService = function (_SupabaseService) {
  function SupabaseNativeService() {
    (0, _classCallCheck2.default)(this, SupabaseNativeService);
    return _callSuper(this, SupabaseNativeService, ["Supabase"]);
  }
  (0, _inherits2.default)(SupabaseNativeService, _SupabaseService);
  return (0, _createClass2.default)(SupabaseNativeService, [{
    key: "getInitMessage",
    value: function getInitMessage() {
      return "Initializing Supabase client for React Native...";
    }
  }, {
    key: "getEmulatorHost",
    value: function getEmulatorHost() {
      return _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST || "10.0.2.2";
    }
  }, {
    key: "getClientConfig",
    value: function getClientConfig() {
      return {
        detectSessionInUrl: false
      };
    }
  }]);
}(_supabaseCore.SupabaseService);
var supabaseService = new SupabaseNativeService();
function initSupabase() {
  supabaseService.init();
}
function getSupabaseClient() {
  return supabaseService.getSupabaseClient();
}
function resetSupabaseService() {
  supabaseService.initialized = false;
  supabaseService.client = undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwYWJhc2VDb3JlIiwicmVxdWlyZSIsIl9zdXBhYmFzZUpzIiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9nZXRQcm90b3R5cGVPZjIiLCJkZWZhdWx0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiU3VwYWJhc2VOYXRpdmVTZXJ2aWNlIiwiX1N1cGFiYXNlU2VydmljZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiZ2V0SW5pdE1lc3NhZ2UiLCJnZXRFbXVsYXRvckhvc3QiLCJfZW52MiIsImVudiIsIkVYUE9fUFVCTElDX1NVUEFCQVNFX0VNVUxBVE9SX0hPU1QiLCJnZXRDbGllbnRDb25maWciLCJkZXRlY3RTZXNzaW9uSW5VcmwiLCJTdXBhYmFzZVNlcnZpY2UiLCJzdXBhYmFzZVNlcnZpY2UiLCJpbml0U3VwYWJhc2UiLCJpbml0IiwiZ2V0U3VwYWJhc2VDbGllbnQiLCJyZXNldFN1cGFiYXNlU2VydmljZSIsImluaXRpYWxpemVkIiwiY2xpZW50IiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsic3VwYWJhc2UubmF0aXZlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1cGFiYXNlQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zdXBhYmFzZS1qc1wiO1xuaW1wb3J0IHsgRGF0YWJhc2UgfSBmcm9tIFwiLi4vLi4vLi4vbW9kZWxzL3N1cGFiYXNlXCI7XG5pbXBvcnQgeyBTdXBhYmFzZVNlcnZpY2UgfSBmcm9tIFwiLi9zdXBhYmFzZS1jb3JlXCI7XG5cbmNsYXNzIFN1cGFiYXNlTmF0aXZlU2VydmljZSBleHRlbmRzIFN1cGFiYXNlU2VydmljZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKFwiU3VwYWJhc2VcIik7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZ2V0SW5pdE1lc3NhZ2UoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gXCJJbml0aWFsaXppbmcgU3VwYWJhc2UgY2xpZW50IGZvciBSZWFjdCBOYXRpdmUuLi5cIjtcblx0fVxuXG5cdHByb3RlY3RlZCBnZXRFbXVsYXRvckhvc3QoKTogc3RyaW5nIHtcblx0XHQvLyBBbmRyb2lkIGVtdWxhdG9yIG5lZWRzIDEwLjAuMi4yIHRvIGFjY2VzcyBob3N0IG1hY2hpbmVcblx0XHQvLyBpT1Mgc2ltdWxhdG9yIGNhbiB1c2UgbG9jYWxob3N0LzEyNy4wLjAuMVxuXHRcdHJldHVybiBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19TVVBBQkFTRV9FTVVMQVRPUl9IT1NUIHx8IFwiMTAuMC4yLjJcIjtcblx0fVxuXG5cdHByb3RlY3RlZCBnZXRDbGllbnRDb25maWcoKTogeyBkZXRlY3RTZXNzaW9uSW5Vcmw6IGJvb2xlYW4gfSB7XG5cdFx0cmV0dXJuIHsgZGV0ZWN0U2Vzc2lvbkluVXJsOiBmYWxzZSB9O1xuXHR9XG59XG5cbmNvbnN0IHN1cGFiYXNlU2VydmljZSA9IG5ldyBTdXBhYmFzZU5hdGl2ZVNlcnZpY2UoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTdXBhYmFzZSgpOiB2b2lkIHtcblx0c3VwYWJhc2VTZXJ2aWNlLmluaXQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cGFiYXNlQ2xpZW50KCk6IFN1cGFiYXNlQ2xpZW50PERhdGFiYXNlPiB7XG5cdHJldHVybiBzdXBhYmFzZVNlcnZpY2UuZ2V0U3VwYWJhc2VDbGllbnQoKTtcbn1cblxuLy8gVGVzdCB1dGlsaXR5IHRvIHJlc2V0IHNlcnZpY2Ugc3RhdGVcbmV4cG9ydCBmdW5jdGlvbiByZXNldFN1cGFiYXNlU2VydmljZSgpOiB2b2lkIHtcblx0KHN1cGFiYXNlU2VydmljZSBhcyBhbnkpLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdChzdXBhYmFzZVNlcnZpY2UgYXMgYW55KS5jbGllbnQgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IFN1cGFiYXNlQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zdXBhYmFzZS1qc1wiOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQXNDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFBdUQsU0FBQUUsV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxPQUFBRSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFILENBQUEsT0FBQUksMkJBQUEsQ0FBQUQsT0FBQSxFQUFBSixDQUFBLEVBQUFNLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBUCxDQUFBLEVBQUFDLENBQUEsWUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxFQUFBSixDQUFBLEVBQUFTLFdBQUEsSUFBQVIsQ0FBQSxDQUFBUyxLQUFBLENBQUFWLENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFJLDBCQUFBLGNBQUFOLENBQUEsSUFBQVcsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBUCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsT0FBQSxpQ0FBQVgsQ0FBQSxhQUFBTSx5QkFBQSxZQUFBQSwwQkFBQSxhQUFBTixDQUFBO0FBQUEsSUFwQ2pEZSxxQkFBcUIsYUFBQUMsZ0JBQUE7RUFDMUIsU0FBQUQsc0JBQUEsRUFBYztJQUFBLElBQUFFLGdCQUFBLENBQUFiLE9BQUEsUUFBQVcscUJBQUE7SUFBQSxPQUFBaEIsVUFBQSxPQUFBZ0IscUJBQUEsR0FDUCxVQUFVO0VBQ2pCO0VBQUMsSUFBQUcsVUFBQSxDQUFBZCxPQUFBLEVBQUFXLHFCQUFBLEVBQUFDLGdCQUFBO0VBQUEsV0FBQUcsYUFBQSxDQUFBZixPQUFBLEVBQUFXLHFCQUFBO0lBQUFLLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQVVDLGNBQWNBLENBQUEsRUFBVztNQUNsQyxPQUFPLGtEQUFrRDtJQUMxRDtFQUFDO0lBQUFGLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQVVFLGVBQWVBLENBQUEsRUFBVztNQUduQyxPQUFPQyxLQUFBLENBQUFDLEdBQUEsQ0FBQUMsa0NBQUEsSUFBa0QsVUFBVTtJQUNwRTtFQUFDO0lBQUFOLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQVVNLGVBQWVBLENBQUEsRUFBb0M7TUFDNUQsT0FBTztRQUFFQyxrQkFBa0IsRUFBRTtNQUFNLENBQUM7SUFDckM7RUFBQztBQUFBLEVBakJrQ0MsNkJBQWU7QUFvQm5ELElBQU1DLGVBQWUsR0FBRyxJQUFJZixxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDLFNBQVNnQixZQUFZQSxDQUFBLEVBQVM7RUFDcENELGVBQWUsQ0FBQ0UsSUFBSSxDQUFDLENBQUM7QUFDdkI7QUFFTyxTQUFTQyxpQkFBaUJBLENBQUEsRUFBNkI7RUFDN0QsT0FBT0gsZUFBZSxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzNDO0FBR08sU0FBU0Msb0JBQW9CQSxDQUFBLEVBQVM7RUFDM0NKLGVBQWUsQ0FBU0ssV0FBVyxHQUFHLEtBQUs7RUFDM0NMLGVBQWUsQ0FBU00sTUFBTSxHQUFHQyxTQUFTO0FBQzVDIiwiaWdub3JlTGlzdCI6W119