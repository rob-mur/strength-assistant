ede48e0fb9875e87e77f35f2a0ee8894
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextInputAffix = exports.AffixAdornment = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _enums = require("./enums");
var _utils = require("./utils");
var _theming = require("../../../core/theming");
var _helpers = require("../helpers");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var AffixContext = _react.default.createContext({
  textStyle: {
    fontFamily: '',
    color: ''
  },
  topPosition: null,
  side: _enums.AdornmentSide.Left
});
var AffixAdornment = function AffixAdornment(_ref) {
  var affix = _ref.affix,
    side = _ref.side,
    textStyle = _ref.textStyle,
    topPosition = _ref.topPosition,
    onLayout = _ref.onLayout,
    visible = _ref.visible,
    paddingHorizontal = _ref.paddingHorizontal,
    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
    testID = _ref.testID,
    disabled = _ref.disabled;
  return _react.default.createElement(AffixContext.Provider, {
    value: {
      side: side,
      textStyle: textStyle,
      topPosition: topPosition,
      onLayout: onLayout,
      visible: visible,
      paddingHorizontal: paddingHorizontal,
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      testID: testID,
      disabled: disabled
    }
  }, affix);
};
exports.AffixAdornment = AffixAdornment;
var TextInputAffix = function TextInputAffix(_ref2) {
  var text = _ref2.text,
    labelStyle = _ref2.textStyle,
    themeOverrides = _ref2.theme,
    onTextLayout = _ref2.onLayout,
    onPress = _ref2.onPress,
    _ref2$accessibilityLa = _ref2.accessibilityLabel,
    accessibilityLabel = _ref2$accessibilityLa === void 0 ? text : _ref2$accessibilityLa;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _ref3 = (0, _helpers.getConstants)(theme.isV3),
    AFFIX_OFFSET = _ref3.AFFIX_OFFSET;
  var _react$default$useCon = _react.default.useContext(AffixContext),
    textStyle = _react$default$useCon.textStyle,
    onLayout = _react$default$useCon.onLayout,
    topPosition = _react$default$useCon.topPosition,
    side = _react$default$useCon.side,
    visible = _react$default$useCon.visible,
    paddingHorizontal = _react$default$useCon.paddingHorizontal,
    maxFontSizeMultiplier = _react$default$useCon.maxFontSizeMultiplier,
    testID = _react$default$useCon.testID,
    disabled = _react$default$useCon.disabled;
  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, offset);
  var textColor = (0, _utils.getTextColor)({
    theme: theme,
    disabled: disabled
  });
  var content = _react.default.createElement(_reactNative.Text, {
    maxFontSizeMultiplier: maxFontSizeMultiplier,
    style: [{
      color: textColor
    }, textStyle, labelStyle],
    onLayout: onTextLayout,
    testID: `${testID}-text`
  }, text);
  return _react.default.createElement(_reactNative.Animated.View, {
    style: [styles.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })) || 1
    }],
    onLayout: onLayout,
    testID: testID
  }, onPress ? _react.default.createElement(_reactNative.Pressable, {
    onPress: onPress,
    accessibilityRole: "button",
    accessibilityLabel: accessibilityLabel
  }, content) : content);
};
exports.TextInputAffix = TextInputAffix;
TextInputAffix.displayName = 'TextInput.Affix';
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    justifyContent: 'center',
    alignItems: 'center'
  }
});
var _default = exports.default = TextInputAffix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9lbnVtcyIsIl91dGlscyIsIl90aGVtaW5nIiwiX2hlbHBlcnMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJBZmZpeENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidGV4dFN0eWxlIiwiZm9udEZhbWlseSIsImNvbG9yIiwidG9wUG9zaXRpb24iLCJzaWRlIiwiQWRvcm5tZW50U2lkZSIsIkxlZnQiLCJBZmZpeEFkb3JubWVudCIsIl9yZWYiLCJhZmZpeCIsIm9uTGF5b3V0IiwidmlzaWJsZSIsInBhZGRpbmdIb3Jpem9udGFsIiwibWF4Rm9udFNpemVNdWx0aXBsaWVyIiwidGVzdElEIiwiZGlzYWJsZWQiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImV4cG9ydHMiLCJUZXh0SW5wdXRBZmZpeCIsIl9yZWYyIiwidGV4dCIsImxhYmVsU3R5bGUiLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwib25UZXh0TGF5b3V0Iiwib25QcmVzcyIsIl9yZWYyJGFjY2Vzc2liaWxpdHlMYSIsImFjY2Vzc2liaWxpdHlMYWJlbCIsInVzZUludGVybmFsVGhlbWUiLCJfcmVmMyIsImdldENvbnN0YW50cyIsImlzVjMiLCJBRkZJWF9PRkZTRVQiLCJfcmVhY3QkZGVmYXVsdCR1c2VDb24iLCJ1c2VDb250ZXh0Iiwib2Zmc2V0Iiwic3R5bGUiLCJfZGVmaW5lUHJvcGVydHkyIiwidG9wIiwidGV4dENvbG9yIiwiZ2V0VGV4dENvbG9yIiwiY29udGVudCIsIlRleHQiLCJBbmltYXRlZCIsIlZpZXciLCJzdHlsZXMiLCJjb250YWluZXIiLCJvcGFjaXR5IiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJQcmVzc2FibGUiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImRpc3BsYXlOYW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInBvc2l0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UZXh0SW5wdXQvQWRvcm5tZW50L1RleHRJbnB1dEFmZml4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFhQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFBMEMsU0FBQUQsdUJBQUFPLENBQUE7RUFBQSxPQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBc0MxQyxJQUFNRyxZQUFZLEdBQUdYLE1BQUEsQ0FBQVUsT0FBSyxDQUFDRSxhQUFhLENBQWU7RUFDckRDLFNBQVMsRUFBRTtJQUFFQyxVQUFVLEVBQUUsRUFBRTtJQUFFQyxLQUFLLEVBQUU7RUFBRyxDQUFDO0VBQ3hDQyxXQUFXLEVBQUUsSUFBSTtFQUNqQkMsSUFBSSxFQUFFYixNQUFBLENBQUFjLGFBQWEsQ0FBQ0M7QUFDdEIsQ0FBQyxDQUFDO0FBRUYsSUFBTUMsY0FLTCxHQUFHLFNBTEVBLGNBS0xBLENBQUFDLElBQUEsRUFXSztFQUFBLElBVkpDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO0lBQ0xMLElBQUksR0FBQUksSUFBQSxDQUFKSixJQUFJO0lBQ0pKLFNBQVMsR0FBQVEsSUFBQSxDQUFUUixTQUFTO0lBQ1RHLFdBQVcsR0FBQUssSUFBQSxDQUFYTCxXQUFXO0lBQ1hPLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO0lBQ1JDLE9BQU8sR0FBQUgsSUFBQSxDQUFQ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