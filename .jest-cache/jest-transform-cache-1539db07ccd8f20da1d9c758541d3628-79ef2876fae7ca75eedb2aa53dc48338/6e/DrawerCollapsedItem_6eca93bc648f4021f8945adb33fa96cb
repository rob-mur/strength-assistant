580a87200705c72a1b2c14b29005643e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["focusedIcon", "unfocusedIcon", "label", "active", "theme", "style", "onPress", "disabled", "accessibilityLabel", "badge", "testID", "labelMaxFontSizeMultiplier"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _Badge = _interopRequireDefault(require("../Badge"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var badgeSize = 8;
var iconSize = 24;
var itemSize = 56;
var outlineHeight = 32;
var DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {
  var focusedIcon = _ref.focusedIcon,
    unfocusedIcon = _ref.unfocusedIcon,
    label = _ref.label,
    active = _ref.active,
    themeOverrides = _ref.theme,
    style = _ref.style,
    onPress = _ref.onPress,
    disabled = _ref.disabled,
    accessibilityLabel = _ref.accessibilityLabel,
    _ref$badge = _ref.badge,
    badge = _ref$badge === void 0 ? false : _ref$badge,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'drawer-collapsed-item' : _ref$testID,
    labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3;
  var scale = theme.animation.scale;
  var _React$useState = React.useState(1),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    numOfLines = _React$useState2[0],
    setNumOfLines = _React$useState2[1];
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(active ? 1 : 0.5)),
    animScale = _React$useRef.current;
  React.useEffect(function () {
    if (!active) {
      animScale.setValue(0.5);
    }
  }, [animScale, active]);
  if (!isV3) {
    return null;
  }
  var handlePressOut = function handlePressOut() {
    _reactNative.Animated.timing(animScale, {
      toValue: 1,
      duration: 150 * scale,
      useNativeDriver: true
    }).start();
  };
  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;
  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';
  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;
  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;
  var onTextLayout = function onTextLayout(_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    setNumOfLines(nativeEvent.lines.length);
  };
  var androidLetterSpacingStyle = _reactNative.Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;
  var labelTextStyle = Object.assign({
    color: labelColor
  }, isV3 ? theme.fonts.labelMedium : {});
  var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;
  return React.createElement(_reactNative.View, rest, React.createElement(_reactNative.Pressable, {
    onPress: onPress,
    onPressOut: onPress ? handlePressOut : undefined,
    disabled: disabled,
    accessibilityTraits: active ? ['button', 'selected'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      selected: active
    },
    accessibilityLabel: accessibilityLabel,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: styles.wrapper
  }, React.createElement(_reactNative.Animated.View, {
    style: [styles.outline, !label && styles.roundedOutline, {
      transform: [label ? {
        scaleX: animScale
      } : {
        scale: animScale
      }],
      backgroundColor: backgroundColor
    }, style],
    testID: `${testID}-outline`
  }), React.createElement(_reactNative.View, {
    style: [styles.icon, {
      top: iconPadding
    }],
    testID: `${testID}-container`
  }, badge !== false && React.createElement(_reactNative.View, {
    style: styles.badgeContainer
  }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {
    visible: badge,
    size: badgeSize
  }) : React.createElement(_Badge.default, {
    visible: badge != null,
    size: 2 * badgeSize
  }, badge)), React.createElement(_Icon.default, {
    source: icon,
    size: iconSize,
    color: iconColor
  })), label ? React.createElement(_Text.default, {
    variant: "labelMedium",
    selectable: false,
    numberOfLines: 2,
    onTextLayout: onTextLayout,
    style: [styles.label, androidLetterSpacingStyle, labelTextStyle],
    maxFontSizeMultiplier: labelMaxFontSizeMultiplier
  }, label) : null)));
};
DrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    width: 80,
    marginBottom: 12,
    minHeight: itemSize,
    alignItems: 'center'
  },
  outline: {
    width: itemSize,
    height: outlineHeight,
    borderRadius: itemSize / 2,
    alignItems: 'center',
    justifyContent: 'center'
  },
  roundedOutline: {
    height: itemSize
  },
  icon: {
    position: 'absolute'
  },
  letterSpacing: {
    letterSpacing: 0.3,
    alignSelf: 'stretch'
  },
  label: {
    marginHorizontal: 12,
    marginTop: 4,
    textAlign: 'center'
  },
  badgeContainer: {
    position: 'absolute',
    left: 20,
    bottom: 20,
    zIndex: 2
  }
});
var _default = exports.default = DrawerCollapsedItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,