1473e7ba537180bd0998441532f42130
_getJestObj().mock("@/lib/data/supabase/supabase", function () {
  return {
    getSupabaseClient: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _SupabaseClient = require("@/lib/data/supabase/SupabaseClient");
var _supabase = require("@/lib/data/supabase/supabase");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("SupabaseClient", function () {
  var mockSupabaseClient = {
    from: jest.fn(),
    auth: {
      getUser: jest.fn(),
      onAuthStateChange: jest.fn(),
      signInAnonymously: jest.fn()
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _supabase.getSupabaseClient.mockReturnValue(mockSupabaseClient);
  });
  describe("constructor and client initialization", function () {
    test("creates instance without immediately calling getSupabaseClient", function () {
      var client = new _SupabaseClient.SupabaseClient();
      expect(_supabase.getSupabaseClient).not.toHaveBeenCalled();
      expect(client).toBeInstanceOf(_SupabaseClient.SupabaseClient);
    });
    test("lazy loads client on first access", function () {
      var client = new _SupabaseClient.SupabaseClient();
      client.exercises;
      expect(_supabase.getSupabaseClient).toHaveBeenCalledTimes(1);
    });
    test("reuses client on subsequent accesses", function () {
      var client = new _SupabaseClient.SupabaseClient();
      client.exercises;
      client.exercises;
      client.getSupabaseClient();
      expect(_supabase.getSupabaseClient).toHaveBeenCalledTimes(1);
    });
  });
  describe("getSupabaseClient", function () {
    test("returns the underlying Supabase client", function () {
      var client = new _SupabaseClient.SupabaseClient();
      var result = client.getSupabaseClient();
      expect(result).toBe(mockSupabaseClient);
      expect(_supabase.getSupabaseClient).toHaveBeenCalledTimes(1);
    });
    test("throws error when getSupabaseClient returns null", function () {
      _supabase.getSupabaseClient.mockReturnValue(null);
      var client = new _SupabaseClient.SupabaseClient();
      expect(function () {
        return client.getSupabaseClient();
      }).toThrow("Invalid Supabase client: missing required methods");
    });
    test("throws error when getSupabaseClient returns invalid client", function () {
      _supabase.getSupabaseClient.mockReturnValue({
        invalid: true
      });
      var client = new _SupabaseClient.SupabaseClient();
      expect(function () {
        return client.getSupabaseClient();
      }).toThrow("Invalid Supabase client: missing required methods");
    });
  });
  describe("exercises table access", function () {
    test("returns typed reference to exercises table", function () {
      var mockTableRef = {
        select: jest.fn(),
        insert: jest.fn()
      };
      mockSupabaseClient.from.mockReturnValue(mockTableRef);
      var client = new _SupabaseClient.SupabaseClient();
      var result = client.exercises;
      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');
      expect(result).toBe(mockTableRef);
    });
  });
  describe("getCurrentUser", function () {
    test("returns user when authenticated", (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: "user-123",
        email: "test@example.com"
      };
      mockSupabaseClient.auth.getUser.mockResolvedValue({
        data: {
          user: mockUser
        },
        error: null
      });
      var client = new _SupabaseClient.SupabaseClient();
      var result = yield client.getCurrentUser();
      expect(result).toBe(mockUser);
      expect(mockSupabaseClient.auth.getUser).toHaveBeenCalledTimes(1);
    }));
    test("signs in anonymously when getUser fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Auth error");
      var mockAnonUser = {
        id: "anon-123",
        email: null
      };
      mockSupabaseClient.auth.getUser.mockResolvedValue({
        data: {
          user: null
        },
        error: mockError
      });
      mockSupabaseClient.auth.signInAnonymously.mockResolvedValue({
        data: {
          user: mockAnonUser
        },
        error: null
      });
      var client = new _SupabaseClient.SupabaseClient();
      var result = yield client.getCurrentUser();
      expect(mockSupabaseClient.auth.signInAnonymously).toHaveBeenCalledTimes(1);
      expect(result).toBe(mockAnonUser);
    }));
    test("throws error when both getUser and signInAnonymously fail", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Auth error");
      mockSupabaseClient.auth.getUser.mockResolvedValue({
        data: {
          user: null
        },
        error: mockError
      });
      mockSupabaseClient.auth.signInAnonymously.mockResolvedValue({
        data: {
          user: null
        },
        error: mockError
      });
      var client = new _SupabaseClient.SupabaseClient();
      yield expect(client.getCurrentUser()).rejects.toThrow("Auth error");
    }));
  });
  describe("onAuthStateChange", function () {
    test("sets up auth state change listener with proper types", function () {
      var mockCallback = jest.fn();
      var mockUnsubscribe = jest.fn();
      mockSupabaseClient.auth.onAuthStateChange.mockReturnValue(mockUnsubscribe);
      var client = new _SupabaseClient.SupabaseClient();
      var result = client.onAuthStateChange(mockCallback);
      expect(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);
      expect(result).toBe(mockUnsubscribe);
    });
    test("callback receives properly typed parameters", function () {
      var mockCallback = jest.fn();
      var mockUnsubscribe = jest.fn();
      mockSupabaseClient.auth.onAuthStateChange.mockImplementation(function (callback) {
        callback('SIGNED_IN', {
          access_token: 'test',
          user: {
            id: 'user-123'
          }
        });
        return mockUnsubscribe;
      });
      var client = new _SupabaseClient.SupabaseClient();
      client.onAuthStateChange(mockCallback);
      expect(mockCallback).toHaveBeenCalledWith('SIGNED_IN', {
        access_token: 'test',
        user: {
          id: 'user-123'
        }
      });
    });
  });
  describe("singleton instance", function () {
    test("exports working singleton instance", function () {
      expect(_SupabaseClient.supabaseClient).toBeInstanceOf(_SupabaseClient.SupabaseClient);
    });
    test("singleton instance works correctly", function () {
      var mockTableRef = {
        select: jest.fn()
      };
      mockSupabaseClient.from.mockReturnValue(mockTableRef);
      var result = _SupabaseClient.supabaseClient.exercises;
      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');
      expect(result).toBe(mockTableRef);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,