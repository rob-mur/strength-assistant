e565a5325a660b5c8709ba148dd2eb41
var _Asset = require("./Asset");
var _PlatformUtils = require("./PlatformUtils");
var _resolveAssetSource = _interopRequireWildcard(require("./resolveAssetSource"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
if (_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
  var setTransformer = _resolveAssetSource.default.setCustomSourceTransformer || _resolveAssetSource.setCustomSourceTransformer;
  setTransformer(function (resolver) {
    try {
      if ('fileHashes' in resolver.asset && resolver.asset.fileHashes) {
        var asset = _Asset.Asset.fromMetadata(resolver.asset);
        if (asset.uri.startsWith(_Asset.ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {
          return resolver.resourceIdentifierWithoutScale();
        }
        return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
      } else {
        return resolver.defaultAsset();
      }
    } catch (_unused) {
      return resolver.defaultAsset();
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQXNzZXQiLCJyZXF1aXJlIiwiX1BsYXRmb3JtVXRpbHMiLCJfcmVzb2x2ZUFzc2V0U291cmNlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIklTX0VOVl9XSVRIX0xPQ0FMX0FTU0VUUyIsInNldFRyYW5zZm9ybWVyIiwicmVzb2x2ZUFzc2V0U291cmNlIiwic2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJyZXNvbHZlciIsImFzc2V0IiwiZmlsZUhhc2hlcyIsIkFzc2V0IiwiZnJvbU1ldGFkYXRhIiwidXJpIiwic3RhcnRzV2l0aCIsIkFORFJPSURfRU1CRURERURfVVJMX0JBU0VfUkVTT1VSQ0UiLCJyZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUiLCJmcm9tU291cmNlIiwiZG93bmxvYWRlZCIsImxvY2FsVXJpIiwiZGVmYXVsdEFzc2V0IiwiX3VudXNlZCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Bc3NldC5meC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IGRlZmF1bHQgYXMgQXNzZXRTb3VyY2VSZXNvbHZlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvSW1hZ2UvQXNzZXRTb3VyY2VSZXNvbHZlcic7XG5cbmltcG9ydCB7IEFzc2V0LCBBTkRST0lEX0VNQkVEREVEX1VSTF9CQVNFX1JFU09VUkNFIH0gZnJvbSAnLi9Bc3NldCc7XG5pbXBvcnQgeyBJU19FTlZfV0lUSF9MT0NBTF9BU1NFVFMgfSBmcm9tICcuL1BsYXRmb3JtVXRpbHMnO1xuaW1wb3J0IHJlc29sdmVBc3NldFNvdXJjZSwgeyBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciB9IGZyb20gJy4vcmVzb2x2ZUFzc2V0U291cmNlJztcblxuLy8gT3ZlcnJpZGUgUmVhY3QgTmF0aXZlJ3MgYXNzZXQgcmVzb2x1dGlvbiBmb3IgYEltYWdlYCBjb21wb25lbnRzIGluIGNvbnRleHRzIHdoZXJlIGl0IG1hdHRlcnNcbmlmIChJU19FTlZfV0lUSF9MT0NBTF9BU1NFVFMpIHtcbiAgY29uc3Qgc2V0VHJhbnNmb3JtZXIgPVxuICAgIHJlc29sdmVBc3NldFNvdXJjZS5zZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciB8fCBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcjtcbiAgc2V0VHJhbnNmb3JtZXIoKHJlc29sdmVyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEJ1bmRsZXIgaXMgdXNpbmcgdGhlIGhhc2hBc3NldEZpbGVzIHBsdWdpbiBpZiBhbmQgb25seSBpZiB0aGUgZmlsZUhhc2hlcyBwcm9wZXJ0eSBleGlzdHNcbiAgICAgIGlmICgnZmlsZUhhc2hlcycgaW4gcmVzb2x2ZXIuYXNzZXQgJiYgcmVzb2x2ZXIuYXNzZXQuZmlsZUhhc2hlcykge1xuICAgICAgICBjb25zdCBhc3NldCA9IEFzc2V0LmZyb21NZXRhZGF0YShyZXNvbHZlci5hc3NldCk7XG4gICAgICAgIGlmIChhc3NldC51cmkuc3RhcnRzV2l0aChBTkRST0lEX0VNQkVEREVEX1VSTF9CQVNFX1JFU09VUkNFKSkge1xuICAgICAgICAgIC8vIFRPRE8oQGtpdHRlbik6IFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXhwby9leHBvL2NvbW1pdC9lYzk0MGI1N2E4N2Q5OWFiNGYxZDA2ZDg3MTI2ZTY2MmMzZjA0ZjA0I3IxNTUzNDA5NDNcbiAgICAgICAgICAvLyBJdCdzIHVuY2xlYXIgd2hldGhlciB0aGlzIGlzIHNvdW5kIHNpbmNlIHRoaXMgbWF5IGJlIG91ciBvd24gQXNzZXRTb3VyY2VSZXNvbHZlciwgd2hpY2ggZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kXG4gICAgICAgICAgLy8gUGxlYXNlIGNvbXBhcmUgYEFzc2V0U291cmNlUmVzb2x2ZXJgIHR5cGUgZnJvbSBgcmVhY3QtbmF0aXZlL0xpYnJhcmllcy9JbWFnZS9Bc3NldFNvdXJjZVJlc29sdmVyYCBhZ2FpbnN0IGAuL0Fzc2V0U291cmNlUmVzb2x2ZXJgXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHJlc29sdmVyIGFzIHVua25vd24gYXMgQXNzZXRTb3VyY2VSZXNvbHZlclxuICAgICAgICAgICkucmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCkgYXMgYW55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlci5mcm9tU291cmNlKGFzc2V0LmRvd25sb2FkZWQgPyBhc3NldC5sb2NhbFVyaSEgOiBhc3NldC51cmkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVyLmRlZmF1bHRBc3NldCgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHJlc29sdmVyLmRlZmF1bHRBc3NldCgpO1xuICAgIH1cbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUVBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFBc0YsU0FBQUcsd0JBQUFDLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFILHVCQUFBLFlBQUFBLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUd0RixJQUFJbUIsdUNBQXdCLEVBQUU7RUFDNUIsSUFBTUMsY0FBYyxHQUNsQkMsMkJBQWtCLENBQUNDLDBCQUEwQixJQUFJQSw4Q0FBMEI7RUFDN0VGLGNBQWMsQ0FBQyxVQUFDRyxRQUFRLEVBQUk7SUFDMUIsSUFBSTtNQUVGLElBQUksWUFBWSxJQUFJQSxRQUFRLENBQUNDLEtBQUssSUFBSUQsUUFBUSxDQUFDQyxLQUFLLENBQUNDLFVBQVUsRUFBRTtRQUMvRCxJQUFNRCxLQUFLLEdBQUdFLFlBQUssQ0FBQ0MsWUFBWSxDQUFDSixRQUFRLENBQUNDLEtBQUssQ0FBQztRQUNoRCxJQUFJQSxLQUFLLENBQUNJLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDQyx5Q0FBa0MsQ0FBQyxFQUFFO1VBSTVELE9BQ0VQLFFBQ0QsQ0FBQ1EsOEJBQThCLEVBQVM7UUFDM0M7UUFDQSxPQUFPUixRQUFRLENBQUNTLFVBQVUsQ0FBQ1IsS0FBSyxDQUFDUyxVQUFVLEdBQUdULEtBQUssQ0FBQ1UsUUFBUyxHQUFHVixLQUFLLENBQUNJLEdBQUcsQ0FBQztNQUM1RSxDQUFDLE1BQU07UUFDTCxPQUFPTCxRQUFRLENBQUNZLFlBQVksRUFBRTtNQUNoQztJQUNGLENBQUMsQ0FBQyxPQUFBQyxPQUFBLEVBQU07TUFDTixPQUFPYixRQUFRLENBQUNZLFlBQVksRUFBRTtJQUNoQztFQUNGLENBQUMsQ0FBQztBQUNKIiwiaWdub3JlTGlzdCI6W119