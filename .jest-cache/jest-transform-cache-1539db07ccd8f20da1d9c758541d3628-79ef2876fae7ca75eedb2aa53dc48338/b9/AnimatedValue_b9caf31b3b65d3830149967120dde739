c4046e897c611ba181079dfba1564cf8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.flushValue = flushValue;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _InteractionManager = _interopRequireDefault(require("../../Interaction/InteractionManager"));
var _AnimatedInterpolation = _interopRequireDefault(require("./AnimatedInterpolation"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
function flushValue(rootNode) {
  var leaves = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      leaves.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);
  leaves.forEach(function (leaf) {
    return leaf.update();
  });
}
function _executeAsAnimatedBatch(id, operation) {
  NativeAnimatedAPI.setWaitingForIdentifier(id);
  operation();
  NativeAnimatedAPI.unsetWaitingForIdentifier(id);
}
var _listenerCount = (0, _classPrivateFieldLooseKey2.default)("listenerCount");
var _updateSubscription = (0, _classPrivateFieldLooseKey2.default)("updateSubscription");
var _ensureUpdateSubscriptionExists = (0, _classPrivateFieldLooseKey2.default)("ensureUpdateSubscriptionExists");
var AnimatedValue = exports.default = function (_AnimatedWithChildren) {
  function AnimatedValue(value, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedValue);
    _this = _callSuper(this, AnimatedValue, [config]);
    Object.defineProperty(_this, _ensureUpdateSubscriptionExists, {
      value: _ensureUpdateSubscriptionExists2
    });
    Object.defineProperty(_this, _listenerCount, {
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, _updateSubscription, {
      writable: true,
      value: null
    });
    if (typeof value !== 'number') {
      throw new Error('AnimatedValue: Attempting to set value to undefined');
    }
    _this._startingValue = _this._value = value;
    _this._offset = 0;
    _this._animation = null;
    if (config && config.useNativeDriver) {
      _this.__makeNative();
    }
    return _this;
  }
  (0, _inherits2.default)(AnimatedValue, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedValue, [{
    key: "__detach",
    value: function __detach() {
      var _this2 = this;
      if (this.__isNative) {
        NativeAnimatedAPI.getValue(this.__getNativeTag(), function (value) {
          _this2._value = value - _this2._offset;
        });
      }
      this.stopAnimation();
      _superPropGet(AnimatedValue, "__detach", this, 3)([]);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._value + this._offset;
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      _superPropGet(AnimatedValue, "__makeNative", this, 3)([platformConfig]);
      if ((0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] > 0) {
        (0, _classPrivateFieldLooseBase2.default)(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
      }
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var id = _superPropGet(AnimatedValue, "addListener", this, 3)([callback]);
      (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount]++;
      if (this.__isNative) {
        (0, _classPrivateFieldLooseBase2.default)(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
      }
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      _superPropGet(AnimatedValue, "removeListener", this, 3)([id]);
      (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount]--;
      if (this.__isNative && (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] === 0) {
        var _classPrivateFieldLoo;
        (_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription]) == null || _classPrivateFieldLoo.remove();
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      _superPropGet(AnimatedValue, "removeAllListeners", this, 3)([]);
      (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] = 0;
      if (this.__isNative) {
        var _classPrivateFieldLoo2;
        (_classPrivateFieldLoo2 = (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription]) == null || _classPrivateFieldLoo2.remove();
      }
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _this3 = this;
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);
      if (this.__isNative) {
        _executeAsAnimatedBatch(this.__getNativeTag().toString(), function () {
          return NativeAnimatedAPI.setAnimatedNodeValue(_this3.__getNativeTag(), value);
        });
      }
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: "extractOffset",
    value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      if (callback) {
        if (this.__isNative) {
          NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
        } else {
          callback(this.__getValue());
        }
      }
    }
  }, {
    key: "resetAnimation",
    value: function resetAnimation(callback) {
      this.stopAnimation(callback);
      this._value = this._startingValue;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
      }
    }
  }, {
    key: "__onAnimatedValueUpdateReceived",
    value: function __onAnimatedValueUpdateReceived(value) {
      this._updateValue(value, false);
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new _AnimatedInterpolation.default(this, config);
    }
  }, {
    key: "animate",
    value: function animate(animation, callback) {
      var _this4 = this;
      var handle = null;
      if (animation.__isInteraction) {
        handle = _InteractionManager.default.createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {
        _this4._updateValue(value, true);
      }, function (result) {
        _this4._animation = null;
        if (handle !== null) {
          _InteractionManager.default.clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    }
  }, {
    key: "stopTracking",
    value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    }
  }, {
    key: "track",
    value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
      this._tracking && this._tracking.update();
    }
  }, {
    key: "_updateValue",
    value: function _updateValue(value, flush) {
      if (value === undefined) {
        throw new Error('AnimatedValue: Attempting to set value to undefined');
      }
      this._value = value;
      if (flush) {
        flushValue(this);
      }
      this.__callListeners(this.__getValue());
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset,
        debugID: this.__getDebugID()
      };
    }
  }]);
}(_AnimatedWithChildren2.default);
function _ensureUpdateSubscriptionExists2() {
  var _this5 = this;
  if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] != null) {
    return;
  }
  var nativeTag = this.__getNativeTag();
  NativeAnimatedAPI.startListeningToAnimatedNodeValue(nativeTag);
  var subscription = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
    if (data.tag === nativeTag) {
      _this5.__onAnimatedValueUpdateReceived(data.value);
    }
  });
  (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] = {
    remove: function remove() {
      if ((0, _classPrivateFieldLooseBase2.default)(_this5, _updateSubscription)[_updateSubscription] == null) {
        return;
      }
      (0, _classPrivateFieldLooseBase2.default)(_this5, _updateSubscription)[_updateSubscription] = null;
      subscription.remove();
      NativeAnimatedAPI.stopListeningToAnimatedNodeValue(nativeTag);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,