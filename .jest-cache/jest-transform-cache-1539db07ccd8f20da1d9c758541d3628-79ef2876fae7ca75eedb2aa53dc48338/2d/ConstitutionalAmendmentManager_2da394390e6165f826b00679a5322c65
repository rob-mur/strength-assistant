2655482b8e25d7b21d1cc4d6163af5b9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constitutionalAmendmentManager = exports.ConstitutionalAmendmentManagerImpl = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var ConstitutionalAmendmentManagerImpl = exports.ConstitutionalAmendmentManagerImpl = function () {
  function ConstitutionalAmendmentManagerImpl() {
    (0, _classCallCheck2.default)(this, ConstitutionalAmendmentManagerImpl);
    this.amendments = new Map();
    this.currentRequirements = {
      version: '2.5.0',
      requirementsBySection: {
        'Testing (NON-NEGOTIABLE)': ['TypeScript compilation MUST succeed before test execution', 'devbox run test MUST pass completely before any commit', 'Pre-commit hooks MUST validate TypeScript compilation', 'Red-Green-Refactor cycle strictly enforced', 'Tests written before implementation', 'Binary exit code validation MUST be used instead of log parsing', 'Exit code 0 = complete success, non-zero = any failure'],
        'Simplicity': ['Maximum 3 projects per feature', 'Use frameworks directly without wrapper classes', 'Single data model without DTOs unless serialization differs'],
        'Architecture': ['Every feature as library', 'CLI per library', 'Library documentation required'],
        'Observability': ['Structured logging required', 'Frontend logs stream to backend', 'Error context sufficient for debugging'],
        'Versioning': ['MAJOR.MINOR.BUILD format mandatory', 'BUILD increments on every change', 'Breaking changes require migration plans']
      },
      prohibitionsBySection: {
        'Testing (NON-NEGOTIABLE)': ['Committing code that breaks TypeScript compilation', 'Implementation before test', 'Skipping RED phase', 'Deferring TypeScript compilation errors', 'Using log parsing instead of exit code validation', 'Declaring test success when exit code is non-zero'],
        'Simplicity': ['Complex testing abstractions', 'Unnecessary wrapper patterns', 'Multiple DTOs for same data'],
        'Architecture': ['Direct database access without repository pattern', 'Undocumented libraries', 'CLI-less libraries'],
        'Observability': ['Silent failures', 'Missing error context', 'Frontend-only logging'],
        'Versioning': ['Unversioned releases', 'Breaking changes without migration', 'Semantic version violations']
      },
      activeEnforcements: [{
        type: 'pre-commit-hook',
        configuration: {
          command: 'devbox run test',
          targets: ['**/*.ts', '**/*.tsx'],
          onFailure: 'block',
          parameters: {
            validateTypeScript: true,
            validateLinting: true,
            validateFormatting: true
          }
        },
        active: true
      }, {
        type: 'ci-validation',
        configuration: {
          command: 'devbox run test',
          targets: ['**/*'],
          onFailure: 'block',
          parameters: {
            fullValidation: true
          }
        },
        active: true
      }]
    };
  }
  return (0, _createClass2.default)(ConstitutionalAmendmentManagerImpl, [{
    key: "proposeAmendment",
    value: function () {
      var _proposeAmendment = (0, _asyncToGenerator2.default)(function* (amendment) {
        var trackingInfo = {
          amendmentId: amendment.id,
          status: 'proposed',
          createdAt: new Date(),
          updatedAt: new Date(),
          reviews: [],
          version: this.currentRequirements.version
        };
        this.amendments.set(amendment.id, trackingInfo);
        return trackingInfo;
      });
      function proposeAmendment(_x) {
        return _proposeAmendment.apply(this, arguments);
      }
      return proposeAmendment;
    }()
  }, {
    key: "reviewAmendment",
    value: function () {
      var _reviewAmendment = (0, _asyncToGenerator2.default)(function* (amendmentId, review) {
        var trackingInfo = this.amendments.get(amendmentId);
        if (!trackingInfo) {
          throw new Error(`Amendment ${amendmentId} not found`);
        }
        trackingInfo.reviews.push(review);
        trackingInfo.updatedAt = new Date();
        switch (review.decision) {
          case 'approve':
            trackingInfo.status = 'approved';
            break;
          case 'reject':
            trackingInfo.status = 'rejected';
            break;
          case 'request-changes':
            trackingInfo.status = 'under-review';
            break;
        }
        this.amendments.set(amendmentId, trackingInfo);
        return trackingInfo;
      });
      function reviewAmendment(_x2, _x3) {
        return _reviewAmendment.apply(this, arguments);
      }
      return reviewAmendment;
    }()
  }, {
    key: "enactAmendment",
    value: function () {
      var _enactAmendment = (0, _asyncToGenerator2.default)(function* (amendmentId) {
        var trackingInfo = this.amendments.get(amendmentId);
        if (!trackingInfo) {
          throw new Error(`Amendment ${amendmentId} not found`);
        }
        if (trackingInfo.status !== 'approved') {
          throw new Error(`Amendment ${amendmentId} must be approved before enactment`);
        }
        trackingInfo.status = 'enacted';
        trackingInfo.updatedAt = new Date();
        this.amendments.set(amendmentId, trackingInfo);
        var enforcementConfig = {
          amendmentId: amendmentId,
          mechanisms: this.currentRequirements.activeEnforcements,
          gracePeriodDays: 0,
          monitoring: {
            enableMetrics: true,
            reportingInterval: 'daily',
            alertThresholds: {
              violationCount: 1,
              timeWindow: '1hour'
            }
          }
        };
        return enforcementConfig;
      });
      function enactAmendment(_x4) {
        return _enactAmendment.apply(this, arguments);
      }
      return enactAmendment;
    }()
  }, {
    key: "getCurrentRequirements",
    value: function getCurrentRequirements() {
      return Object.assign({}, this.currentRequirements);
    }
  }, {
    key: "validateCompliance",
    value: function () {
      var _validateCompliance = (0, _asyncToGenerator2.default)(function* (target) {
        var violations = [];
        var score = 100;
        if (target.type === 'codebase' && target.aspects.includes('typescript')) {
          try {
            var hasTypeScriptErrors = yield this.checkTypeScriptCompilation();
            if (hasTypeScriptErrors) {
              violations.push({
                requirement: 'TypeScript compilation MUST succeed before test execution',
                description: 'TypeScript compilation errors detected',
                severity: 'critical',
                context: 'Codebase compilation check',
                resolution: 'Run tsc --noEmit and fix all TypeScript errors'
              });
              score -= 50;
            }
          } catch (error) {
            violations.push({
              requirement: 'TypeScript compilation validation',
              description: `Failed to validate TypeScript: ${error}`,
              severity: 'critical',
              context: 'Compilation validation process',
              resolution: 'Ensure TypeScript compiler is properly configured'
            });
            score -= 50;
          }
        }
        if (target.aspects.includes('testing')) {
          var testsPassing = yield this.checkTestExecution();
          if (!testsPassing) {
            violations.push({
              requirement: 'devbox run test MUST pass completely before any commit',
              description: 'Test suite execution failures detected',
              severity: 'critical',
              context: 'Test suite validation',
              resolution: 'Run devbox run test and fix all failing tests'
            });
            score -= 30;
          }
        }
        var recommendations = [];
        if (violations.length > 0) {
          recommendations.push('Address all TypeScript compilation errors immediately');
          recommendations.push('Ensure devbox run test passes before any commits');
          recommendations.push('Consider implementing automated pre-commit hooks');
        }
        return {
          compliant: violations.length === 0,
          violations: violations,
          score: Math.max(0, score),
          recommendations: recommendations,
          validatedAt: new Date()
        };
      });
      function validateCompliance(_x5) {
        return _validateCompliance.apply(this, arguments);
      }
      return validateCompliance;
    }()
  }, {
    key: "checkTypeScriptCompilation",
    value: function () {
      var _checkTypeScriptCompilation = (0, _asyncToGenerator2.default)(function* () {
        return false;
      });
      function checkTypeScriptCompilation() {
        return _checkTypeScriptCompilation.apply(this, arguments);
      }
      return checkTypeScriptCompilation;
    }()
  }, {
    key: "validateTestExitCode",
    value: function () {
      var _validateTestExitCode = (0, _asyncToGenerator2.default)(function* (testCommand, exitCode) {
        var expectedExitCode = 0;
        var valid = exitCode === expectedExitCode;
        var message;
        var failureContext;
        if (valid) {
          message = `Constitutional compliance achieved: ${testCommand} returned exit code ${exitCode}`;
        } else {
          message = `Constitutional violation: ${testCommand} returned exit code ${exitCode}, expected ${expectedExitCode}`;
          failureContext = `Any non-zero exit code indicates test failure, TypeScript compilation error, or infrastructure issue. Amendment v2.5.0 requires binary 0/1 status validation.`;
        }
        return {
          valid: valid,
          command: testCommand,
          exitCode: exitCode,
          expectedExitCode: expectedExitCode,
          message: message,
          constitutionalRequirement: 'Amendment v2.5.0: Binary Exit Code Enforcement',
          validatedAt: new Date(),
          failureContext: failureContext
        };
      });
      function validateTestExitCode(_x6, _x7) {
        return _validateTestExitCode.apply(this, arguments);
      }
      return validateTestExitCode;
    }()
  }, {
    key: "checkTestExecution",
    value: function () {
      var _checkTestExecution = (0, _asyncToGenerator2.default)(function* () {
        return true;
      });
      function checkTestExecution() {
        return _checkTestExecution.apply(this, arguments);
      }
      return checkTestExecution;
    }()
  }]);
}();
var constitutionalAmendmentManager = exports.constitutionalAmendmentManager = new ConstitutionalAmendmentManagerImpl();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,