{"version":3,"names":["_Exercise","require","describe","test","validInput","name","expect","ExerciseValidator","validateExerciseInput","not","toThrow","undefined","validNames","forEach","validateExerciseName","tooLongName","repeat","invalidNames","sanitizeExerciseName","toBe"],"sources":["Exercise-test.ts"],"sourcesContent":["import { ExerciseValidator } from \"@/lib/models/Exercise\";\n\ndescribe(\"ExerciseValidator\", () => {\n  describe(\"validateExerciseInput\", () => {\n    test(\"validates valid exercise input\", () => {\n      const validInput = { name: \"Push-ups\" };\n      expect(() => ExerciseValidator.validateExerciseInput(validInput)).not.toThrow();\n    });\n\n    test(\"throws error for null input\", () => {\n      expect(() => ExerciseValidator.validateExerciseInput(null as any)).toThrow(\n        \"Exercise input is required\"\n      );\n    });\n\n    test(\"throws error for undefined input\", () => {\n      expect(() => ExerciseValidator.validateExerciseInput(undefined as any)).toThrow(\n        \"Exercise input is required\"\n      );\n    });\n  });\n\n  describe(\"validateExerciseName\", () => {\n    test(\"validates valid exercise names\", () => {\n      const validNames = [\n        \"Push-ups\",\n        \"Bench Press\",\n        \"Squats (Bodyweight)\",\n        \"Pull-ups\",\n        \"Deadlift 123\",\n        \"Bicep Curls - 15 lbs\",\n        \"Plank (60 sec.)\"\n      ];\n\n      validNames.forEach(name => {\n        expect(() => ExerciseValidator.validateExerciseName(name)).not.toThrow();\n      });\n    });\n\n    test(\"throws error for empty name\", () => {\n      expect(() => ExerciseValidator.validateExerciseName(\"\")).toThrow(\n        \"Exercise name cannot be empty\"\n      );\n    });\n\n    test(\"throws error for whitespace-only name\", () => {\n      expect(() => ExerciseValidator.validateExerciseName(\"   \")).toThrow(\n        \"Exercise name cannot be empty\"\n      );\n    });\n\n    test(\"throws error for null name\", () => {\n      expect(() => ExerciseValidator.validateExerciseName(null as any)).toThrow(\n        \"Exercise name is required and must be a string\"\n      );\n    });\n\n    test(\"throws error for undefined name\", () => {\n      expect(() => ExerciseValidator.validateExerciseName(undefined as any)).toThrow(\n        \"Exercise name is required and must be a string\"\n      );\n    });\n\n    test(\"throws error for non-string name\", () => {\n      expect(() => ExerciseValidator.validateExerciseName(123 as any)).toThrow(\n        \"Exercise name is required and must be a string\"\n      );\n    });\n\n    test(\"throws error for names exceeding max length\", () => {\n      const tooLongName = \"a\".repeat(101);\n      expect(() => ExerciseValidator.validateExerciseName(tooLongName)).toThrow(\n        \"Exercise name cannot exceed 100 characters\"\n      );\n    });\n\n    test(\"throws error for names with invalid characters\", () => {\n      const invalidNames = [\n        \"Exercise<script>alert('xss')</script>\",\n        \"Exercise; DROP TABLE exercises;\",\n        \"Exercise & malicious code\",\n        \"Exercise | dangerous\",\n        \"Exercise $ injection\",\n        \"Exercise % attack\",\n        \"Exercise ^ symbol\",\n        \"Exercise * wildcard\",\n        \"Exercise + plus\",\n        \"Exercise = equals\",\n        \"Exercise { brace\",\n        \"Exercise [ bracket\",\n        \"Exercise \\\\ backslash\",\n        \"Exercise / slash\",\n        \"Exercise ? question\",\n        \"Exercise # hash\",\n        \"Exercise @ at\",\n        \"Exercise ! exclamation\"\n      ];\n\n      invalidNames.forEach(name => {\n        expect(() => ExerciseValidator.validateExerciseName(name)).toThrow(\n          \"Exercise name contains invalid characters\"\n        );\n      });\n    });\n  });\n\n  describe(\"sanitizeExerciseName\", () => {\n    test(\"trims whitespace\", () => {\n      expect(ExerciseValidator.sanitizeExerciseName(\"  Push-ups  \")).toBe(\"Push-ups\");\n    });\n\n    test(\"normalizes multiple spaces\", () => {\n      expect(ExerciseValidator.sanitizeExerciseName(\"Bench    Press\")).toBe(\"Bench Press\");\n    });\n\n    test(\"handles tabs and newlines\", () => {\n      expect(ExerciseValidator.sanitizeExerciseName(\"Exercise\\t\\nName\")).toBe(\"Exercise Name\");\n    });\n\n    test(\"handles empty string\", () => {\n      expect(ExerciseValidator.sanitizeExerciseName(\"\")).toBe(\"\");\n    });\n\n    test(\"preserves single spaces\", () => {\n      expect(ExerciseValidator.sanitizeExerciseName(\"Bicep Curls\")).toBe(\"Bicep Curls\");\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}