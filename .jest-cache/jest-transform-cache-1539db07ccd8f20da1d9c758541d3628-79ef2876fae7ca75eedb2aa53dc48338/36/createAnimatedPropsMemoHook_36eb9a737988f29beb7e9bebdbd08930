d2c3719bdb167f4b5ac2b51680fffa7c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areCompositeKeysEqual = areCompositeKeysEqual;
exports.createAnimatedPropsMemoHook = createAnimatedPropsMemoHook;
exports.createCompositeKeyForProps = createCompositeKeyForProps;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _AnimatedEvent = require("../../../Libraries/Animated/AnimatedEvent");
var _AnimatedNode = _interopRequireDefault(require("../../../Libraries/Animated/nodes/AnimatedNode"));
var _AnimatedObject = require("../../../Libraries/Animated/nodes/AnimatedObject");
var _flattenStyle = _interopRequireDefault(require("../../../Libraries/StyleSheet/flattenStyle"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../featureflags/ReactNativeFeatureFlags"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
var _react = require("react");
var _Object$hasOwn;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function createAnimatedPropsMemoHook(allowlist) {
  return function useAnimatedPropsMemo(create, props) {
    var useAnimatedPropsImpl = ReactNativeFeatureFlags.avoidStateUpdateInAnimatedPropsMemo() ? useAnimatedPropsMemo_ref : useAnimatedPropsMemo_state;
    return useAnimatedPropsImpl(create, props);
  };
  function useAnimatedPropsMemo_ref(create, props) {
    var compositeKey = (0, _react.useMemo)(function () {
      return createCompositeKeyForProps(props, allowlist);
    }, [props]);
    var prevRef = (0, _react.useRef)();
    var prev = prevRef.current;
    var next = prev != null && areCompositeKeysEqual(prev.compositeKey, compositeKey, allowlist) ? prev : {
      compositeKey: compositeKey,
      node: create()
    };
    (0, _react.useInsertionEffect)(function () {
      prevRef.current = next;
    }, [next]);
    return next.node;
  }
  function useAnimatedPropsMemo_state(create, props) {
    var compositeKey = (0, _react.useMemo)(function () {
      return createCompositeKeyForProps(props, allowlist);
    }, [props]);
    var _useState = (0, _react.useState)(function () {
        return {
          allowlist: allowlist,
          compositeKey: compositeKey,
          value: create()
        };
      }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    if (state.allowlist !== allowlist || !areCompositeKeysEqual(state.compositeKey, compositeKey)) {
      setState({
        allowlist: allowlist,
        compositeKey: compositeKey,
        value: create()
      });
    }
    return state.value;
  }
}
function createCompositeKeyForProps(props, allowlist) {
  var compositeKey = null;
  var keys = Object.keys(props);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    var value = props[key];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var compositeKeyComponent = void 0;
      if (key === 'style') {
        var flatStyle = (0, _flattenStyle.default)(value);
        if (flatStyle != null) {
          compositeKeyComponent = createCompositeKeyForObject(flatStyle, allowlist == null ? void 0 : allowlist.style);
        }
      } else if (value instanceof _AnimatedNode.default || value instanceof _AnimatedEvent.AnimatedEvent) {
        compositeKeyComponent = value;
      } else if (Array.isArray(value)) {
        compositeKeyComponent = allowlist == null ? value : createCompositeKeyForArray(value);
      } else if ((0, _AnimatedObject.isPlainObject)(value)) {
        compositeKeyComponent = allowlist == null ? value : createCompositeKeyForObject(value);
      }
      if (compositeKeyComponent != null) {
        if (compositeKey == null) {
          compositeKey = {};
        }
        compositeKey[key] = compositeKeyComponent;
      }
    }
  }
  return compositeKey;
}
function createCompositeKeyForArray(array) {
  var compositeKey = null;
  for (var ii = 0, length = array.length; ii < length; ii++) {
    var value = array[ii];
    var compositeKeyComponent = void 0;
    if (value instanceof _AnimatedNode.default) {
      compositeKeyComponent = value;
    } else if (Array.isArray(value)) {
      compositeKeyComponent = createCompositeKeyForArray(value);
    } else if ((0, _AnimatedObject.isPlainObject)(value)) {
      compositeKeyComponent = createCompositeKeyForObject(value);
    }
    if (compositeKeyComponent != null) {
      if (compositeKey == null) {
        compositeKey = new Array(array.length).fill(null);
      }
      compositeKey[ii] = compositeKeyComponent;
    }
  }
  return compositeKey;
}
function createCompositeKeyForObject(object, allowlist) {
  var compositeKey = null;
  var keys = Object.keys(object);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var value = object[key];
      var compositeKeyComponent = void 0;
      if (value instanceof _AnimatedNode.default) {
        compositeKeyComponent = value;
      } else if (Array.isArray(value)) {
        compositeKeyComponent = createCompositeKeyForArray(value);
      } else if ((0, _AnimatedObject.isPlainObject)(value)) {
        compositeKeyComponent = createCompositeKeyForObject(value);
      }
      if (compositeKeyComponent != null) {
        if (compositeKey == null) {
          compositeKey = {};
        }
        compositeKey[key] = compositeKeyComponent;
      }
    }
  }
  return compositeKey;
}
function areCompositeKeysEqual(maybePrev, maybeNext, allowlist) {
  if (maybePrev === maybeNext) {
    return true;
  }
  if (maybePrev === null || maybeNext === null) {
    return false;
  }
  var prev = maybePrev;
  var next = maybeNext;
  var keys = Object.keys(prev);
  var length = keys.length;
  if (length !== Object.keys(next).length) {
    return false;
  }
  for (var ii = 0; ii < length; ii++) {
    var key = keys[ii];
    if (!hasOwn(next, key)) {
      return false;
    }
    var prevComponent = prev[key];
    var nextComponent = next[key];
    if (key === 'style') {
      if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
        return false;
      }
    } else if (prevComponent instanceof _AnimatedNode.default || prevComponent instanceof _AnimatedEvent.AnimatedEvent) {
      if (prevComponent !== nextComponent) {
        return false;
      }
    } else {
      if (allowlist == null) {
        if (prevComponent !== nextComponent) {
          return false;
        }
      } else {
        if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
          return false;
        }
      }
    }
  }
  return true;
}
function areCompositeKeyComponentsEqual(prev, next) {
  if (prev === next) {
    return true;
  }
  if (prev instanceof _AnimatedNode.default) {
    return prev === next;
  }
  if (Array.isArray(prev)) {
    if (!Array.isArray(next)) {
      return false;
    }
    var length = prev.length;
    if (length !== next.length) {
      return false;
    }
    for (var ii = 0; ii < length; ii++) {
      if (!areCompositeKeyComponentsEqual(prev[ii], next[ii])) {
        return false;
      }
    }
    return true;
  }
  if ((0, _AnimatedObject.isPlainObject)(prev)) {
    if (!(0, _AnimatedObject.isPlainObject)(next)) {
      return false;
    }
    var keys = Object.keys(prev);
    var _length = keys.length;
    if (_length !== Object.keys(next).length) {
      return false;
    }
    for (var _ii = 0; _ii < _length; _ii++) {
      var key = keys[_ii];
      if (!hasOwn((0, _nullthrows.default)(next), key) || !areCompositeKeyComponentsEqual(prev[key], next[key])) {
        return false;
      }
    }
    return true;
  }
  return false;
}
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = (_Object$hasOwn = Object.hasOwn) != null ? _Object$hasOwn : function (obj, prop) {
  return _hasOwnProp.call(obj, prop);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,