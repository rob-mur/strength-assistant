{"version":3,"names":["_registry","require","_expoModulesCore","_AssetSources","AssetUris","_interopRequireWildcard","_ExpoAsset","ImageAssets","_LocalAssets","_PlatformUtils","_resolveAssetSource2","_interopRequireDefault","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ANDROID_EMBEDDED_URL_BASE_RESOURCE","exports","Asset","_ref","name","type","_ref$hash","hash","uri","width","height","_classCallCheck2","localUri","downloading","downloaded","_downloadCallbacks","_this$localUri","getLocalAssetUri","startsWith","Platform","OS","getFilename","getFileExtension","_createClass2","key","value","_downloadAsync2","_asyncToGenerator2","_this","Promise","resolve","reject","push","isImageType","_yield$ImageAssets$ge","getImageInfoAsync","downloadAsync","forEach","_ref2","_ref3","apply","arguments","loadAsync","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","extension","substring","meta","getAssetByID","Error","IS_ENV_WITH_LOCAL_ASSETS","_resolveAssetSource","resolveAssetSource","asset","includes","byHash","fromMetadata","metaHash","_selectAssetSource","selectAssetSource","byUri","indexOf","split"],"sources":["../src/Asset.ts"],"sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\n\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { downloadAsync } from './ExpoAsset';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { IS_ENV_WITH_LOCAL_ASSETS } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n/**\n * Android resource URL prefix.\n * @hidden\n */\nexport const ANDROID_EMBEDDED_URL_BASE_RESOURCE = 'file:///android_res/';\n\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  private static byHash: Record<string, Asset | undefined> = {};\n  private static byUri: Record<string, Asset | undefined> = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  public name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  public readonly type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  public readonly hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer. If you\n   * are not using Classic Updates (legacy), this field should be ignored as we ensure your assets\n   * are on device before running your application logic.\n   */\n  public readonly uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  public localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  public width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  public height: number | null = null;\n\n  private downloading: boolean = false;\n\n  /**\n   * Whether the asset has finished downloading from a call to [`downloadAsync()`](#downloadasync).\n   */\n  public downloaded: boolean = false;\n\n  private _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri?.startsWith(ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {\n        // Treat Android embedded resources as not downloaded state, because the uri is not direct accessible.\n        this.uri = this.localUri;\n        this.localUri = null;\n      } else if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(\n    virtualAssetModule: number | string | { uri: string; width: number; height: number }\n  ): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n    if (\n      typeof virtualAssetModule === 'object' &&\n      'uri' in virtualAssetModule &&\n      typeof virtualAssetModule.uri === 'string'\n    ) {\n      const extension = AssetUris.getFileExtension(virtualAssetModule.uri);\n      return new Asset({\n        name: '',\n        type: extension.startsWith('.') ? extension.substring(1) : extension,\n        hash: null,\n        uri: virtualAssetModule.uri,\n        width: virtualAssetModule.width,\n        height: virtualAssetModule.height,\n      });\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_LOCAL_ASSETS) {\n      // null-check is performed above with `getAssetByID`.\n      const { uri } = resolveAssetSource(virtualAssetModule)!;\n\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // For images backward compatibility,\n      // keeps localUri the same as uri for React Native's Image that\n      // works fine with drawable resource names.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#localuri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e: any) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]}