6afd5eab362032a27e06e6e797928465
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FirebaseExerciseRepo = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Exercise = require("../models/Exercise");
var _state = require("@legendapp/state");
var _initializer = require("../data/firebase/initializer");
var _reactNative = require("react-native");
var _LoggingUtils = require("./utils/LoggingUtils");
var _RepositoryUtils = require("./utils/RepositoryUtils");
var getFirebaseModule = function getFirebaseModule() {
  if (_reactNative.Platform.OS === "web") {
    return require("../data/firebase/firebase.web");
  } else {
    return null;
  }
};
var FirebaseExerciseRepo = exports.FirebaseExerciseRepo = function () {
  function FirebaseExerciseRepo() {
    (0, _classCallCheck2.default)(this, FirebaseExerciseRepo);
    this.initialized = false;
    this.ensureInitialized();
  }
  return (0, _createClass2.default)(FirebaseExerciseRepo, [{
    key: "ensureInitialized",
    value: function ensureInitialized() {
      if (!this.initialized) {
        try {
          (0, _initializer.initializeFirebaseServices)();
          var db = (0, _initializer.getDb)();
          if (!db) {
            throw new Error("Firebase initialization completed but Firestore instance is not available");
          }
          this.initialized = true;
          _LoggingUtils.RepositoryLogger.logSuccess("FirebaseExerciseRepo", "initialize");
        } catch (error) {
          _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "initialize Firebase services", error);
          this.initialized = false;
          throw error;
        }
      }
    }
  }, {
    key: "addExercise",
    value: (function () {
      var _addExercise = (0, _asyncToGenerator2.default)(function* (userId, exercise) {
        this.ensureInitialized();
        try {
          _Exercise.ExerciseValidator.validateExerciseInput(exercise);
          var sanitizedName = _Exercise.ExerciseValidator.sanitizeExerciseName(exercise.name);
          var db = (0, _initializer.getDb)();
          if (!db) {
            throw new Error("Firebase Firestore instance is not available. Ensure Firebase is properly initialized.");
          }
          var newExercise = {
            name: sanitizedName,
            created_at: new Date().toISOString()
          };
          var path = _RepositoryUtils.RepositoryUtils.getExercisesCollectionPath(userId);
          if (_reactNative.Platform.OS === "web") {
            var firebaseModule = getFirebaseModule();
            if (!firebaseModule) {
              throw new Error("Firebase web module not available");
            }
            var collection = firebaseModule.collection,
              addDoc = firebaseModule.addDoc;
            var exercisesCollection = collection(db, path);
            yield addDoc(exercisesCollection, newExercise);
          } else {
            var _exercisesCollection = db.collection(path);
            yield _exercisesCollection.add(newExercise);
          }
          _LoggingUtils.RepositoryLogger.logSuccess("FirebaseExerciseRepo", "addExercise");
        } catch (error) {
          _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "add exercise", error);
          throw error;
        }
      });
      function addExercise(_x, _x2) {
        return _addExercise.apply(this, arguments);
      }
      return addExercise;
    }())
  }, {
    key: "getExercises",
    value: function getExercises(userId) {
      var _this = this;
      this.ensureInitialized();
      var exercises$ = (0, _state.observable)([]);
      try {
        var exercisesQuery = this.createExercisesQuery(userId);
        var unsubscribe = exercisesQuery.onSnapshot(function (snapshot) {
          var exercises = _this.processSnapshot(snapshot, userId);
          exercises$.set(exercises);
        });
        exercises$._unsubscribe = unsubscribe;
        _LoggingUtils.RepositoryLogger.logSuccess("FirebaseExerciseRepo", "getExercises");
      } catch (error) {
        _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "get exercises", error);
      }
      return exercises$;
    }
  }, {
    key: "subscribeToExercises",
    value: function subscribeToExercises(userId, callback) {
      var _this2 = this;
      this.ensureInitialized();
      try {
        var exercisesQuery = this.createExercisesQuery(userId);
        var unsubscribe;
        if (_reactNative.Platform.OS === "web") {
          var firebaseModule = getFirebaseModule();
          if (!firebaseModule) {
            throw new Error("Firebase web module not available");
          }
          var onSnapshot = firebaseModule.onSnapshot;
          unsubscribe = onSnapshot(exercisesQuery, function (snapshot) {
            var exercises = _this2.processSnapshot(snapshot, userId);
            callback(exercises);
          });
        } else {
          unsubscribe = exercisesQuery.onSnapshot(function (snapshot) {
            var exercises = _this2.processSnapshot(snapshot, userId);
            callback(exercises);
          });
        }
        _LoggingUtils.RepositoryLogger.logSuccess("FirebaseExerciseRepo", "subscribeToExercises");
        return unsubscribe;
      } catch (error) {
        _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "subscribe to exercises", error);
        return function () {};
      }
    }
  }, {
    key: "deleteExercise",
    value: (function () {
      var _deleteExercise = (0, _asyncToGenerator2.default)(function* (userId, exerciseId) {
        this.ensureInitialized();
        try {
          _RepositoryUtils.RepositoryUtils.validateExerciseId(exerciseId);
          var db = (0, _initializer.getDb)();
          if (!db) {
            throw new Error("Firebase Firestore instance is not available. Ensure Firebase is properly initialized.");
          }
          var path = _RepositoryUtils.RepositoryUtils.getExercisesCollectionPath(userId);
          if (_reactNative.Platform.OS === "web") {
            var firebaseModule = getFirebaseModule();
            if (!firebaseModule) {
              throw new Error("Firebase web module not available");
            }
            var doc = firebaseModule.doc,
              deleteDoc = firebaseModule.deleteDoc;
            var exerciseDoc = doc(db, path, exerciseId);
            yield deleteDoc(exerciseDoc);
          } else {
            var _exerciseDoc = db.collection(path).doc(exerciseId);
            yield _exerciseDoc.delete();
          }
          _LoggingUtils.RepositoryLogger.logSuccess("FirebaseExerciseRepo", "deleteExercise");
        } catch (error) {
          _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "delete exercise", error);
          throw error;
        }
      });
      function deleteExercise(_x3, _x4) {
        return _deleteExercise.apply(this, arguments);
      }
      return deleteExercise;
    }())
  }, {
    key: "getExerciseById",
    value: (function () {
      var _getExerciseById = (0, _asyncToGenerator2.default)(function* (exerciseId, userId) {
        try {
          var exercises$ = this.getExercises(userId);
          var exercises = exercises$.get();
          return exercises.find(function (exercise) {
            return exercise.id === exerciseId;
          });
        } catch (error) {
          _LoggingUtils.RepositoryLogger.logError("FirebaseExerciseRepo", "get exercise by ID", error);
          return undefined;
        }
      });
      function getExerciseById(_x5, _x6) {
        return _getExerciseById.apply(this, arguments);
      }
      return getExerciseById;
    }())
  }, {
    key: "isSyncing",
    value: function isSyncing() {
      return false;
    }
  }, {
    key: "isOnline",
    value: function isOnline() {
      var _navigator$onLine;
      return (_navigator$onLine = navigator.onLine) != null ? _navigator$onLine : true;
    }
  }, {
    key: "getPendingChangesCount",
    value: function getPendingChangesCount() {
      return 0;
    }
  }, {
    key: "forceSync",
    value: (function () {
      var _forceSync = (0, _asyncToGenerator2.default)(function* () {
        return Promise.resolve();
      });
      function forceSync() {
        return _forceSync.apply(this, arguments);
      }
      return forceSync;
    }())
  }, {
    key: "hasErrors",
    value: function hasErrors() {
      return false;
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage() {
      return null;
    }
  }, {
    key: "createExercisesQuery",
    value: function createExercisesQuery(userId) {
      var db = (0, _initializer.getDb)();
      if (!db) {
        throw new Error("Firebase Firestore instance is not available. Ensure Firebase is properly initialized.");
      }
      var path = _RepositoryUtils.RepositoryUtils.getExercisesCollectionPath(userId);
      if (_reactNative.Platform.OS === "web") {
        var firebaseModule = getFirebaseModule();
        if (!firebaseModule) {
          throw new Error("Firebase web module not available");
        }
        var collection = firebaseModule.collection,
          query = firebaseModule.query,
          orderBy = firebaseModule.orderBy;
        var exercisesCollection = collection(db, path);
        return query(exercisesCollection, orderBy("created_at", "desc"));
      } else {
        var _exercisesCollection2 = db.collection(path);
        return _exercisesCollection2.orderBy("created_at", "desc");
      }
    }
  }, {
    key: "processSnapshot",
    value: function processSnapshot(snapshot, userId) {
      var exercises = [];
      snapshot.forEach(function (doc) {
        var data = doc.data();
        if (_RepositoryUtils.RepositoryUtils.validateExerciseData(data)) {
          exercises.push({
            id: doc.id,
            name: data.name,
            user_id: userId,
            created_at: data.created_at
          });
        }
      });
      return exercises;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!FirebaseExerciseRepo.instance) {
        FirebaseExerciseRepo.instance = new FirebaseExerciseRepo();
      }
      return FirebaseExerciseRepo.instance;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,