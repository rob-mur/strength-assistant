{"version":3,"names":["ExerciseValidator","exports","_classCallCheck2","default","_createClass2","key","value","validateExerciseInput","input","Error","validateExerciseName","name","undefined","trimmedName","trim","length","MIN_NAME_LENGTH","MAX_NAME_LENGTH","VALID_NAME_PATTERN","test","sanitizeExerciseName","replace"],"sources":["Exercise.ts"],"sourcesContent":["export interface Exercise {\n  id: string;\n  name: string;\n  user_id: string;\n  created_at: string;\n}\n\nexport interface ExerciseInput {\n  name: string;\n}\n\n/**\n * Validation utilities for exercise data\n */\nexport class ExerciseValidator {\n  private static readonly MIN_NAME_LENGTH = 1;\n  private static readonly MAX_NAME_LENGTH = 100;\n  private static readonly VALID_NAME_PATTERN = /^[a-zA-Z0-9\\s\\-_.,()]+$/;\n\n  /**\n   * Validates exercise input data\n   * @param input - The exercise input to validate\n   * @throws Error if validation fails\n   */\n  static validateExerciseInput(input: ExerciseInput): void {\n    if (!input) {\n      throw new Error('Exercise input is required');\n    }\n\n    this.validateExerciseName(input.name);\n  }\n\n  /**\n   * Validates exercise name\n   * @param name - The exercise name to validate\n   * @throws Error if validation fails\n   */\n  static validateExerciseName(name: string): void {\n    if (name === null || name === undefined || typeof name !== 'string') {\n      throw new Error('Exercise name is required and must be a string');\n    }\n\n    const trimmedName = name.trim();\n    \n    if (trimmedName.length < this.MIN_NAME_LENGTH) {\n      throw new Error('Exercise name cannot be empty');\n    }\n\n    if (trimmedName.length > this.MAX_NAME_LENGTH) {\n      throw new Error(`Exercise name cannot exceed ${this.MAX_NAME_LENGTH} characters`);\n    }\n\n    if (!this.VALID_NAME_PATTERN.test(trimmedName)) {\n      throw new Error('Exercise name contains invalid characters. Only letters, numbers, spaces, and basic punctuation are allowed');\n    }\n  }\n\n  /**\n   * Sanitizes exercise name for safe storage\n   * @param name - The exercise name to sanitize\n   * @returns Sanitized name\n   */\n  static sanitizeExerciseName(name: string): string {\n    return name.trim().replace(/\\s+/g, ' ');\n  }\n}\n"],"mappings":";;;;;;;IAcaA,iBAAiB,GAAAC,OAAA,CAAAD,iBAAA;EAAA,SAAAA,kBAAA;IAAA,IAAAE,gBAAA,CAAAC,OAAA,QAAAH,iBAAA;EAAA;EAAA,WAAAI,aAAA,CAAAD,OAAA,EAAAH,iBAAA;IAAAK,GAAA;IAAAC,KAAA,EAU5B,SAAOC,qBAAqBA,CAACC,KAAoB,EAAQ;MACvD,IAAI,CAACA,KAAK,EAAE;QACV,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEA,IAAI,CAACC,oBAAoB,CAACF,KAAK,CAACG,IAAI,CAAC;IACvC;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAOD,SAAOI,oBAAoBA,CAACC,IAAY,EAAQ;MAC9C,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;QACnE,MAAM,IAAIF,KAAK,CAAC,gDAAgD,CAAC;MACnE;MAEA,IAAMI,WAAW,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC;MAE/B,IAAID,WAAW,CAACE,MAAM,GAAG,IAAI,CAACC,eAAe,EAAE;QAC7C,MAAM,IAAIP,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,IAAII,WAAW,CAACE,MAAM,GAAG,IAAI,CAACE,eAAe,EAAE;QAC7C,MAAM,IAAIR,KAAK,CAAC,+BAA+B,IAAI,CAACQ,eAAe,aAAa,CAAC;MACnF;MAEA,IAAI,CAAC,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAACN,WAAW,CAAC,EAAE;QAC9C,MAAM,IAAIJ,KAAK,CAAC,6GAA6G,CAAC;MAChI;IACF;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAOD,SAAOc,oBAAoBA,CAACT,IAAY,EAAU;MAChD,OAAOA,IAAI,CAACG,IAAI,CAAC,CAAC,CAACO,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACzC;EAAC;AAAA;AAlDUrB,iBAAiB,CACJgB,eAAe,GAAG,CAAC;AADhChB,iBAAiB,CAEJiB,eAAe,GAAG,GAAG;AAFlCjB,iBAAiB,CAGJkB,kBAAkB,GAAG,yBAAyB","ignoreList":[]}