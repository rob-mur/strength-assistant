f9b3acd3c0741d233bb4c86222546b27
_getJestObj().mock('child_process');
_getJestObj().mock('fs', function () {
  return {
    promises: {
      stat: jest.fn(),
      readFile: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _TypeScriptValidator = require("../../src/typescript/TypeScriptValidator");
var _child_process = require("child_process");
var _fs = require("fs");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSpawn = _child_process.spawn;
var mockStat = _fs.promises.stat;
describe('TypeScriptValidator Unit Tests', function () {
  var validator;
  var mockProjectRoot = '/mock/project';
  beforeEach(function () {
    validator = new _TypeScriptValidator.TypeScriptValidatorImpl(mockProjectRoot);
    jest.clearAllMocks();
  });
  describe('validateCompilation', function () {
    it('should return success when TypeScript compilation succeeds', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var mockCountProcess = createMockProcess(0, 'file1.ts\nfile2.ts\nfile3.ts', '');
      mockSpawn.mockReturnValueOnce(mockProcess).mockReturnValueOnce(mockCountProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(true);
      expect(result.errors).toHaveLength(0);
      expect(result.warnings).toHaveLength(0);
      expect(result.statistics.errorCount).toBe(0);
      expect(result.statistics.warningCount).toBe(0);
      expect(result.statistics.duration).toBeGreaterThan(0);
    }));
    it('should return errors when TypeScript compilation fails', (0, _asyncToGenerator2.default)(function* () {
      var tsErrorOutput = `
src/test.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.
src/test.ts(15,10): error TS2304: Cannot find name 'undefinedVariable'.
      `.trim();
      var mockProcess = createMockProcess(1, '', tsErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(2);
      var firstError = result.errors[0];
      expect(firstError.file).toBe('src/test.ts');
      expect(firstError.line).toBe(10);
      expect(firstError.column).toBe(5);
      expect(firstError.code).toBe('TS2322');
      expect(firstError.severity).toBe('error');
      expect(firstError.message).toContain('Type \'string\' is not assignable to type \'number\'');
      expect(result.statistics.errorCount).toBe(2);
    }));
    it('should handle TypeScript warnings correctly', (0, _asyncToGenerator2.default)(function* () {
      var tsWarningOutput = `
src/test.ts(5,1): warning TS6133: 'unusedVariable' is declared but its value is never read.
      `.trim();
      var mockProcess = createMockProcess(0, '', tsWarningOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(true);
      expect(result.errors).toHaveLength(0);
      expect(result.warnings).toHaveLength(1);
      var warning = result.warnings[0];
      expect(warning.file).toBe('src/test.ts');
      expect(warning.line).toBe(5);
      expect(warning.code).toBe('TS6133');
      expect(warning.severity).toBe('warning');
      expect(warning.ignorable).toBe(true);
    }));
    it('should handle process errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(null, '', '');
      mockProcess.emit('error', new Error('Process spawn failed'));
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].message).toContain('TypeScript validation failed');
      expect(result.errors[0].file).toBe('validation-process');
    }));
    it('should timeout long-running compilations', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(null, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var originalSetTimeout = global.setTimeout;
      global.setTimeout = jest.fn(function (callback) {
        if (typeof callback === 'function') {
          callback();
        }
        return 1;
      });
      try {
        var result = yield validator.validateCompilation();
        expect(result.success).toBe(false);
        expect(result.errors[0].message).toContain('timed out');
      } finally {
        global.setTimeout = originalSetTimeout;
      }
    }));
  });
  describe('validateFiles', function () {
    it('should validate specific files', (0, _asyncToGenerator2.default)(function* () {
      var testFiles = ['src/file1.ts', 'src/file2.ts'];
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles(testFiles);
      expect(result.success).toBe(true);
      expect(result.statistics.filesValidated).toBe(testFiles.length);
      expect(mockSpawn).toHaveBeenCalledWith('npx', ['tsc', '--noEmit'].concat(testFiles), expect.any(Object));
    }));
    it('should handle empty file list', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles([]);
      expect(result.success).toBe(true);
      expect(result.statistics.filesValidated).toBe(0);
    }));
    it('should handle file validation errors', (0, _asyncToGenerator2.default)(function* () {
      var tsErrorOutput = 'src/file1.ts(1,1): error TS2304: Cannot find name \'unknown\'.';
      var mockProcess = createMockProcess(1, '', tsErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateFiles(['src/file1.ts']);
      expect(result.success).toBe(false);
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].file).toBe('src/file1.ts');
    }));
  });
  describe('getConfiguration', function () {
    it('should read and parse tsconfig.json', function () {
      var mockTsConfig = {
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: false,
          skipLibCheck: true,
          target: 'es2017'
        },
        include: ['src/**/*'],
        exclude: ['node_modules', 'dist']
      };
      var originalRequire = require;
      require = jest.fn().mockReturnValue(mockTsConfig);
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(true);
        expect(config.compilerOptions.noImplicitAny).toBe(true);
        expect(config.compilerOptions.noImplicitReturns).toBe(false);
        expect(config.compilerOptions.skipLibCheck).toBe(true);
        expect(config.include).toEqual(['src/**/*']);
        expect(config.exclude).toEqual(['node_modules', 'dist']);
      } finally {
        require = originalRequire;
      }
    });
    it('should return default configuration when tsconfig.json is missing', function () {
      var originalRequire = require;
      require = jest.fn().mockImplementation(function () {
        throw new Error('Cannot find module');
      });
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(false);
        expect(config.compilerOptions.noImplicitAny).toBe(false);
        expect(config.compilerOptions.noImplicitReturns).toBe(false);
        expect(config.compilerOptions.skipLibCheck).toBe(true);
        expect(config.include).toEqual([]);
        expect(config.exclude).toEqual([]);
      } finally {
        require = originalRequire;
      }
    });
    it('should handle malformed tsconfig.json', function () {
      var originalRequire = require;
      require = jest.fn().mockImplementation(function () {
        throw new SyntaxError('Unexpected token in JSON');
      });
      try {
        var config = validator.getConfiguration();
        expect(config.compilerOptions.strict).toBe(false);
        expect(config.include).toEqual([]);
      } finally {
        require = originalRequire;
      }
    });
  });
  describe('validateConfiguration', function () {
    it('should validate compliant configuration', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: true,
          skipLibCheck: false
        },
        include: ['src/**/*'],
        exclude: ['node_modules']
      });
      var result = yield validator.validateConfiguration();
      expect(result.compliant).toBe(true);
      expect(result.violations).toHaveLength(0);
    }));
    it('should detect constitutional violations', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: false,
          noImplicitAny: false,
          noImplicitReturns: false,
          skipLibCheck: true
        },
        include: [],
        exclude: []
      });
      var result = yield validator.validateConfiguration();
      expect(result.compliant).toBe(false);
      expect(result.violations.length).toBeGreaterThan(0);
      var strictViolation = result.violations.find(function (v) {
        return v.property === 'compilerOptions.strict';
      });
      expect(strictViolation).toBeDefined();
      expect(strictViolation == null ? void 0 : strictViolation.currentValue).toBe(false);
      expect(strictViolation == null ? void 0 : strictViolation.requiredValue).toBe(true);
      expect(strictViolation == null ? void 0 : strictViolation.reason).toContain('Constitutional requirement');
      var noImplicitAnyViolation = result.violations.find(function (v) {
        return v.property === 'compilerOptions.noImplicitAny';
      });
      expect(noImplicitAnyViolation).toBeDefined();
    }));
    it('should provide helpful recommendations', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(validator, 'getConfiguration').mockReturnValue({
        compilerOptions: {
          strict: true,
          noImplicitAny: true,
          noImplicitReturns: true,
          skipLibCheck: true
        },
        include: [],
        exclude: []
      });
      var result = yield validator.validateConfiguration();
      expect(result.recommendations.length).toBeGreaterThan(0);
      expect(result.recommendations).toContain('Consider setting skipLibCheck to false for thorough type checking');
      expect(result.recommendations).toContain('Specify include patterns to explicitly define files to compile');
    }));
  });
  describe('Error Parsing', function () {
    it('should parse complex TypeScript error messages', (0, _asyncToGenerator2.default)(function* () {
      var complexErrorOutput = `
node_modules/@types/react/index.d.ts(3080,13): error TS2717: Subsequent property declarations must have the same type.
src/components/Button.tsx(25,7): error TS2322: Type '{ onClick: () => void; children: string; variant: "invalid"; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
src/utils/helpers.ts(42,1): warning TS6133: 'unusedFunction' is declared but its value is never read.
      `.trim();
      var mockProcess = createMockProcess(1, '', complexErrorOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.errors).toHaveLength(2);
      expect(result.warnings).toHaveLength(1);
      var buttonError = result.errors.find(function (e) {
        return e.file.includes('Button.tsx');
      });
      expect(buttonError).toBeDefined();
      expect(buttonError == null ? void 0 : buttonError.message).toContain('Type \'{ onClick: () => void; children: string; variant: "invalid"; }\'');
    }));
    it('should ignore non-standard error format lines', (0, _asyncToGenerator2.default)(function* () {
      var mixedOutput = `
Compilation starting...
src/test.ts(1,1): error TS2304: Cannot find name 'unknown'.
Found 1 error.
Process completed.
      `.trim();
      var mockProcess = createMockProcess(1, '', mixedOutput);
      mockSpawn.mockReturnValue(mockProcess);
      var result = yield validator.validateCompilation();
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].file).toBe('src/test.ts');
    }));
  });
  describe('Performance Tests', function () {
    it('should track validation duration accurately', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      mockSpawn.mockReturnValue(mockProcess);
      setTimeout(function () {
        return mockProcess.emit('close', 0);
      }, 100);
      var startTime = Date.now();
      var result = yield validator.validateCompilation();
      var actualDuration = Date.now() - startTime;
      expect(result.statistics.duration).toBeGreaterThan(50);
      expect(Math.abs(result.statistics.duration - actualDuration)).toBeLessThan(50);
    }));
    it('should handle file counting efficiently', (0, _asyncToGenerator2.default)(function* () {
      var mockProcess = createMockProcess(0, '', '');
      var mockCountProcess = createMockProcess(0, 'file1.ts\nfile2.ts\nfile3.ts\nfile4.ts\nfile5.ts', '');
      mockSpawn.mockReturnValueOnce(mockProcess).mockReturnValueOnce(mockCountProcess);
      var result = yield validator.validateCompilation();
      expect(result.statistics.filesValidated).toBe(5);
    }));
  });
});
function createMockProcess(exitCode, stdout, stderr) {
  var mockProcess = {
    stdout: {
      on: jest.fn(function (event, callback) {
        if (event === 'data' && stdout) {
          setTimeout(function () {
            return callback(stdout);
          }, 10);
        }
      })
    },
    stderr: {
      on: jest.fn(function (event, callback) {
        if (event === 'data' && stderr) {
          setTimeout(function () {
            return callback(stderr);
          }, 10);
        }
      })
    },
    on: jest.fn(function (event, callback) {
      if (event === 'close' && exitCode !== null) {
        setTimeout(function () {
          return callback(exitCode);
        }, 20);
      }
    }),
    emit: jest.fn(),
    kill: jest.fn()
  };
  return mockProcess;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,