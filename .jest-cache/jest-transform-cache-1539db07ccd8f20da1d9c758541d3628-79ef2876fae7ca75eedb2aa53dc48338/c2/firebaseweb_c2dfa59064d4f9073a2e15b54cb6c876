7caf8adbe7094fa4f9a97db82b085fcc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "addDoc", {
  enumerable: true,
  get: function get() {
    return _firestore.addDoc;
  }
});
Object.defineProperty(exports, "collection", {
  enumerable: true,
  get: function get() {
    return _firestore.collection;
  }
});
Object.defineProperty(exports, "deleteDoc", {
  enumerable: true,
  get: function get() {
    return _firestore.deleteDoc;
  }
});
Object.defineProperty(exports, "doc", {
  enumerable: true,
  get: function get() {
    return _firestore.doc;
  }
});
exports.getDb = getDb;
exports.getFirebaseApp = getFirebaseApp;
exports.initFirebase = initFirebase;
Object.defineProperty(exports, "onSnapshot", {
  enumerable: true,
  get: function get() {
    return _firestore.onSnapshot;
  }
});
Object.defineProperty(exports, "orderBy", {
  enumerable: true,
  get: function get() {
    return _firestore.orderBy;
  }
});
Object.defineProperty(exports, "query", {
  enumerable: true,
  get: function get() {
    return _firestore.query;
  }
});
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _app = require("@firebase/app");
var _firestore = require("@firebase/firestore");
var _firebaseCore = require("./firebase-core");
var _firebaseWebConfig = _interopRequireDefault(require("../../../firebase.web.config.json"));
var _excluded = ["apiKey"];
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var FirebaseWebService = function (_FirebaseService) {
  function FirebaseWebService() {
    (0, _classCallCheck2.default)(this, FirebaseWebService);
    return _callSuper(this, FirebaseWebService, ["Firebase"]);
  }
  (0, _inherits2.default)(FirebaseWebService, _FirebaseService);
  return (0, _createClass2.default)(FirebaseWebService, [{
    key: "init",
    value: function init() {
      if (this.initialized) {
        this.logInfo("Already initialized, skipping");
        return;
      }
      var startTime = Date.now();
      this.logInfo("Initializing Firebase app and Firestore...", {
        operation: "init",
        config: this.sanitizeConfig(_firebaseWebConfig.default)
      });
      try {
        this.app = (0, _app.initializeApp)(_firebaseWebConfig.default);
        this.db = (0, _firestore.getFirestore)(this.app);
        this.logInfo("Firebase app and Firestore initialized successfully", {
          operation: "init",
          duration: Date.now() - startTime
        });
        this.setupEmulator();
        this.initialized = true;
        this.logInfo("Initialization complete", {
          operation: "init",
          duration: Date.now() - startTime
        });
      } catch (error) {
        this.logError("Failed to initialize Firebase", {
          operation: "init",
          duration: Date.now() - startTime,
          error: {
            message: error.message,
            stack: error.stack
          }
        });
        throw error;
      }
    }
  }, {
    key: "sanitizeConfig",
    value: function sanitizeConfig(config) {
      var apiKey = config.apiKey,
        safeConfig = (0, _objectWithoutProperties2.default)(config, _excluded);
      return Object.assign({}, safeConfig, {
        apiKey: apiKey ? `${apiKey.slice(0, 8)}...` : 'not-set'
      });
    }
  }, {
    key: "setupEmulator",
    value: function setupEmulator() {
      if (!this.db) return;
      if (this.isEmulatorEnabled()) {
        var host = this.getEmulatorHost();
        var port = 8080;
        this.logInfo("Development mode detected, connecting to emulator", {
          operation: "emulator_setup",
          emulator: {
            host: host,
            port: port
          }
        });
        try {
          var _delegate;
          if (!((_delegate = this.db._delegate) != null && (_delegate = _delegate._databaseId) != null && (_delegate = _delegate.database) != null && _delegate.includes('emulator'))) {
            (0, _firestore.connectFirestoreEmulator)(this.db, host, port);
            this.logInfo("Successfully connected to Firestore emulator", {
              operation: "emulator_setup",
              emulator: {
                host: host,
                port: port
              }
            });
          } else {
            this.logInfo("Firestore emulator already connected", {
              operation: "emulator_setup",
              emulator: {
                host: host,
                port: port
              }
            });
          }
        } catch (error) {
          this.logError("Failed to connect to emulator", {
            operation: "emulator_setup",
            emulator: {
              host: host,
              port: port
            },
            error: {
              message: error.message
            }
          });
          this.logWarn("Continuing without emulator for Chrome testing compatibility");
        }
      } else {
        this.logInfo("Production mode, using production Firestore", {
          operation: "emulator_setup"
        });
      }
    }
  }, {
    key: "getDb",
    value: function getDb() {
      this.assertInitialized("getDb()");
      if (!this.db) {
        var error = new Error("Firestore instance not available. This may indicate an initialization timing issue in web environment.");
        this.logError("getDb() called but Firestore instance is null", {
          operation: "getDb",
          initialized: this.initialized,
          dbInstance: !!this.db
        });
        throw error;
      }
      return this.db;
    }
  }, {
    key: "getFirebaseApp",
    value: function getFirebaseApp() {
      this.assertInitialized("getFirebaseApp()");
      if (!this.app) {
        throw new Error("Firebase app instance not available");
      }
      return this.app;
    }
  }, {
    key: "isReady",
    value: function isReady() {
      return this.initialized && !!this.app && !!this.db;
    }
  }]);
}(_firebaseCore.FirebaseService);
var firebaseService = new FirebaseWebService();
function initFirebase() {
  firebaseService.init();
}
function getDb() {
  return firebaseService.getDb();
}
function getFirebaseApp() {
  return firebaseService.getFirebaseApp();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,