37e1a24057b699a7c0e1bb28386b9d7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuth = useAuth;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var AuthWeb = _interopRequireWildcard(require("../data/firebase/auth.web"));
var AuthNative = _interopRequireWildcard(require("../data/firebase/auth.native"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var getAuthFunctions = function getAuthFunctions() {
  return _reactNative.Platform.OS === "web" ? AuthWeb : AuthNative;
};
function useAuth() {
  var _useState = (0, _react.useState)({
      user: null,
      loading: true,
      error: null
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    authState = _useState2[0],
    setAuthState = _useState2[1];
  var handleUserStateChange = function handleUserStateChange(user) {
    var userData = user ? {
      uid: user.uid,
      email: user.email,
      isAnonymous: user.isAnonymous
    } : null;
    setAuthState({
      user: userData,
      loading: false,
      error: null
    });
  };
  var setErrorState = function setErrorState() {
    setAuthState({
      user: null,
      loading: false,
      error: null
    });
  };
  var initializeAuthWithTimeout = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (authFunctions) {
      var initPromise = new Promise(function (resolve, reject) {
        try {
          authFunctions.initAuth();
          resolve();
        } catch (error) {
          reject(error);
        }
      });
      var timeoutPromise = new Promise(function (_, reject) {
        setTimeout(function () {
          return reject(new Error("Auth initialization timeout"));
        }, 5000);
      });
      return Promise.race([initPromise, timeoutPromise]);
    });
    return function initializeAuthWithTimeout(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var setupAuthListener = function setupAuthListener(authFunctions) {
    var userStateHandler = function userStateHandler(user) {
      try {
        handleUserStateChange(user);
      } catch (error) {
        setErrorState();
      }
    };
    return _reactNative.Platform.OS === "web" ? authFunctions.onAuthStateChangedWeb(userStateHandler) : authFunctions.onAuthStateChangedNative(userStateHandler);
  };
  var initializeAuth = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var authFunctions = getAuthFunctions();
        yield initializeAuthWithTimeout(authFunctions);
        return setupAuthListener(authFunctions);
      } catch (error) {
        setErrorState();
        return undefined;
      }
    });
    return function initializeAuth() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true') {
      setErrorState();
      return;
    }
    var unsubscribe;
    var timeoutId = setTimeout(function () {
      initializeAuth().then(function (authUnsubscribe) {
        unsubscribe = authUnsubscribe;
      }).catch(function () {
        setErrorState();
      });
    }, 50);
    return function () {
      clearTimeout(timeoutId);
      if (!unsubscribe) return;
      try {
        unsubscribe();
      } catch (error) {
        console.error("Error during auth listener cleanup:", error);
      }
    };
  }, []);
  var signInAnonymously = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (process.env.CHROME_TEST === 'true' || process.env.CI === 'true' || process.env.NODE_ENV === 'test') {
        setAuthState({
          user: {
            uid: "test-user-chrome",
            email: null,
            isAnonymous: true
          },
          loading: false,
          error: null
        });
        return;
      }
      try {
        var authFunctions = getAuthFunctions();
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: true,
            error: null
          });
        });
        var signInFunction = _reactNative.Platform.OS === "web" ? authFunctions.signInAnonymouslyWeb : authFunctions.signInAnonymouslyNative;
        yield signInFunction();
      } catch (error) {
        console.error("Anonymous sign in failed:", error);
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: false,
            error: {
              code: error.code || "unknown",
              message: error.message || "An error occurred"
            }
          });
        });
      }
    });
    return function signInAnonymously() {
      return _ref3.apply(this, arguments);
    };
  }();
  var createAccount = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (email, password) {
      try {
        var authFunctions = getAuthFunctions();
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: true,
            error: null
          });
        });
        var createFunction = _reactNative.Platform.OS === "web" ? authFunctions.createAccountWeb : authFunctions.createAccountNative;
        yield createFunction(email, password);
      } catch (error) {
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: false,
            error: {
              code: error.code || "unknown",
              message: error.message || "An error occurred"
            }
          });
        });
      }
    });
    return function createAccount(_x2, _x3) {
      return _ref4.apply(this, arguments);
    };
  }();
  var signIn = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (email, password) {
      try {
        var authFunctions = getAuthFunctions();
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: true,
            error: null
          });
        });
        var signInFunction = _reactNative.Platform.OS === "web" ? authFunctions.signInWeb : authFunctions.signInNative;
        yield signInFunction(email, password);
      } catch (error) {
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: false,
            error: {
              code: error.code || "unknown",
              message: error.message || "An error occurred"
            }
          });
        });
      }
    });
    return function signIn(_x4, _x5) {
      return _ref5.apply(this, arguments);
    };
  }();
  var signOut = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var authFunctions = getAuthFunctions();
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: true,
            error: null
          });
        });
        var signOutFunction = _reactNative.Platform.OS === "web" ? authFunctions.signOutWeb : authFunctions.signOutNative;
        yield signOutFunction();
      } catch (error) {
        setAuthState(function (prev) {
          return Object.assign({}, prev, {
            loading: false,
            error: {
              code: error.code || "unknown",
              message: error.message || "An error occurred"
            }
          });
        });
      }
    });
    return function signOut() {
      return _ref6.apply(this, arguments);
    };
  }();
  var clearError = function clearError() {
    setAuthState(function (prev) {
      return Object.assign({}, prev, {
        error: null
      });
    });
  };
  return {
    user: authState.user,
    loading: authState.loading,
    error: authState.error,
    signInAnonymously: signInAnonymously,
    createAccount: createAccount,
    signIn: signIn,
    signOut: signOut,
    clearError: clearError
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,