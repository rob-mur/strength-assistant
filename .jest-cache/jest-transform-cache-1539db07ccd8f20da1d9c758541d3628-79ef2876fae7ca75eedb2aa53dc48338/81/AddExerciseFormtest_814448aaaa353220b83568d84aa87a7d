4189ad1973d5f7e5b7b80ccaaae4acd6
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase/initializer', function () {
  return {
    initializeFirebaseServices: jest.fn(),
    getDb: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/supabase/SupabaseClient', function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig', function () {
  return {
    syncExerciseToSupabase: jest.fn(),
    deleteExerciseFromSupabase: jest.fn(),
    syncHelpers: {
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/models/Exercise', function () {
  return {
    ExerciseValidator: {
      validateExerciseInput: jest.fn(),
      sanitizeExerciseName: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    addDoc: jest.fn(),
    deleteDoc: jest.fn(),
    doc: jest.fn(),
    onSnapshot: jest.fn(),
    query: jest.fn(),
    orderBy: jest.fn()
  };
});
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid';
    })
  };
});
_getJestObj().mock("expo-router");
_getJestObj().mock("@/lib/data/firebase");
_getJestObj().mock("@/lib/hooks/useAddExercise");
_getJestObj().mock("@/lib/hooks/useAuth");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _useAddExercise = require("@/lib/hooks/useAddExercise");
var _useAuth = require("@/lib/hooks/useAuth");
var _reactNative = require("@testing-library/react-native");
var _utils = require("../../__test_utils__/utils");
var _AddExerciseForm = _interopRequireDefault(require("@/lib/components/Forms/AddExerciseForm"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseAddExercise = jest.mocked(_useAddExercise.useAddExercise);
var mockUseAuth = jest.mocked(_useAuth.useAuth);
describe("<AddExerciseForm/>", function () {
  var state;
  beforeEach(function () {
    state = new _utils.CommonTestState();
    mockUseAddExercise.mockReturnValue(jest.fn(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (_) {});
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()));
    mockUseAuth.mockReturnValue({
      user: {
        uid: "test-user-uid",
        email: "test@example.com",
        isAnonymous: false
      },
      loading: false,
      error: null,
      signInAnonymously: jest.fn(),
      createAccount: jest.fn(),
      signIn: jest.fn(),
      signOut: jest.fn(),
      clearError: jest.fn()
    });
  });
  test("When the user enters a name and pressed submit the callback is executed", (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AddExerciseForm.default, {}));
    yield state.user.type(_reactNative.screen.getByTestId("name"), "Exercise Name");
    yield state.user.press(_reactNative.screen.getByTestId("submit"));
    expect(mockUseAddExercise.mock.lastCall).not.toBeNull();
  }));
  test("Button is disabled and shows loading state during submission", (0, _asyncToGenerator2.default)(function* () {
    var _submitButton$props$a;
    var resolveAddExercise;
    var addExercisePromise = new Promise(function (resolve) {
      resolveAddExercise = resolve;
    });
    mockUseAddExercise.mockReturnValue(jest.fn(function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* (_) {
        yield addExercisePromise;
      });
      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }()));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AddExerciseForm.default, {}));
    var submitButton = _reactNative.screen.getByTestId("submit");
    yield state.user.type(_reactNative.screen.getByTestId("name"), "Exercise Name");
    yield state.user.press(submitButton);
    expect((_submitButton$props$a = submitButton.props.accessibilityState) == null ? void 0 : _submitButton$props$a.disabled).toBe(true);
    resolveAddExercise();
    yield (0, _reactNative.waitFor)(function () {
      var _submitButton$props$a2;
      expect((_submitButton$props$a2 = submitButton.props.accessibilityState) == null ? void 0 : _submitButton$props$a2.disabled).toBe(false);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,