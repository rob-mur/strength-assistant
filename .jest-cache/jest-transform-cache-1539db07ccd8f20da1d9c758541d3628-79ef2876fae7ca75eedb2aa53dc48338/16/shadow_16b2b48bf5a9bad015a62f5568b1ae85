69abfdd92bc4083251faaf821d823744
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shadow;
var _reactNative = require("react-native");
var MD2Colors = _interopRequireWildcard(require("./themes/v2/colors"));
var _tokens = require("./themes/v3/tokens");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var SHADOW_COLOR = MD2Colors.black;
var SHADOW_OPACITY = 0.24;
var MD3_SHADOW_OPACITY = 0.3;
var MD3_SHADOW_COLOR = _tokens.MD3Colors.primary0;
function shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return isV3 ? v3Shadow(elevation) : v2Shadow(elevation);
}
function v2Shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  if (elevation instanceof _reactNative.Animated.Value) {
    var inputRange = [0, 1, 2, 3, 8, 24];
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: new _reactNative.Animated.Value(0),
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: [0, 0.5, 0.75, 2, 7, 23]
        })
      },
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, SHADOW_OPACITY],
        extrapolate: 'clamp'
      }),
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: [0, 0.75, 1.5, 3, 8, 24]
      })
    };
  } else {
    if (elevation === 0) {
      return {};
    }
    var height, radius;
    switch (elevation) {
      case 1:
        height = 0.5;
        radius = 0.75;
        break;
      case 2:
        height = 0.75;
        radius = 1.5;
        break;
      default:
        height = elevation - 1;
        radius = elevation;
    }
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: 0,
        height: height
      },
      shadowOpacity: SHADOW_OPACITY,
      shadowRadius: radius
    };
  }
}
function v3Shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var inputRange = [0, 1, 2, 3, 4, 5];
  var shadowHeight = [0, 1, 2, 4, 6, 8];
  var shadowRadius = [0, 3, 6, 8, 10, 12];
  if (elevation instanceof _reactNative.Animated.Value) {
    return {
      shadowColor: MD3_SHADOW_COLOR,
      shadowOffset: {
        width: new _reactNative.Animated.Value(0),
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: shadowHeight
        })
      },
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, MD3_SHADOW_OPACITY],
        extrapolate: 'clamp'
      }),
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: shadowRadius
      })
    };
  } else {
    return {
      shadowColor: MD3_SHADOW_COLOR,
      shadowOpacity: elevation ? MD3_SHADOW_OPACITY : 0,
      shadowOffset: {
        width: 0,
        height: shadowHeight[elevation]
      },
      shadowRadius: shadowRadius[elevation]
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiTUQyQ29sb3JzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfdG9rZW5zIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiU0hBRE9XX0NPTE9SIiwiYmxhY2siLCJTSEFET1dfT1BBQ0lUWSIsIk1EM19TSEFET1dfT1BBQ0lUWSIsIk1EM19TSEFET1dfQ09MT1IiLCJNRDNDb2xvcnMiLCJwcmltYXJ5MCIsInNoYWRvdyIsImVsZXZhdGlvbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImlzVjMiLCJ2M1NoYWRvdyIsInYyU2hhZG93IiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImlucHV0UmFuZ2UiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsIndpZHRoIiwiaGVpZ2h0IiwiaW50ZXJwb2xhdGUiLCJvdXRwdXRSYW5nZSIsInNoYWRvd09wYWNpdHkiLCJleHRyYXBvbGF0ZSIsInNoYWRvd1JhZGl1cyIsInJhZGl1cyIsInNoYWRvd0hlaWdodCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvc2hhZG93LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsU0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQStDLFNBQUFFLHdCQUFBRSxDQUFBLEVBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFB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