ed7777db7b94d581778f47f6afc558cc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["route", "style", "children", "borderless", "centered", "rippleColor"],
  _excluded2 = ["key"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _overlay = _interopRequireDefault(require("../../styles/overlay"));
var _colors = require("../../styles/themes/v2/colors");
var _useAnimatedValue = _interopRequireDefault(require("../../utils/useAnimatedValue"));
var _useAnimatedValueArray = _interopRequireDefault(require("../../utils/useAnimatedValueArray"));
var _useIsKeyboardShown = _interopRequireDefault(require("../../utils/useIsKeyboardShown"));
var _useLayout = _interopRequireDefault(require("../../utils/useLayout"));
var _Badge = _interopRequireDefault(require("../Badge"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var MIN_RIPPLE_SCALE = 0.001;
var MIN_TAB_WIDTH = 96;
var MAX_TAB_WIDTH = 168;
var BAR_HEIGHT = 56;
var OUTLINE_WIDTH = 64;
var Touchable = function Touchable(_ref) {
  var _0 = _ref.route,
    style = _ref.style,
    children = _ref.children,
    borderless = _ref.borderless,
    centered = _ref.centered,
    rippleColor = _ref.rippleColor,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return _TouchableRipple.default.supported ? React.createElement(_TouchableRipple.default, _extends({}, rest, {
    disabled: rest.disabled || undefined,
    borderless: borderless,
    centered: centered,
    rippleColor: rippleColor,
    style: style
  }), children) : React.createElement(_reactNative.Pressable, _extends({
    style: style
  }, rest), children);
};
var BottomNavigationBar = function BottomNavigationBar(_ref2) {
  var _ref11, _ref12, _ref13;
  var navigationState = _ref2.navigationState,
    renderIcon = _ref2.renderIcon,
    renderLabel = _ref2.renderLabel,
    _ref2$renderTouchable = _ref2.renderTouchable,
    renderTouchable = _ref2$renderTouchable === void 0 ? function (_ref3) {
      var key = _ref3.key,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
      return React.createElement(Touchable, _extends({
        key: key
      }, props));
    } : _ref2$renderTouchable,
    _ref2$getLabelText = _ref2.getLabelText,
    getLabelText = _ref2$getLabelText === void 0 ? function (_ref4) {
      var route = _ref4.route;
      return route.title;
    } : _ref2$getLabelText,
    _ref2$getBadge = _ref2.getBadge,
    getBadge = _ref2$getBadge === void 0 ? function (_ref5) {
      var route = _ref5.route;
      return route.badge;
    } : _ref2$getBadge,
    _ref2$getColor = _ref2.getColor,
    getColor = _ref2$getColor === void 0 ? function (_ref6) {
      var route = _ref6.route;
      return route.color;
    } : _ref2$getColor,
    _ref2$getAccessibilit = _ref2.getAccessibilityLabel,
    getAccessibilityLabel = _ref2$getAccessibilit === void 0 ? function (_ref7) {
      var route = _ref7.route;
      return route.accessibilityLabel;
    } : _ref2$getAccessibilit,
    _ref2$getTestID = _ref2.getTestID,
    getTestID = _ref2$getTestID === void 0 ? function (_ref8) {
      var route = _ref8.route;
      return route.testID;
    } : _ref2$getTestID,
    activeColor = _ref2.activeColor,
    inactiveColor = _ref2.inactiveColor,
    _ref2$keyboardHidesNa = _ref2.keyboardHidesNavigationBar,
    keyboardHidesNavigationBar = _ref2$keyboardHidesNa === void 0 ? _reactNative.Platform.OS === 'android' : _ref2$keyboardHidesNa,
    style = _ref2.style,
    activeIndicatorStyle = _ref2.activeIndicatorStyle,
    _ref2$labeled = _ref2.labeled,
    labeled = _ref2$labeled === void 0 ? true : _ref2$labeled,
    animationEasing = _ref2.animationEasing,
    onTabPress = _ref2.onTabPress,
    onTabLongPress = _ref2.onTabLongPress,
    shiftingProp = _ref2.shifting,
    safeAreaInsets = _ref2.safeAreaInsets,
    _ref2$labelMaxFontSiz = _ref2.labelMaxFontSizeMultiplier,
    labelMaxFontSizeMultiplier = _ref2$labelMaxFontSiz === void 0 ? 1 : _ref2$labelMaxFontSiz,
    compactProp = _ref2.compact,
    _ref2$testID = _ref2.testID,
    testID = _ref2$testID === void 0 ? 'bottom-navigation-bar' : _ref2$testID,
    themeOverrides = _ref2.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _ref9 = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
    bottom = _ref9.bottom,
    left = _ref9.left,
    right = _ref9.right;
  var scale = theme.animation.scale;
  var compact = compactProp != null ? compactProp : !theme.isV3;
  var shifting = shiftingProp != null ? shiftingProp : theme.isV3 ? false : navigationState.routes.length > 3;
  if (shifting && navigationState.routes.length < 2) {
    shifting = false;
    console.warn('BottomNavigation.Bar needs at least 2 tabs to run shifting animation');
  }
  var visibleAnim = (0, _useAnimatedValue.default)(1);
  var tabsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(function (_, i) {
    return i === navigationState.index ? 1 : 0;
  }));
  var indexAnim = (0, _useAnimatedValue.default)(navigationState.index);
  var rippleAnim = (0, _useAnimatedValue.default)(MIN_RIPPLE_SCALE);
  var _ref0 = (0, _useLayout.default)(),
    _ref1 = (0, _slicedToArray2.default)(_ref0, 2),
    layout = _ref1[0],
    onLayout = _ref1[1];
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    keyboardVisible = _React$useState2[0],
    setKeyboardVisible = _React$useState2[1];
  var handleKeyboardShow = React.useCallback(function () {
    setKeyboardVisible(true);
    _reactNative.Animated.timing(visibleAnim, {
      toValue: 0,
      duration: 150 * scale,
      useNativeDriver: true
    }).start();
  }, [scale, visibleAnim]);
  var handleKeyboardHide = React.useCallback(function () {
    _reactNative.Animated.timing(visibleAnim, {
      toValue: 1,
      duration: 100 * scale,
      useNativeDriver: true
    }).start(function () {
      setKeyboardVisible(false);
    });
  }, [scale, visibleAnim]);
  var animateToIndex = React.useCallback(function (index) {
    rippleAnim.setValue(MIN_RIPPLE_SCALE);
    _reactNative.Animated.parallel([_reactNative.Animated.timing(rippleAnim, {
      toValue: 1,
      duration: theme.isV3 || shifting ? 400 * scale : 0,
      useNativeDriver: true
    })].concat((0, _toConsumableArray2.default)(navigationState.routes.map(function (_, i) {
      return _reactNative.Animated.timing(tabsAnims[i], {
        toValue: i === index ? 1 : 0,
        duration: theme.isV3 || shifting ? 150 * scale : 0,
        useNativeDriver: true,
        easing: animationEasing
      });
    })))).start(function () {
      tabsAnims.map(function (tab, i) {
        return tab.setValue(i === index ? 1 : 0);
      });
      indexAnim.setValue(index);
      rippleAnim.setValue(MIN_RIPPLE_SCALE);
    });
  }, [rippleAnim, theme.isV3, shifting, scale, navigationState.routes, tabsAnims, animationEasing, indexAnim]);
  React.useEffect(function () {
    animateToIndex(navigationState.index);
  }, []);
  (0, _useIsKeyboardShown.default)({
    onShow: handleKeyboardShow,
    onHide: handleKeyboardHide
  });
  React.useEffect(function () {
    animateToIndex(navigationState.index);
  }, [navigationState.index, animateToIndex]);
  var eventForIndex = function eventForIndex(index) {
    var event = {
      route: navigationState.routes[index],
      defaultPrevented: false,
      preventDefault: function preventDefault() {
        event.defaultPrevented = true;
      }
    };
    return event;
  };
  var routes = navigationState.routes;
  var colors = theme.colors,
    isDarkTheme = theme.dark,
    mode = theme.mode,
    isV3 = theme.isV3;
  var _ref10 = _reactNative.StyleSheet.flatten(style) || {},
    customBackground = _ref10.backgroundColor,
    _ref10$elevation = _ref10.elevation,
    elevation = _ref10$elevation === void 0 ? 4 : _ref10$elevation;
  var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.primary;
  var v2BackgroundColorInterpolation = shifting ? indexAnim.interpolate({
    inputRange: routes.map(function (_, i) {
      return i;
    }),
    outputRange: routes.map(function (route) {
      return getColor({
        route: route
      }) || approxBackgroundColor;
    })
  }) : approxBackgroundColor;
  var backgroundColor = isV3 ? customBackground || theme.colors.elevation.level2 : shifting ? v2BackgroundColorInterpolation : approxBackgroundColor;
  var isDark = typeof approxBackgroundColor === 'string' ? !(0, _color.default)(approxBackgroundColor).isLight() : true;
  var textColor = isDark ? _colors.white : _colors.black;
  var activeTintColor = (0, _utils.getActiveTintColor)({
    activeColor: activeColor,
    defaultColor: textColor,
    theme: theme
  });
  var inactiveTintColor = (0, _utils.getInactiveTintColor)({
    inactiveColor: inactiveColor,
    defaultColor: textColor,
    theme: theme
  });
  var touchColor = (0, _color.default)(activeTintColor).alpha(0.12).rgb().string();
  var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
  var maxTabBarWidth = maxTabWidth * routes.length;
  var rippleSize = layout.width / 4;
  var insets = {
    left: (_ref11 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) != null ? _ref11 : left,
    right: (_ref12 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) != null ? _ref12 : right,
    bottom: (_ref13 = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) != null ? _ref13 : bottom
  };
  return React.createElement(_Surface.default, _extends({}, theme.isV3 && {
    elevation: 0
  }, {
    testID: testID,
    style: [!theme.isV3 && styles.elevation, styles.bar, keyboardHidesNavigationBar ? {
      transform: [{
        translateY: visibleAnim.interpolate({
          inputRange: [0, 1],
          outputRange: [layout.height, 0]
        })
      }],
      position: keyboardVisible ? 'absolute' : undefined
    } : null, style],
    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',
    onLayout: onLayout,
    container: true
  }), React.createElement(_reactNative.Animated.View, {
    style: [styles.barContent, {
      backgroundColor: backgroundColor
    }],
    testID: `${testID}-content`
  }, React.createElement(_reactNative.View, {
    style: [styles.items, {
      marginBottom: insets.bottom,
      marginHorizontal: Math.max(insets.left, insets.right)
    }, compact && {
      maxWidth: maxTabBarWidth
    }],
    accessibilityRole: 'tablist',
    testID: `${testID}-content-wrapper`
  }, shifting && !isV3 ? React.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [styles.ripple, {
      top: (BAR_HEIGHT - rippleSize) / 2,
      left: Math.min(layout.width, maxTabBarWidth) / routes.length * (navigationState.index + 0.5) - rippleSize / 2,
      height: rippleSize,
      width: rippleSize,
      borderRadius: rippleSize / 2,
      backgroundColor: getColor({
        route: routes[navigationState.index]
      }),
      transform: [{
        scale: rippleAnim.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 8]
        })
      }],
      opacity: rippleAnim.interpolate({
        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],
        outputRange: [0, 0, 1, 1]
      })
    }],
    testID: `${testID}-content-ripple`
  }) : null, routes.map(function (route, index) {
    var focused = navigationState.index === index;
    var active = tabsAnims[index];
    var scale = labeled && shifting ? active.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 1;
    var translateY = labeled ? shifting ? active.interpolate({
      inputRange: [0, 1],
      outputRange: [7, 0]
    }) : 0 : 7;
    var activeOpacity = active;
    var inactiveOpacity = active.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 0]
    });
    var v3ActiveOpacity = focused ? 1 : 0;
    var v3InactiveOpacity = shifting ? inactiveOpacity : focused ? 0 : 1;
    var outlineScale = focused ? active.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 0;
    var badge = getBadge({
      route: route
    });
    var activeLabelColor = (0, _utils.getLabelColor)({
      tintColor: activeTintColor,
      hasColor: Boolean(activeColor),
      focused: focused,
      defaultColor: textColor,
      theme: theme
    });
    var inactiveLabelColor = (0, _utils.getLabelColor)({
      tintColor: inactiveTintColor,
      hasColor: Boolean(inactiveColor),
      focused: focused,
      defaultColor: textColor,
      theme: theme
    });
    var badgeStyle = {
      top: !isV3 ? -2 : typeof badge === 'boolean' ? 4 : 2,
      right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - (!isV3 ? 2 : 0)
    };
    var isLegacyOrV3Shifting = !isV3 || isV3 && shifting && labeled;
    var font = isV3 ? theme.fonts.labelMedium : {};
    return renderTouchable({
      key: route.key,
      route: route,
      borderless: true,
      centered: true,
      rippleColor: isV3 ? 'transparent' : touchColor,
      onPress: function onPress() {
        return onTabPress(eventForIndex(index));
      },
      onLongPress: function onLongPress() {
        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress(eventForIndex(index));
      },
      testID: getTestID({
        route: route
      }),
      accessibilityLabel: getAccessibilityLabel({
        route: route
      }),
      accessibilityRole: _reactNative.Platform.OS === 'ios' ? 'button' : 'tab',
      accessibilityState: {
        selected: focused
      },
      style: [styles.item, isV3 && styles.v3Item],
      children: React.createElement(_reactNative.View, {
        pointerEvents: "none",
        style: isV3 && (labeled ? styles.v3TouchableContainer : styles.v3NoLabelContainer)
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.iconContainer, isV3 && styles.v3IconContainer, isLegacyOrV3Shifting && {
          transform: [{
            translateY: translateY
          }]
        }]
      }, isV3 && focused && React.createElement(_reactNative.Animated.View, {
        style: [styles.outline, {
          transform: [{
            scaleX: outlineScale
          }],
          backgroundColor: theme.colors.secondaryContainer
        }, activeIndicatorStyle]
      }), React.createElement(_reactNative.Animated.View, {
        style: [styles.iconWrapper, isV3 && styles.v3IconWrapper, {
          opacity: isLegacyOrV3Shifting ? activeOpacity : v3ActiveOpacity
        }]
      }, renderIcon ? renderIcon({
        route: route,
        focused: true,
        color: activeTintColor
      }) : React.createElement(_Icon.default, {
        source: route.focusedIcon,
        color: activeTintColor,
        size: 24
      })), React.createElement(_reactNative.Animated.View, {
        style: [styles.iconWrapper, isV3 && styles.v3IconWrapper, {
          opacity: isLegacyOrV3Shifting ? inactiveOpacity : v3InactiveOpacity
        }]
      }, renderIcon ? renderIcon({
        route: route,
        focused: false,
        color: inactiveTintColor
      }) : React.createElement(_Icon.default, {
        source: theme.isV3 && route.unfocusedIcon !== undefined ? route.unfocusedIcon : route.focusedIcon,
        color: inactiveTintColor,
        size: 24
      })), React.createElement(_reactNative.View, {
        style: [styles.badgeContainer, badgeStyle]
      }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {
        visible: badge,
        size: isV3 ? 6 : 8
      }) : React.createElement(_Badge.default, {
        visible: badge != null,
        size: 16
      }, badge))), labeled ? React.createElement(_reactNative.Animated.View, {
        style: [styles.labelContainer, !isV3 && {
          transform: [{
            scale: scale
          }]
        }]
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.labelWrapper, {
          opacity: isLegacyOrV3Shifting ? activeOpacity : v3ActiveOpacity
        }]
      }, renderLabel ? renderLabel({
        route: route,
        focused: true,
        color: activeLabelColor
      }) : React.createElement(_Text.default, {
        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
        variant: "labelMedium",
        style: [styles.label, Object.assign({
          color: activeLabelColor
        }, font)]
      }, getLabelText({
        route: route
      }))), shifting ? null : React.createElement(_reactNative.Animated.View, {
        style: [styles.labelWrapper, {
          opacity: isLegacyOrV3Shifting ? inactiveOpacity : v3InactiveOpacity
        }]
      }, renderLabel ? renderLabel({
        route: route,
        focused: false,
        color: inactiveLabelColor
      }) : React.createElement(_Text.default, {
        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
        variant: "labelMedium",
        selectable: false,
        style: [styles.label, Object.assign({
          color: inactiveLabelColor
        }, font)]
      }, getLabelText({
        route: route
      })))) : !isV3 && React.createElement(_reactNative.View, {
        style: styles.labelContainer
      }))
    });
  }))));
};
BottomNavigationBar.displayName = 'BottomNavigation.Bar';
var _default = exports.default = BottomNavigationBar;
var styles = _reactNative.StyleSheet.create({
  bar: {
    left: 0,
    right: 0,
    bottom: 0
  },
  barContent: {
    alignItems: 'center',
    overflow: 'hidden'
  },
  items: Object.assign({
    flexDirection: 'row'
  }, _reactNative.Platform.OS === 'web' ? {
    width: '100%'
  } : null),
  item: {
    flex: 1,
    paddingVertical: 6
  },
  v3Item: {
    paddingVertical: 0
  },
  ripple: {
    position: 'absolute'
  },
  iconContainer: {
    height: 24,
    width: 24,
    marginTop: 2,
    marginHorizontal: 12,
    alignSelf: 'center'
  },
  v3IconContainer: {
    height: 32,
    width: 32,
    marginBottom: 4,
    marginTop: 0,
    justifyContent: 'center'
  },
  iconWrapper: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {
    alignItems: 'center'
  }),
  v3IconWrapper: {
    top: 4
  },
  labelContainer: {
    height: 16,
    paddingBottom: 2
  },
  labelWrapper: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject),
  label: Object.assign({
    fontSize: 12,
    height: BAR_HEIGHT,
    textAlign: 'center',
    backgroundColor: 'transparent'
  }, _reactNative.Platform.OS === 'web' ? {
    whiteSpace: 'nowrap',
    alignSelf: 'center'
  } : null),
  badgeContainer: {
    position: 'absolute',
    left: 0
  },
  v3TouchableContainer: {
    paddingTop: 12,
    paddingBottom: 16
  },
  v3NoLabelContainer: {
    height: 80,
    justifyContent: 'center',
    alignItems: 'center'
  },
  outline: {
    width: OUTLINE_WIDTH,
    height: OUTLINE_WIDTH / 2,
    borderRadius: OUTLINE_WIDTH / 4,
    alignSelf: 'center'
  },
  elevation: {
    elevation: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,