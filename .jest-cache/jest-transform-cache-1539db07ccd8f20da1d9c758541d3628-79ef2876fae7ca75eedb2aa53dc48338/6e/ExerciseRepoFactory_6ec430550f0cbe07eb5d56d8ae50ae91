a9969fb445cf5ca00d28d64bb265e241
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExerciseRepoFactory = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _FirebaseExerciseRepo = require("./FirebaseExerciseRepo");
var _SupabaseExerciseRepo = require("./SupabaseExerciseRepo");
var ExerciseRepoFactory = exports.ExerciseRepoFactory = function () {
  function ExerciseRepoFactory() {
    (0, _classCallCheck2.default)(this, ExerciseRepoFactory);
  }
  return (0, _createClass2.default)(ExerciseRepoFactory, null, [{
    key: "getInstance",
    value: function getInstance() {
      var useSupabase = this.shouldUseSupabase();
      if (useSupabase) {
        var _this$supabaseInstanc;
        (_this$supabaseInstanc = this.supabaseInstance) != null ? _this$supabaseInstanc : this.supabaseInstance = _SupabaseExerciseRepo.SupabaseExerciseRepo.getInstance();
        return this.supabaseInstance;
      } else {
        var _this$firebaseInstanc;
        (_this$firebaseInstanc = this.firebaseInstance) != null ? _this$firebaseInstanc : this.firebaseInstance = _FirebaseExerciseRepo.FirebaseExerciseRepo.getInstance();
        return this.firebaseInstance;
      }
    }
  }, {
    key: "shouldUseSupabase",
    value: function shouldUseSupabase() {
      var useSupabaseProcess = process.env.USE_SUPABASE_DATA;
      var useSupabaseEnv;
      try {
        var _Constants$expoConfig;
        var _require = require('expo-constants'),
          Constants = _require.default;
        useSupabaseEnv = (_Constants$expoConfig = Constants.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig.useSupabaseData;
      } catch (_unused) {
        useSupabaseEnv = undefined;
      }
      var useSupabase = useSupabaseProcess != null ? useSupabaseProcess : useSupabaseEnv;
      if (typeof useSupabase === 'string') {
        return useSupabase.toLowerCase() === 'true';
      }
      return Boolean(useSupabase);
    }
  }, {
    key: "getCurrentDataSource",
    value: function getCurrentDataSource() {
      return this.shouldUseSupabase() ? 'supabase' : 'firebase';
    }
  }, {
    key: "resetInstances",
    value: function resetInstances() {
      this.firebaseInstance = null;
      this.supabaseInstance = null;
    }
  }]);
}();
ExerciseRepoFactory.firebaseInstance = null;
ExerciseRepoFactory.supabaseInstance = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRmlyZWJhc2VFeGVyY2lzZVJlcG8iLCJyZXF1aXJlIiwiX1N1cGFiYXNlRXhlcmNpc2VSZXBvIiwiRXhlcmNpc2VSZXBvRmFjdG9yeSIsImV4cG9ydHMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImdldEluc3RhbmNlIiwidXNlU3VwYWJhc2UiLCJzaG91bGRVc2VTdXBhYmFzZSIsIl90aGlzJHN1cGFiYXNlSW5zdGFuYyIsInN1cGFiYXNlSW5zdGFuY2UiLCJTdXBhYmFzZUV4ZXJjaXNlUmVwbyIsIl90aGlzJGZpcmViYXNlSW5zdGFuYyIsImZpcmViYXNlSW5zdGFuY2UiLCJGaXJlYmFzZUV4ZXJjaXNlUmVwbyIsInVzZVN1cGFiYXNlUHJvY2VzcyIsInByb2Nlc3MiLCJlbnYiLCJVU0VfU1VQQUJBU0VfREFUQSIsInVzZVN1cGFiYXNlRW52IiwiX0NvbnN0YW50cyRleHBvQ29uZmlnIiwiX3JlcXVpcmUiLCJDb25zdGFudHMiLCJleHBvQ29uZmlnIiwiZXh0cmEiLCJ1c2VTdXBhYmFzZURhdGEiLCJfdW51c2VkIiwidW5kZWZpbmVkIiwidG9Mb3dlckNhc2UiLCJCb29sZWFuIiwiZ2V0Q3VycmVudERhdGFTb3VyY2UiLCJyZXNldEluc3RhbmNlcyJdLCJzb3VyY2VzIjpbIkV4ZXJjaXNlUmVwb0ZhY3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUV4ZXJjaXNlUmVwbyB9IGZyb20gXCIuL0lFeGVyY2lzZVJlcG9cIjtcbmltcG9ydCB7IEZpcmViYXNlRXhlcmNpc2VSZXBvIH0gZnJvbSBcIi4vRmlyZWJhc2VFeGVyY2lzZVJlcG9cIjtcbmltcG9ydCB7IFN1cGFiYXNlRXhlcmNpc2VSZXBvIH0gZnJvbSBcIi4vU3VwYWJhc2VFeGVyY2lzZVJlcG9cIjtcblxuLyoqXG4gKiBGYWN0b3J5IGNsYXNzIGZvciBjcmVhdGluZyBhcHByb3ByaWF0ZSBFeGVyY2lzZSBSZXBvc2l0b3J5IGluc3RhbmNlc1xuICogQmFzZWQgb24gdGhlIFVTRV9TVVBBQkFTRV9EQVRBIGVudmlyb25tZW50IHZhcmlhYmxlXG4gKi9cbmV4cG9ydCBjbGFzcyBFeGVyY2lzZVJlcG9GYWN0b3J5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgZmlyZWJhc2VJbnN0YW5jZTogRmlyZWJhc2VFeGVyY2lzZVJlcG8gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBzdGF0aWMgc3VwYWJhc2VJbnN0YW5jZTogU3VwYWJhc2VFeGVyY2lzZVJlcG8gfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgRXhlcmNpc2VSZXBvIGltcGxlbWVudGF0aW9uXG4gICAqIGJhc2VkIG9uIHRoZSBVU0VfU1VQQUJBU0VfREFUQSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgKi9cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IElFeGVyY2lzZVJlcG8ge1xuICAgIGNvbnN0IHVzZVN1cGFiYXNlID0gdGhpcy5zaG91bGRVc2VTdXBhYmFzZSgpO1xuICAgIFxuICAgIGlmICh1c2VTdXBhYmFzZSkge1xuICAgICAgdGhpcy5zdXBhYmFzZUluc3RhbmNlID8/PSBTdXBhYmFzZUV4ZXJjaXNlUmVwby5nZXRJbnN0YW5jZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuc3VwYWJhc2VJbnN0YW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maXJlYmFzZUluc3RhbmNlID8/PSBGaXJlYmFzZUV4ZXJjaXNlUmVwby5nZXRJbnN0YW5jZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmlyZWJhc2VJbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHVzZSBTdXBhYmFzZSBiYXNlZCBvbiBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgc2hvdWxkVXNlU3VwYWJhc2UoKTogYm9vbGVhbiB7XG4gICAgLy8gQ2hlY2sgcHJvY2Vzcy5lbnYgZmlyc3QgKHByZWZlcnJlZCBmb3Igd2ViIGJ1aWxkcyBhbmQgdGVzdGluZylcbiAgICBjb25zdCB1c2VTdXBhYmFzZVByb2Nlc3MgPSBwcm9jZXNzLmVudi5VU0VfU1VQQUJBU0VfREFUQTtcbiAgICBcbiAgICAvLyBGYWxsIGJhY2sgdG8gZXhwby1jb25zdGFudHMgaWYgcHJvY2Vzcy5lbnYgbm90IHNldFxuICAgIGxldCB1c2VTdXBhYmFzZUVudjtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIHJlcXVpcmUgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBKZXN0IG1vY2tpbmdcbiAgICAgIGNvbnN0IHsgZGVmYXVsdDogQ29uc3RhbnRzIH0gPSByZXF1aXJlKCdleHBvLWNvbnN0YW50cycpO1xuICAgICAgdXNlU3VwYWJhc2VFbnYgPSBDb25zdGFudHMuZXhwb0NvbmZpZz8uZXh0cmE/LnVzZVN1cGFiYXNlRGF0YTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHVzZVN1cGFiYXNlRW52ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBcbiAgICAvLyBQcmVmZXIgcHJvY2Vzcy5lbnYsIGZhbGwgYmFjayB0byBleHBvIGNvbmZpZ1xuICAgIGNvbnN0IHVzZVN1cGFiYXNlID0gdXNlU3VwYWJhc2VQcm9jZXNzID8/IHVzZVN1cGFiYXNlRW52O1xuICAgIFxuICAgIC8vIENvbnZlcnQgc3RyaW5nIHZhbHVlcyB0byBib29sZWFuXG4gICAgaWYgKHR5cGVvZiB1c2VTdXBhYmFzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB1c2VTdXBhYmFzZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBCb29sZWFuKHVzZVN1cGFiYXNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgZGF0YSBzb3VyY2UgYmVpbmcgdXNlZFxuICAgKi9cbiAgc3RhdGljIGdldEN1cnJlbnREYXRhU291cmNlKCk6ICdmaXJlYmFzZScgfCAnc3VwYWJhc2UnIHtcbiAgICByZXR1cm4gdGhpcy5zaG91bGRVc2VTdXBhYmFzZSgpID8gJ3N1cGFiYXNlJyA6ICdmaXJlYmFzZSc7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgcmVzZXQgb2YgaW5zdGFuY2VzICh1c2VmdWwgZm9yIHRlc3RpbmcpXG4gICAqL1xuICBzdGF0aWMgcmVzZXRJbnN0YW5jZXMoKTogdm9pZCB7XG4gICAgdGhpcy5maXJlYmFzZUluc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLnN1cGFiYXNlSW5zdGFuY2UgPSBudWxsO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEscUJBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLHFCQUFBLEdBQUFELE9BQUE7QUFBOEQsSUFNakRFLG1CQUFtQixHQUFBQyxPQUFBLENBQUFELG1CQUFBO0VBQUEsU0FBQUEsb0JBQUE7SUFBQSxJQUFBRSxnQkFBQSxDQUFBQyxPQUFBLFFBQUFILG1CQUFBO0VBQUE7RUFBQSxXQUFBSSxhQUFBLENBQUFELE9BQUEsRUFBQUgsbUJBQUE7SUFBQUssR0FBQTtJQUFBQyxLQUFBLEVBUTlCLFNBQU9DLFdBQVdBLENBQUEsRUFBa0I7TUFDbEMsSUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztNQUU1QyxJQUFJRCxXQUFXLEVBQUU7UUFBQSxJQUFBRSxxQkFBQTtRQUNmLENBQUFBLHFCQUFBLE9BQUksQ0FBQ0MsZ0JBQWdCLFlBQUFELHFCQUFBLEdBQXJCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUtDLDBDQUFvQixDQUFDTCxXQUFXLENBQUMsQ0FBQztRQUM1RCxPQUFPLElBQUksQ0FBQ0ksZ0JBQWdCO01BQzlCLENBQUMsTUFBTTtRQUFBLElBQUFFLHFCQUFBO1FBQ0wsQ0FBQUEscUJBQUEsT0FBSSxDQUFDQyxnQkFBZ0IsWUFBQUQscUJBQUEsR0FBckIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBS0MsMENBQW9CLENBQUNSLFdBQVcsQ0FBQyxDQUFDO1FBQzVELE9BQU8sSUFBSSxDQUFDTyxnQkFBZ0I7TUFDOUI7SUFDRjtFQUFDO0lBQUFULEdBQUE7SUFBQUMsS0FBQSxFQUtELFNBQWVHLGlCQUFpQkEsQ0FBQSxFQUFZO01BRTFDLElBQU1PLGtCQUFrQixHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsaUJBQWlCO01BR3hELElBQUlDLGNBQWM7TUFDbEIsSUFBSTtRQUFBLElBQUFDLHFCQUFBO1FBRUYsSUFBQUMsUUFBQSxHQUErQnhCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztVQUF2Q3lCLFNBQVMsR0FBQUQsUUFBQSxDQUFsQm5CLE9BQU87UUFDZmlCLGNBQWMsSUFBQUMscUJBQUEsR0FBR0UsU0FBUyxDQUFDQyxVQUFVLGNBQUFILHFCQUFBLEdBQXBCQSxxQkFBQSxDQUFzQkksS0FBSyxxQkFBM0JKLHFCQUFBLENBQTZCSyxlQUFlO01BQy9ELENBQUMsQ0FBQyxPQUFBQyxPQUFBLEVBQU07UUFDTlAsY0FBYyxHQUFHUSxTQUFTO01BQzVCO01BR0EsSUFBTXBCLFdBQVcsR0FBR1Esa0JBQWtCLFdBQWxCQSxrQkFBa0IsR0FBSUksY0FBYztNQUd4RCxJQUFJLE9BQU9aLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsT0FBT0EsV0FBVyxDQUFDcUIsV0FBVyxDQUFDLENBQUMsS0FBSyxNQUFNO01BQzdDO01BRUEsT0FBT0MsT0FBTyxDQUFDdEIsV0FBVyxDQUFDO0lBQzdCO0VBQUM7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBS0QsU0FBT3lCLG9CQUFvQkEsQ0FBQSxFQUE0QjtNQUNyRCxPQUFPLElBQUksQ0FBQ3RCLGlCQUFpQixDQUFDLENBQUMsR0FBRyxVQUFVLEdBQUcsVUFBVTtJQUMzRDtFQUFDO0lBQUFKLEdBQUE7SUFBQUMsS0FBQSxFQUtELFNBQU8wQixjQUFjQSxDQUFBLEVBQVM7TUFDNUIsSUFBSSxDQUFDbEIsZ0JBQWdCLEdBQUcsSUFBSTtNQUM1QixJQUFJLENBQUNILGdCQUFnQixHQUFHLElBQUk7SUFDOUI7RUFBQztBQUFBO0FBN0RVWCxtQkFBbUIsQ0FDZmMsZ0JBQWdCLEdBQWdDLElBQUk7QUFEeERkLG1CQUFtQixDQUVmVyxnQkFBZ0IsR0FBZ0MsSUFBSSIsImlnbm9yZUxpc3QiOltdfQ==