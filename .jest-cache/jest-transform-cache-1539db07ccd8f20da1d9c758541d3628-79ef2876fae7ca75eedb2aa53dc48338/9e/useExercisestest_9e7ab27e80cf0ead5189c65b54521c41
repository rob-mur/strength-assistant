68cdee3aa29fac1e6f4c68a83897853f
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase/initializer', function () {
  return {
    initializeFirebaseServices: jest.fn(),
    getDb: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/supabase/SupabaseClient', function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig', function () {
  return {
    syncExerciseToSupabase: jest.fn(),
    deleteExerciseFromSupabase: jest.fn(),
    syncHelpers: {
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/models/Exercise', function () {
  return {
    ExerciseValidator: {
      validateExerciseInput: jest.fn(),
      sanitizeExerciseName: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    addDoc: jest.fn(),
    deleteDoc: jest.fn(),
    doc: jest.fn(),
    onSnapshot: jest.fn(),
    query: jest.fn(),
    orderBy: jest.fn()
  };
});
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid';
    })
  };
});
_getJestObj().mock("@/lib/data/firebase");
_getJestObj().mock("@/lib/repo/ExerciseRepo");
_getJestObj().mock("@/lib/data/firebase/logger", function () {
  return {
    logger: {
      warn: jest.fn(),
      debug: jest.fn(),
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _useAddExercise = require("@/lib/hooks/useAddExercise");
var _useExercises = require("@/lib/hooks/useExercises");
var _ExerciseRepo = require("@/lib/repo/ExerciseRepo");
var _reactNative = require("@testing-library/react-native");
var _jestMockExtended = require("jest-mock-extended");
var _logger = require("@/lib/data/firebase/logger");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRepo = (0, _jestMockExtended.mock)();
describe("useExercises", function () {
  beforeEach(function () {
    (0, _jestMockExtended.mockReset)(mockRepo);
    jest.mocked(_ExerciseRepo.ExerciseRepo.getInstance).mockReturnValue(mockRepo);
  });
  test("adding an exercise refreshes the exercise list", (0, _asyncToGenerator2.default)(function* () {
    var testUid = "test-user-uid";
    mockRepo.subscribeToExercises.mockReturnValue(jest.fn());
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return {
          exercises: (0, _useExercises.useExercises)(testUid),
          addExercise: (0, _useAddExercise.useAddExercise)(testUid)
        };
      }),
      result = _renderHook.result;
    yield result.current.addExercise("Push-ups");
    var subscriptionCallback = mockRepo.subscribeToExercises.mock.calls[0][1];
    expect(mockRepo.subscribeToExercises.mock.calls[0][0]).toBe(testUid);
    (0, _reactNative.act)(function () {
      subscriptionCallback([{
        id: "1",
        name: "Squats",
        user_id: testUid,
        created_at: "2023-01-01T00:00:00Z"
      }, {
        id: "2",
        name: "Push-ups",
        user_id: testUid,
        created_at: "2023-01-01T00:00:00Z"
      }]);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.exercises.exercises).toEqual([{
        id: "1",
        name: "Squats",
        user_id: testUid,
        created_at: "2023-01-01T00:00:00Z"
      }, {
        id: "2",
        name: "Push-ups",
        user_id: testUid,
        created_at: "2023-01-01T00:00:00Z"
      }]);
    });
  }));
  test("handles unauthenticated user with warning", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useExercises.useExercises)("");
      }),
      result = _renderHook2.result;
    expect(result.current.exercises).toEqual([]);
    expect(mockRepo.subscribeToExercises).not.toHaveBeenCalled();
    expect(_logger.logger.warn).toHaveBeenCalledWith("useExercises: User not authenticated, exercises will be empty", expect.objectContaining({
      service: "useExercises",
      platform: "React Native",
      operation: "fetch_exercises"
    }));
  });
  test("cleans up subscription on unmount", function () {
    var testUid = "test-user-uid";
    var mockUnsubscribe = jest.fn();
    mockRepo.subscribeToExercises.mockReturnValue(mockUnsubscribe);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useExercises.useExercises)(testUid);
      }),
      unmount = _renderHook3.unmount;
    expect(mockRepo.subscribeToExercises).toHaveBeenCalledWith(testUid, expect.any(Function));
    unmount();
    expect(mockUnsubscribe).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,