8b331082d73e83406e837fcd4a338ca2
_getJestObj().mock("@/lib/data/store", function () {
  return {
    exercises$: {
      get: jest.fn().mockReturnValue([]),
      set: jest.fn(),
      push: jest.fn(),
      splice: jest.fn()
    },
    user$: {
      get: jest.fn().mockReturnValue(null),
      set: jest.fn()
    }
  };
});
_getJestObj().mock("@/lib/data/supabase/SupabaseClient", function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn().mockResolvedValue(mockSupabaseUser),
      getSupabaseClient: jest.fn().mockReturnValue(mockSupabaseClient),
      onAuthStateChange: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _syncConfig = require("@/lib/data/sync/syncConfig");
var _SupabaseClient = require("@/lib/data/supabase/SupabaseClient");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSupabaseUser = {
  id: "supabase-user-123",
  email: "test@example.com"
};
var mockChannel = {
  on: jest.fn(),
  subscribe: jest.fn(),
  unsubscribe: jest.fn()
};
var mockSupabaseClient = {
  from: jest.fn(),
  auth: {
    onAuthStateChange: jest.fn()
  },
  channel: jest.fn().mockReturnValue(mockChannel)
};
var mockTableReference = {
  select: jest.fn(),
  upsert: jest.fn(),
  delete: jest.fn(),
  eq: jest.fn()
};
describe("syncConfig functions", function () {
  var mockExercises$;
  var mockUser$;
  var consoleSpy;
  var consoleErrorSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require("@/lib/data/store"),
      exercises = _require.exercises$,
      user = _require.user$;
    mockExercises$ = exercises;
    mockUser$ = user;
    mockExercises$.get.mockReturnValue([]);
    mockUser$.get.mockReturnValue(null);
    mockSupabaseClient.from.mockReturnValue(mockTableReference);
    mockTableReference.select.mockReturnValue(mockTableReference);
    mockTableReference.upsert.mockResolvedValue({
      error: null
    });
    mockTableReference.eq.mockResolvedValue({
      data: [],
      error: null
    });
    var deleteChain = {
      eq: jest.fn().mockReturnValue({
        eq: jest.fn().mockResolvedValue({
          error: null
        })
      })
    };
    mockTableReference.delete.mockReturnValue(deleteChain);
    mockChannel.on.mockReturnValue(mockChannel);
    mockChannel.subscribe.mockReturnValue(mockChannel);
    _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(mockSupabaseUser);
    _SupabaseClient.supabaseClient.getSupabaseClient.mockReturnValue(mockSupabaseClient);
    _SupabaseClient.supabaseClient.onAuthStateChange.mockImplementation(function (callback) {
      setTimeout(function () {
        return callback('SIGNED_IN', {
          user: mockSupabaseUser
        });
      }, 0);
      return jest.fn();
    });
    consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
  });
  afterEach(function () {
    consoleSpy.mockRestore();
    consoleErrorSpy.mockRestore();
  });
  describe("configureSyncEngine", function () {
    test("sets up auth state change listener and initializes subscription", function () {
      (0, _syncConfig.configureSyncEngine)();
      expect(_SupabaseClient.supabaseClient.onAuthStateChange).toHaveBeenCalled();
      expect(function () {
        return (0, _syncConfig.configureSyncEngine)();
      }).not.toThrow();
    });
    test("handles initial data loading", (0, _asyncToGenerator2.default)(function* () {
      var testExercises = [{
        id: "1",
        name: "Push-ups",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }];
      mockTableReference.eq.mockResolvedValue({
        data: testExercises,
        error: null
      });
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(_SupabaseClient.supabaseClient.getCurrentUser).toHaveBeenCalled();
    }));
    test("handles auth state changes correctly", (0, _asyncToGenerator2.default)(function* () {
      var authCallback;
      _SupabaseClient.supabaseClient.onAuthStateChange.mockImplementation(function (callback) {
        authCallback = callback;
        return jest.fn();
      });
      (0, _syncConfig.configureSyncEngine)();
      var mockSession = {
        user: mockSupabaseUser
      };
      authCallback('SIGNED_IN', mockSession);
      expect(mockUser$.set).toHaveBeenCalledWith(mockSupabaseUser);
    }));
    test("clears exercises when user signs out", (0, _asyncToGenerator2.default)(function* () {
      var authCallback;
      _SupabaseClient.supabaseClient.onAuthStateChange.mockImplementation(function (callback) {
        authCallback = callback;
        return jest.fn();
      });
      (0, _syncConfig.configureSyncEngine)();
      authCallback('SIGNED_OUT', null);
      expect(mockUser$.set).toHaveBeenCalledWith(null);
      expect(mockExercises$.set).toHaveBeenCalledWith([]);
    }));
    test("handles errors during initial data loading", (0, _asyncToGenerator2.default)(function* () {
      var loadError = new Error("Failed to load data");
      _SupabaseClient.supabaseClient.getCurrentUser.mockRejectedValue(loadError);
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to load initial exercises:', loadError);
    }));
    test("handles errors during subscription setup", (0, _asyncToGenerator2.default)(function* () {
      var subscriptionError = new Error("Failed to setup subscription");
      _SupabaseClient.supabaseClient.getCurrentUser.mockRejectedValue(subscriptionError);
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to set up real-time subscription:', subscriptionError);
    }));
  });
  describe("syncExerciseToSupabase", function () {
    var testExercise = {
      id: "test-exercise-123",
      name: "Push-ups",
      user_id: mockSupabaseUser.id,
      created_at: "2023-01-01T00:00:00Z"
    };
    test("successfully syncs exercise to Supabase", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _syncConfig.syncExerciseToSupabase)(testExercise);
      expect(_SupabaseClient.supabaseClient.getCurrentUser).toHaveBeenCalled();
      expect(_SupabaseClient.supabaseClient.getSupabaseClient).toHaveBeenCalled();
      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');
      expect(mockTableReference.upsert).toHaveBeenCalledWith({
        id: testExercise.id,
        name: testExercise.name,
        user_id: testExercise.user_id,
        created_at: testExercise.created_at
      });
    }));
    test("throws error when user not authenticated", (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(null);
      yield expect((0, _syncConfig.syncExerciseToSupabase)(testExercise)).rejects.toThrow("User not authenticated");
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to sync exercise to Supabase:', expect.any(Error));
    }));
    test("throws error when Supabase upsert fails", (0, _asyncToGenerator2.default)(function* () {
      var supabaseError = new Error("Database error");
      mockTableReference.upsert.mockResolvedValue({
        error: supabaseError
      });
      yield expect((0, _syncConfig.syncExerciseToSupabase)(testExercise)).rejects.toThrow("Database error");
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to sync exercise to Supabase:', supabaseError);
    }));
  });
  describe("deleteExerciseFromSupabase", function () {
    var exerciseId = "test-exercise-123";
    var userId = mockSupabaseUser.id;
    test("successfully deletes exercise from Supabase", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _syncConfig.deleteExerciseFromSupabase)(exerciseId, userId);
      expect(_SupabaseClient.supabaseClient.getSupabaseClient).toHaveBeenCalled();
      expect(mockSupabaseClient.from).toHaveBeenCalledWith('exercises');
      expect(mockTableReference.delete).toHaveBeenCalled();
    }));
    test("throws error when Supabase delete fails", (0, _asyncToGenerator2.default)(function* () {
      var supabaseError = new Error("Delete failed");
      var deleteChain = {
        eq: jest.fn().mockReturnValue({
          eq: jest.fn().mockResolvedValue({
            error: supabaseError
          })
        })
      };
      mockTableReference.delete.mockReturnValue(deleteChain);
      yield expect((0, _syncConfig.deleteExerciseFromSupabase)(exerciseId, userId)).rejects.toThrow("Delete failed");
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to delete exercise from Supabase:', supabaseError);
    }));
  });
  describe("realtime subscription event handling", function () {
    test("handles INSERT events for current user", (0, _asyncToGenerator2.default)(function* () {
      var onChangeCallback;
      mockChannel.on.mockImplementation(function (event, config, callback) {
        if (event === 'postgres_changes') {
          onChangeCallback = callback;
        }
        return mockChannel;
      });
      var existingExercises = [{
        id: "existing-1",
        name: "Squats",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }];
      mockExercises$.get.mockReturnValue(existingExercises);
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(onChangeCallback).toBeDefined();
      var newExercise = {
        id: "new-1",
        name: "Push-ups",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T01:00:00Z"
      };
      if (onChangeCallback) {
        onChangeCallback({
          eventType: 'INSERT',
          new: newExercise,
          old: null
        });
        expect(mockExercises$.push).toHaveBeenCalledWith(newExercise);
      }
    }));
    test("handles DELETE events", (0, _asyncToGenerator2.default)(function* () {
      var onChangeCallback;
      mockChannel.on.mockImplementation(function (event, config, callback) {
        if (event === 'postgres_changes') {
          onChangeCallback = callback;
        }
        return mockChannel;
      });
      var existingExercises = [{
        id: "existing-1",
        name: "Squats",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }, {
        id: "existing-2",
        name: "Push-ups",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T01:00:00Z"
      }];
      mockExercises$.get.mockReturnValue(existingExercises);
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var deletedExercise = {
        id: "existing-1",
        name: "Squats",
        user_id: mockSupabaseUser.id
      };
      if (onChangeCallback) {
        onChangeCallback({
          eventType: 'DELETE',
          new: null,
          old: deletedExercise
        });
        expect(mockExercises$.splice).toHaveBeenCalledWith(0, 1);
      }
    }));
    test("handles UPDATE events for current user", (0, _asyncToGenerator2.default)(function* () {
      var onChangeCallback;
      mockChannel.on.mockImplementation(function (event, config, callback) {
        if (event === 'postgres_changes') {
          onChangeCallback = callback;
        }
        return mockChannel;
      });
      var existingExercises = [{
        id: "existing-1",
        name: "Squats",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }];
      mockExercises$.get.mockReturnValue(existingExercises);
      var mockExerciseAtIndex = {
        set: jest.fn()
      };
      mockExercises$[0] = mockExerciseAtIndex;
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var updatedExercise = {
        id: "existing-1",
        name: "Updated Squats",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      };
      if (onChangeCallback) {
        onChangeCallback({
          eventType: 'UPDATE',
          new: updatedExercise,
          old: {
            id: "existing-1",
            name: "Squats",
            user_id: mockSupabaseUser.id
          }
        });
        expect(mockExerciseAtIndex.set).toHaveBeenCalledWith(updatedExercise);
      }
    }));
    test("ignores INSERT events for different users", (0, _asyncToGenerator2.default)(function* () {
      var onChangeCallback;
      mockChannel.on.mockImplementation(function (event, config, callback) {
        if (event === 'postgres_changes') {
          onChangeCallback = callback;
        }
        return mockChannel;
      });
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var newExercise = {
        id: "new-1",
        name: "Push-ups",
        user_id: "different-user",
        created_at: "2023-01-01T01:00:00Z"
      };
      if (onChangeCallback) {
        onChangeCallback({
          eventType: 'INSERT',
          new: newExercise,
          old: null
        });
      }
      expect(mockExercises$.push).not.toHaveBeenCalled();
    }));
    test("ignores UPDATE events for different users", (0, _asyncToGenerator2.default)(function* () {
      var onChangeCallback;
      mockChannel.on.mockImplementation(function (event, config, callback) {
        if (event === 'postgres_changes') {
          onChangeCallback = callback;
        }
        return mockChannel;
      });
      var existingExercises = [{
        id: "existing-1",
        name: "Squats",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }];
      mockExercises$.get.mockReturnValue(existingExercises);
      var mockExerciseAtIndex = {
        set: jest.fn()
      };
      mockExercises$[0] = mockExerciseAtIndex;
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var updatedExercise = {
        id: "existing-1",
        name: "Updated Squats",
        user_id: "different-user",
        created_at: "2023-01-01T00:00:00Z"
      };
      if (onChangeCallback) {
        onChangeCallback({
          eventType: 'UPDATE',
          new: updatedExercise,
          old: {
            id: "existing-1",
            name: "Squats",
            user_id: "different-user"
          }
        });
      }
      expect(mockExerciseAtIndex.set).not.toHaveBeenCalled();
    }));
    test("unsubscribes and resubscribes when user changes", (0, _asyncToGenerator2.default)(function* () {
      var authStateCallback;
      _SupabaseClient.supabaseClient.onAuthStateChange.mockImplementation(function (callback) {
        authStateCallback = callback;
        return jest.fn();
      });
      (0, _syncConfig.configureSyncEngine)();
      expect(_SupabaseClient.supabaseClient.onAuthStateChange).toHaveBeenCalled();
      var newUser = {
        id: "new-user",
        email: "new@example.com"
      };
      var newSession = {
        user: newUser
      };
      authStateCallback('SIGNED_IN', newSession);
      expect(mockUser$.set).toHaveBeenCalledWith(newUser);
    }));
  });
  describe("loadInitialData", function () {
    test("loads initial data successfully when user authenticated", (0, _asyncToGenerator2.default)(function* () {
      var testExercises = [{
        id: "1",
        name: "Push-ups",
        user_id: mockSupabaseUser.id,
        created_at: "2023-01-01T00:00:00Z"
      }];
      mockTableReference.eq.mockResolvedValue({
        data: testExercises,
        error: null
      });
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(mockExercises$.set).toHaveBeenCalledWith(testExercises);
    }));
    test("handles null data from Supabase", (0, _asyncToGenerator2.default)(function* () {
      mockTableReference.eq.mockResolvedValue({
        data: null,
        error: null
      });
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(mockExercises$.set).toHaveBeenCalledWith([]);
    }));
    test("does not load data when user not authenticated", (0, _asyncToGenerator2.default)(function* () {
      _SupabaseClient.supabaseClient.getCurrentUser.mockResolvedValue(null);
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(mockSupabaseClient.from).not.toHaveBeenCalled();
      expect(mockExercises$.set).not.toHaveBeenCalled();
    }));
    test("handles Supabase query errors", (0, _asyncToGenerator2.default)(function* () {
      var queryError = new Error("Query failed");
      mockTableReference.eq.mockResolvedValue({
        data: null,
        error: queryError
      });
      (0, _syncConfig.configureSyncEngine)();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to load initial exercises:', queryError);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,