1d1b8fac0d4f465b92e36387aff01456
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ListAccordionGroup = require("./ListAccordionGroup");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var ListAccordion = function ListAccordion(_ref) {
  var left = _ref.left,
    right = _ref.right,
    title = _ref.title,
    description = _ref.description,
    children = _ref.children,
    themeOverrides = _ref.theme,
    titleStyle = _ref.titleStyle,
    descriptionStyle = _ref.descriptionStyle,
    _ref$titleNumberOfLin = _ref.titleNumberOfLines,
    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,
    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,
    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,
    customRippleColor = _ref.rippleColor,
    style = _ref.style,
    containerStyle = _ref.containerStyle,
    contentStyle = _ref.contentStyle,
    id = _ref.id,
    testID = _ref.testID,
    background = _ref.background,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    delayLongPress = _ref.delayLongPress,
    expandedProp = _ref.expanded,
    accessibilityLabel = _ref.accessibilityLabel,
    _ref$pointerEvents = _ref.pointerEvents,
    pointerEvents = _ref$pointerEvents === void 0 ? 'none' : _ref$pointerEvents,
    titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
    descriptionMaxFontSizeMultiplier = _ref.descriptionMaxFontSizeMultiplier,
    hitSlop = _ref.hitSlop;
  var _theme$colors, _theme$colors2;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _React$useState = React.useState(expandedProp || false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    expanded = _React$useState2[0],
    setExpanded = _React$useState2[1];
  var _React$useState3 = React.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    alignToTop = _React$useState4[0],
    setAlignToTop = _React$useState4[1];
  var onDescriptionTextLayout = function onDescriptionTextLayout(event) {
    if (!theme.isV3) {
      return;
    }
    var nativeEvent = event.nativeEvent;
    setAlignToTop(nativeEvent.lines.length >= 2);
  };
  var handlePressAction = function handlePressAction(e) {
    onPress === null || onPress === void 0 || onPress(e);
    if (expandedProp === undefined) {
      setExpanded(function (expanded) {
        return !expanded;
      });
    }
  };
  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;
  var groupContext = React.useContext(_ListAccordionGroup.ListAccordionGroupContext);
  if (groupContext !== null && (id === undefined || id === null || id === '')) {
    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');
  }
  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;
  var _ref2 = (0, _utils.getAccordionColors)({
      theme: theme,
      isExpanded: isExpanded,
      customRippleColor: customRippleColor
    }),
    titleColor = _ref2.titleColor,
    descriptionColor = _ref2.descriptionColor,
    titleTextColor = _ref2.titleTextColor,
    rippleColor = _ref2.rippleColor;
  var handlePress = groupContext && id !== undefined ? function () {
    return groupContext.onAccordionPress(id);
  } : handlePressAction;
  return React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {
    style: {
      backgroundColor: theme === null || theme === void 0 || (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.background
    }
  }, React.createElement(_TouchableRipple.default, {
    style: [theme.isV3 ? styles.containerV3 : styles.container, style],
    onPress: handlePress,
    onLongPress: onLongPress,
    delayLongPress: delayLongPress,
    rippleColor: rippleColor,
    accessibilityRole: "button",
    accessibilityState: {
      expanded: isExpanded
    },
    accessibilityLabel: accessibilityLabel,
    testID: testID,
    theme: theme,
    background: background,
    borderless: true,
    hitSlop: hitSlop
  }, React.createElement(_reactNative.View, {
    style: [theme.isV3 ? styles.rowV3 : styles.row, containerStyle],
    pointerEvents: pointerEvents
  }, left ? left({
    color: isExpanded ? (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.primary : descriptionColor,
    style: (0, _utils.getLeftStyles)(alignToTop, description, theme.isV3)
  }) : null, React.createElement(_reactNative.View, {
    style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content, contentStyle]
  }, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: titleNumberOfLines,
    style: [styles.title, {
      color: titleTextColor
    }, titleStyle],
    maxFontSizeMultiplier: titleMaxFontSizeMultiplier
  }, title), description ? React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: descriptionNumberOfLines,
    style: [styles.description, {
      color: descriptionColor
    }, descriptionStyle],
    onTextLayout: onDescriptionTextLayout,
    maxFontSizeMultiplier: descriptionMaxFontSizeMultiplier
  }, description) : null), React.createElement(_reactNative.View, {
    style: [styles.item, description ? styles.multiline : undefined]
  }, right ? right({
    isExpanded: isExpanded
  }) : React.createElement(_MaterialCommunityIcon.default, {
    name: isExpanded ? 'chevron-up' : 'chevron-down',
    color: theme.isV3 ? descriptionColor : titleColor,
    size: 24,
    direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
  }))))), isExpanded ? React.Children.map(children, function (child) {
    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {
      return React.cloneElement(child, {
        style: [theme.isV3 ? styles.childV3 : styles.child, child.props.style],
        theme: theme
      });
    }
    return child;
  }) : null);
};
ListAccordion.displayName = 'List.Accordion';
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8
  },
  containerV3: {
    paddingVertical: 8,
    paddingRight: 24
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  rowV3: {
    flexDirection: 'row',
    marginVertical: 6
  },
  multiline: {
    height: 40,
    alignItems: 'center',
    justifyContent: 'center'
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    marginVertical: 6,
    paddingLeft: 8
  },
  itemV3: {
    paddingLeft: 16
  },
  child: {
    paddingLeft: 64
  },
  childV3: {
    paddingLeft: 40
  },
  content: {
    flex: 1,
    justifyContent: 'center'
  }
});
var _default = exports.default = ListAccordion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,