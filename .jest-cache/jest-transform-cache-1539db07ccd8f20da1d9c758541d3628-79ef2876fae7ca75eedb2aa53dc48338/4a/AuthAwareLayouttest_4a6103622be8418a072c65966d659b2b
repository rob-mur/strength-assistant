0c7e77a390fd6fc964938e72839d9b91
_getJestObj().mock("@/lib/components/AuthProvider", function () {
  return {
    useAuthContext: jest.fn()
  };
});
_getJestObj().mock("@/lib/components/AuthScreen", function () {
  var MockReact = require("react");
  var MockRN = require("react-native");
  return {
    AuthScreen: function AuthScreen() {
      return MockReact.createElement(MockRN.Text, {
        testID: "auth-screen"
      }, "AuthScreen Component");
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AuthAwareLayout = require("@/lib/components/AuthAwareLayout");
var _AuthProvider = require("@/lib/components/AuthProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleWarn = console.warn;
beforeAll(function () {
  console.warn = jest.fn();
});
afterAll(function () {
  console.warn = originalConsoleWarn;
});
var mockUseAuthContext = jest.mocked(_AuthProvider.useAuthContext);
var TestChild = function TestChild() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-child",
    children: "Test Child Content"
  });
};
var createMockAuthContext = function createMockAuthContext() {
  var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    user: user,
    loading: loading,
    error: error,
    signInAnonymously: jest.fn(),
    createAccount: jest.fn(),
    signIn: jest.fn(),
    signOut: jest.fn(),
    clearError: jest.fn()
  };
};
describe("AuthAwareLayout", function () {
  var originalEnv = process.env;
  beforeEach(function () {
    jest.clearAllMocks();
    process.env = Object.assign({}, originalEnv);
    delete process.env.CHROME_TEST;
    delete process.env.CI;
  });
  afterEach(function () {
    process.env = originalEnv;
    jest.clearAllTimers();
  });
  describe("Loading State", function () {
    test("shows loading indicator when auth is loading and no force auth", function () {
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("test-child")).toBeNull();
      expect(_reactNative.screen.queryByTestId("auth-screen")).toBeNull();
    });
    test("shows loading indicator with activity indicator", function () {
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      var loadingContainer = _reactNative.screen.getByText("Initializing...").parent;
      expect(loadingContainer).toBeTruthy();
    });
  });
  describe("Auth Required State", function () {
    test("shows AuthScreen when no user and not loading", function () {
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, false));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("test-child")).toBeNull();
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
    });
    test("shows AuthScreen when forceShowAuth is true", (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(5000);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      });
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
      expect(_reactNative.screen.queryByTestId("test-child")).toBeNull();
      jest.useRealTimers();
    }));
  });
  describe("Authenticated State", function () {
    test("shows children when user is authenticated", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("test-child")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("auth-screen")).toBeNull();
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
    });
    test("shows children when anonymous user is authenticated", function () {
      var mockUser = {
        uid: "anonymous-uid",
        email: null,
        isAnonymous: true
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("test-child")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("auth-screen")).toBeNull();
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
    });
    test("renders multiple children correctly", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_AuthAwareLayout.AuthAwareLayout, {
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "child-1",
          children: "First Child"
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "child-2",
          children: "Second Child"
        }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
          testID: "child-3",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Nested Child"
          })
        })]
      }));
      expect(_reactNative.screen.getByTestId("child-1")).toBeTruthy();
      expect(_reactNative.screen.getByTestId("child-2")).toBeTruthy();
      expect(_reactNative.screen.getByTestId("child-3")).toBeTruthy();
    });
  });
  describe("Environment-Specific Behavior", function () {
    test("handles Chrome test environment correctly", function () {
      process.env.CHROME_TEST = "true";
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      expect(console.warn).toHaveBeenCalledWith("Chrome test environment - auth state should be managed by useAuth hook");
    });
    test("handles CI environment correctly", function () {
      process.env.CI = "true";
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      expect(console.warn).toHaveBeenCalledWith("Chrome test environment - auth state should be managed by useAuth hook");
    });
    test("sets timeout in non-test environments", (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(4999);
      });
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(2);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      });
      expect(console.warn).toHaveBeenCalledWith("Auth loading timeout - forcing auth screen display");
      jest.useRealTimers();
    }));
  });
  describe("State Transitions", function () {
    test("transitions from loading to authenticated", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: (0, _jsxRuntime.jsx)(TestChild, {})
        })),
        rerender = _render.rerender;
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      rerender((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("test-child")).toBeTruthy();
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
    });
    test("transitions from loading to auth required", function () {
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: (0, _jsxRuntime.jsx)(TestChild, {})
        })),
        rerender = _render2.rerender;
      expect(_reactNative.screen.getByText("Initializing...")).toBeTruthy();
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, false));
      rerender((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      expect(_reactNative.screen.queryByText("Initializing...")).toBeNull();
    });
    test("transitions from authenticated to auth required", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: (0, _jsxRuntime.jsx)(TestChild, {})
        })),
        rerender = _render3.rerender;
      expect(_reactNative.screen.getByTestId("test-child")).toBeTruthy();
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, false));
      rerender((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("test-child")).toBeNull();
    });
  });
  describe("Timeout Cleanup", function () {
    test("cleans up timeout when component unmounts during loading", function () {
      jest.useFakeTimers();
      var clearTimeoutSpy = jest.spyOn(global, "clearTimeout");
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: (0, _jsxRuntime.jsx)(TestChild, {})
        })),
        unmount = _render4.unmount;
      unmount();
      expect(clearTimeoutSpy).toHaveBeenCalled();
      clearTimeoutSpy.mockRestore();
      jest.useRealTimers();
    });
    test("cleans up timeout when loading state changes", function () {
      jest.useFakeTimers();
      var clearTimeoutSpy = jest.spyOn(global, "clearTimeout");
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, true));
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: (0, _jsxRuntime.jsx)(TestChild, {})
        })),
        rerender = _render5.rerender;
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, false));
      rerender((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(clearTimeoutSpy).toHaveBeenCalled();
      clearTimeoutSpy.mockRestore();
      jest.useRealTimers();
    });
  });
  describe("Edge Cases", function () {
    test("handles auth context with error state", function () {
      var mockError = {
        code: "auth/network-error",
        message: "Network error"
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(null, false, mockError));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("auth-screen")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("test-child")).toBeNull();
    });
    test("shows children even when there's an error but user exists", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      var mockError = {
        code: "auth/network-error",
        message: "Network error"
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false, mockError));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      }));
      expect(_reactNative.screen.getByTestId("test-child")).toBeTruthy();
      expect(_reactNative.screen.queryByTestId("auth-screen")).toBeNull();
    });
    test("handles empty children", function () {
      var mockUser = {
        uid: "test-uid",
        email: "test@example.com",
        isAnonymous: false
      };
      mockUseAuthContext.mockReturnValue(createMockAuthContext(mockUser, false));
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthAwareLayout.AuthAwareLayout, {
          children: null
        }));
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,