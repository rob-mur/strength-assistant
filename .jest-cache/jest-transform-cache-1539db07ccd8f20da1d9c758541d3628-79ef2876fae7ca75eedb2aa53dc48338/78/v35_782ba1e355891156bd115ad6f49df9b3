15cd5698b3b111bd85ced222ebf9dbc5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid"));
function uuidToBytes(uuid) {
  var bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {
    bytes.push(parseInt(hex, 16));
    return '';
  });
  return bytes;
}
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = new Array(str.length);
  for (var i = 0; i < str.length; i++) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
function _default(name, version, hashfunc) {
  var generateUUID = function generateUUID(value, namespace, buf, offset) {
    var off = buf && offset || 0;
    if (typeof value == 'string') value = stringToBytes(value);
    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);
    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');
    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');
    var bytes = hashfunc(namespace.concat(value));
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      for (var idx = 0; idx < 16; ++idx) {
        buf[off + idx] = bytes[idx];
      }
    }
    return (0, _bytesToUuid.default)(bytes);
  };
  try {
    generateUUID.name = name;
  } catch (_unused) {}
  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  return generateUUID;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYnl0ZXNUb1V1aWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsInV1aWRUb0J5dGVzIiwidXVpZCIsImJ5dGVzIiwicmVwbGFjZSIsImhleCIsInB1c2giLCJwYXJzZUludCIsInN0cmluZ1RvQnl0ZXMiLCJzdHIiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkFycmF5IiwibGVuZ3RoIiwiaSIsImNoYXJDb2RlQXQiLCJfZGVmYXVsdCIsIm5hbWUiLCJ2ZXJzaW9uIiwiaGFzaGZ1bmMiLCJnZW5lcmF0ZVVVSUQiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsImJ1ZiIsIm9mZnNldCIsIm9mZiIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJjb25jYXQiLCJpZHgiLCJieXRlc1RvVXVpZCIsIl91bnVzZWQiLCJETlMiLCJVUkwiXSwic291cmNlcyI6WyJ2MzUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJ5dGVzVG9VdWlkIGZyb20gJy4vYnl0ZXNUb1V1aWQnO1xuXG5mdW5jdGlvbiB1dWlkVG9CeXRlcyh1dWlkOiBzdHJpbmcpIHtcbiAgLy8gTm90ZTogV2UgYXNzdW1lIHdlJ3JlIGJlaW5nIHBhc3NlZCBhIHZhbGlkIHV1aWQgc3RyaW5nXG4gIGNvbnN0IGJ5dGVzOiBudW1iZXJbXSA9IFtdO1xuICB1dWlkLnJlcGxhY2UoL1thLWZBLUYwLTldezJ9L2csIChoZXg6IHN0cmluZykgPT4ge1xuICAgIGJ5dGVzLnB1c2gocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgIHJldHVybiAnJztcbiAgfSk7XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cjogc3RyaW5nKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcbiAgY29uc3QgYnl0ZXM6IG51bWJlcltdID0gbmV3IEFycmF5KHN0ci5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoXG4gIG5hbWU6IHN0cmluZyxcbiAgdmVyc2lvbjogbnVtYmVyLFxuICBoYXNoZnVuYzogKGJ5dGVzOiBudW1iZXJbXSB8IHN0cmluZykgPT4gbnVtYmVyW11cbikge1xuICBjb25zdCBnZW5lcmF0ZVVVSUQgPSBmdW5jdGlvbiAoXG4gICAgdmFsdWU6IG51bWJlcltdIHwgc3RyaW5nLFxuICAgIG5hbWVzcGFjZTogbnVtYmVyW10gfCBzdHJpbmcsXG4gICAgYnVmPzogbnVtYmVyW10sXG4gICAgb2Zmc2V0PzogbnVtYmVyXG4gICk6IHN0cmluZyB7XG4gICAgY29uc3Qgb2ZmID0gKGJ1ZiAmJiBvZmZzZXQpIHx8IDA7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09ICdzdHJpbmcnKSBuYW1lc3BhY2UgPSB1dWlkVG9CeXRlcyhuYW1lc3BhY2UpO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgdGhyb3cgVHlwZUVycm9yKCd2YWx1ZSBtdXN0IGJlIGFuIGFycmF5IG9mIGJ5dGVzJyk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5hbWVzcGFjZSkgfHwgbmFtZXNwYWNlLmxlbmd0aCAhPT0gMTYpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ25hbWVzcGFjZSBtdXN0IGJlIHV1aWQgc3RyaW5nIG9yIGFuIEFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzJyk7XG5cbiAgICAvLyBQZXIgNC4zXG4gICAgY29uc3QgYnl0ZXMgPSBoYXNoZnVuYyhuYW1lc3BhY2UuY29uY2F0KHZhbHVlKSk7XG4gICAgYnl0ZXNbNl0gPSAoYnl0ZXNbNl0gJiAweDBmKSB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSAoYnl0ZXNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgICBpZiAoYnVmKSB7XG4gICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCAxNjsgKytpZHgpIHtcbiAgICAgICAgYnVmW29mZiArIGlkeF0gPSBieXRlc1tpZHhdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBieXRlc1RvVXVpZChieXRlcyk7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lO1xuICB9IGNhdGNoIHt9XG5cbiAgLy8gUHJlLWRlZmluZWQgbmFtZXNwYWNlcywgcGVyIEFwcGVuZGl4IENcbiAgZ2VuZXJhdGVVVUlELkROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5cbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxTQUFTQyxXQUFXQSxDQUFDQyxJQUFZLEVBQUU7RUFFakMsSUFBTUMsS0FBZSxHQUFHLEVBQUU7RUFDMUJELElBQUksQ0FBQ0UsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFVBQUNDLEdBQVcsRUFBSztJQUMvQ0YsS0FBSyxDQUFDRyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0YsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLE9BQU8sRUFBRTtFQUNYLENBQUMsQ0FBQztFQUVGLE9BQU9GLEtBQUs7QUFDZDtBQUVBLFNBQVNLLGFBQWFBLENBQUNDLEdBQVcsRUFBRTtFQUNsQ0EsR0FBRyxHQUFHQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDRixHQUFHLENBQUMsQ0FBQztFQUN2QyxJQUFNTixLQUFlLEdBQUcsSUFBSVMsS0FBSyxDQUFDSCxHQUFHLENBQUNJLE1BQU0sQ0FBQztFQUM3QyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsR0FBRyxDQUFDSSxNQUFNLEVBQUVDLENBQUMsRUFBRSxFQUFFO0lBQ25DWCxLQUFLLENBQUNXLENBQUMsQ0FBQyxHQUFHTCxHQUFHLENBQUNNLFVBQVUsQ0FBQ0QsQ0FBQyxDQUFDO0VBQzlCO0VBQ0EsT0FBT1gsS0FBSztBQUNkO0FBRWUsU0FBQWEsU0FDYkMsSUFBWSxFQUNaQyxPQUFlLEVBQ2ZDLFFBQWdELEVBQ2hEO0VBQ0EsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQ2hCQyxLQUF3QixFQUN4QkMsU0FBNEIsRUFDNUJDLEdBQWMsRUFDZEMsTUFBZSxFQUNQO0lBQ1IsSUFBTUMsR0FBRyxHQUFJRixHQUFHLElBQUlDLE1BQU0sSUFBSyxDQUFDO0lBRWhDLElBQUksT0FBT0gsS0FBSyxJQUFJLFFBQVEsRUFBRUEsS0FBSyxHQUFHYixhQUFhLENBQUNhLEtBQUssQ0FBQztJQUMxRCxJQUFJLE9BQU9DLFNBQVMsSUFBSSxRQUFRLEVBQUVBLFNBQVMsR0FBR3JCLFdBQVcsQ0FBQ3FCLFNBQVMsQ0FBQztJQUVwRSxJQUFJLENBQUNWLEtBQUssQ0FBQ2MsT0FBTyxDQUFDTCxLQUFLLENBQUMsRUFBRSxNQUFNTSxTQUFTLENBQUMsaUNBQWlDLENBQUM7SUFDN0UsSUFBSSxDQUFDZixLQUFLLENBQUNjLE9BQU8sQ0FBQ0osU0FBUyxDQUFDLElBQUlBLFNBQVMsQ0FBQ1QsTUFBTSxLQUFLLEVBQUUsRUFDdEQsTUFBTWMsU0FBUyxDQUFDLDZEQUE2RCxDQUFDO0lBR2hGLElBQU14QixLQUFLLEdBQUdnQixRQUFRLENBQUNHLFNBQVMsQ0FBQ00sTUFBTSxDQUFDUCxLQUFLLENBQUMsQ0FBQztJQUMvQ2xCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBSUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBSWUsT0FBTztJQUN0Q2YsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFJQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFJLElBQUk7SUFFbkMsSUFBSW9CLEdBQUcsRUFBRTtNQUNQLEtBQUssSUFBSU0sR0FBRyxHQUFHLENBQUMsRUFBRUEsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFQSxHQUFHLEVBQUU7UUFDakNOLEdBQUcsQ0FBQ0UsR0FBRyxHQUFHSSxHQUFHLENBQUMsR0FBRzFCLEtBQUssQ0FBQzBCLEdBQUcsQ0FBQztNQUM3QjtJQUNGO0lBRUEsT0FBTyxJQUFBQyxvQkFBVyxFQUFDM0IsS0FBSyxDQUFDO0VBQzNCLENBQUM7RUFHRCxJQUFJO0lBQ0ZpQixZQUFZLENBQUNILElBQUksR0FBR0EsSUFBSTtFQUMxQixDQUFDLENBQUMsT0FBQWMsT0FBQSxFQUFNLENBQUM7RUFHVFgsWUFBWSxDQUFDWSxHQUFHLEdBQUcsc0NBQXNDO0VBQ3pEWixZQUFZLENBQUNhLEdBQUcsR0FBRyxzQ0FBc0M7RUFFekQsT0FBT2IsWUFBWTtBQUNyQiIsImlnbm9yZUxpc3QiOltdfQ==