name: PR Validation
on:
  pull_request:
    branches: [main]

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4
      - name: 🛠 Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: Test
        working-directory: devbox/minimal
        run: devbox run test

  build-preview:
    runs-on: ubuntu-latest
    environment: Dev
    outputs:
      apk-path: ${{ steps.build-preview.outputs.apk-path }}
      artifact-name: ${{ steps.build-preview.outputs.artifact-name }}
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4
      - name: Build Preview APK
        uses: ./.github/actions/android-build
        with:
          build-type: preview
          devbox-config: android-build
          artifact-name: preview_build
        id: build-preview

  build-production-apk:
    name: Build Production APK
    runs-on: ubuntu-latest
    environment: Dev
    outputs:
      apk-artifact-name: ${{ steps.build-production.outputs.artifact-name }}
      apk-filename: build_production.apk
      apk-path: ${{ steps.build-production.outputs.apk-path }}
      build-successful: ${{ steps.build-production.outputs.build-successful }}
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: Build Production APK
        uses: ./.github/actions/android-build
        with:
          build-type: production
          devbox-config: android-build
          artifact-name: pr-production-release-apk
        id: build-production

  integration-tests-android:
    runs-on: ubuntu-latest
    needs: build-preview
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-preview.outputs.artifact-name }}
      - name: List downloaded files for debugging
        run: |
          echo "Downloaded artifact contents:"
          ls -la
          find . -name "*.apk" -type f
          echo "Expected APK path: ${{ needs.build-preview.outputs.apk-path }}"
          echo "Working directory: $(pwd)"
          echo "All files recursively:"
          find . -type f | head -20
      - name: Verify APK file exists
        run: |
          if [ -f "build_preview.apk" ]; then
            echo "✅ APK file found: build_preview.apk"
            ls -la build_preview.apk
          else
            echo "❌ APK file not found at expected location"
            echo "Available APK files:"
            find . -name "*.apk" -type f
            exit 1
          fi
      - name: Run Integration Tests
        uses: ./.github/actions/maestro-test
        with:
          apk-path: ${{ github.workspace }}/build_preview.apk
          test-environment: integration
          skip-data-cleanup: false
          devbox-config: android-testing
        id: integration-tests

  integration-tests-chrome:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4
      - name: 🛠 Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: 🧪 Run Chrome integration tests
        working-directory: devbox/minimal
        run: devbox run integration_test_chrome
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chrome-integration-test-debug-artifacts
          path: |
            maestro-debug-output/
            *.png
            *.log
            expo-server.log
          retention-days: 14

  sonarqube:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 🛠 Setup development environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: minimal
      - name: Test and coverage
        run: devbox run collect_coverage
        working-directory: devbox/minimal
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

  production-validation:
    name: Validate Production Configuration
    runs-on: ubuntu-latest
    needs: build-production-apk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Production APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-production-apk.outputs.apk-artifact-name }}
          path: ./artifacts

      - name: Setup APK for Testing
        shell: bash
        run: |
          # Find the downloaded APK file
          APK_FILE=$(find ./artifacts -name "*.apk" -type f | head -1)

          if [ ! -f "$APK_FILE" ]; then
            echo "::error title=APK Not Found::No APK file found in downloaded artifacts"
            exit 1
          fi

          echo "✅ Found APK: $APK_FILE"

          # Copy APK to expected location for testing
          cp "$APK_FILE" "${{ needs.build-production-apk.outputs.apk-filename }}"
          echo "📋 Copied APK to: ${{ needs.build-production-apk.outputs.apk-filename }}"

          echo "apk-path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "build-successful=true" >> $GITHUB_OUTPUT
        id: download-apk

      - name: Run Production Configuration Validation
        uses: ./.github/actions/maestro-test
        with:
          apk-path: ${{ github.workspace }}/${{ needs.build-production-apk.outputs.apk-filename }}
          test-environment: production
          skip-data-cleanup: true
          devbox-config: android-testing
        id: maestro-tests

      - name: Process Test Results
        run: |
          echo "Production configuration validation completed"
          echo "APK download successful: ${{ steps.download-apk.outputs.build-successful }}"
          echo "Tests passed: ${{ steps.maestro-tests.outputs.tests-passed }}"
          echo "Debug artifacts: ${{ steps.maestro-tests.outputs.debug-artifacts }}"

      # Alert on failure
      - name: Production Configuration Validation Failed
        if: failure()
        run: |
          echo "::error title=Production Configuration Validation Failed::Production configuration validation has failed. This change may break production deployment."
          echo "::error::Please review the configuration changes and ensure backwards compatibility"
          exit 1

      # Success notification
      - name: Production Configuration Validation Succeeded
        if: success()
        run: |
          echo "::notice title=Production Configuration Validation Passed::Production configuration validation completed successfully"
          echo "::notice::This change is safe for production deployment"

  claude-review:
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        build-preview,
        build-production-apk,
        integration-tests-android,
        integration-tests-chrome,
        production-validation,
        sonarqube,
      ]
    if: always() && (needs.unit-tests.result == 'success' && needs.build-preview.result == 'success' && needs.build-production-apk.result == 'success' && needs.integration-tests-android.result == 'success' && needs.integration-tests-chrome.result == 'success' && needs.production-validation.result == 'success' && needs.sonarqube.result == 'success')
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          direct_prompt: |
            All PR validation tests have passed. Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.
