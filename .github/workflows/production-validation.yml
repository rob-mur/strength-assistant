name: Production Validation

on:
  workflow_dispatch:
    inputs:
      terraform_deployment_id:
        description: "Terraform deployment ID that triggered this validation"
        required: true
        type: string

  # Trigger automatically after either workflow completes
  workflow_run:
    workflows: ["Build Production APK", "Terraform Deploy"]
    types: [completed]
    branches: [main]

env:
  SKIP_DATA_CLEANUP: true
  NODE_ENV: production

jobs:
  production-validation:
    name: Validate against Production Infrastructure
    runs-on: ubuntu-latest

    # Only run if triggering workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download Production APK from GitHub Release
      #
      # IMPROVEMENT: Fixed systematic APK download failure (feature 008-the-current-production)
      # Previously failed with GitHub CLI 'latest' alias resolution (exit code 2)
      #
      # Key fixes:
      # 1. GitHub API-based latest tag resolution (gh api repos/:owner/:repo/releases/latest)
      # 2. APK asset verification before download attempt (gh release view $TAG --json assets)
      # 3. Systematic error detection - exit code 2 failures NOT retried
      # 4. Enhanced error diagnostics with specific troubleshooting steps
      #
      # This step replaces the previous APK build to eliminate duplicate builds.
      # It downloads the APK created by build-production.yml from GitHub release artifacts,
      # ensuring the exact same APK that was built and tested is used for production validation.
      # Benefits: Faster validation, guaranteed consistency, reduced CI resource usage.
      - name: Download Production APK
        shell: bash
        run: |
          # Create artifacts directory
          mkdir -p ./artifacts

          # Check if any releases exist
          if ! gh release list --limit 1 >/dev/null 2>&1; then
            echo "::error title=No GitHub Releases Found::No GitHub releases exist for this repository. Check if build-production workflow completed successfully."
            echo "::error::Investigation steps:"
            echo "::error::1. Verify all prerequisite tests passed on main branch"
            echo "::error::2. Check build-production workflow execution logs"
            echo "::error::3. Confirm GitHub release creation permissions"
            exit 1
          fi

          # Get latest release tag using GitHub API (fixes 'latest' alias resolution issue)
          echo "🔍 Resolving latest release tag..."
          LATEST_TAG=$(gh api repos/:owner/:repo/releases/latest --jq '.tag_name' 2>/dev/null)
          if [ -z "$LATEST_TAG" ]; then
            echo "::error title=Cannot Resolve Latest Release::Failed to get latest release tag from GitHub API."
            echo "::error::Investigation steps:"
            echo "::error::1. Check GitHub API connectivity and authentication"
            echo "::error::2. Verify GITHUB_TOKEN has repository read permissions"
            echo "::error::3. Confirm at least one published release exists"
            exit 1
          fi
          echo "📋 Latest release tag: $LATEST_TAG"

          # Verify latest release contains APK assets before download
          echo "🔍 Checking release $LATEST_TAG for APK assets..."
          APK_ASSETS=$(gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name | endswith(".apk")) | .name' 2>/dev/null)
          if [ -z "$APK_ASSETS" ]; then
            echo "::error title=No APK Assets Found::Release $LATEST_TAG exists but contains no APK files."
            echo "::error::Investigation steps:"
            echo "::error::1. Check build-production workflow logs for APK upload failures"
            echo "::error::2. Verify APK file naming matches expected pattern (*.apk)"
            echo "::error::3. Confirm release assets contain APK files in GitHub web UI"
            echo "::error::4. Verify build-production workflow completed APK upload step"
            exit 3
          fi
          echo "📦 Found APK assets: $APK_ASSETS"

          # Download APK using resolved tag (systematic error detection - no retry for exit code 2)
          echo "📥 Downloading APK from release $LATEST_TAG..."
          if ! gh release download "$LATEST_TAG" --pattern "*.apk" --dir ./artifacts 2>/dev/null; then
            DOWNLOAD_EXIT_CODE=$?
            if [ $DOWNLOAD_EXIT_CODE -eq 2 ]; then
              echo "::error title=APK Download Failed (Systematic)::Download failed with exit code 2 (file not found or permission denied)."
              echo "::error::This is a systematic failure that will not be retried."
              echo "::error::Investigation steps:"
              echo "::error::1. Verify APK assets are accessible (not corrupted during upload)"
              echo "::error::2. Check GITHUB_TOKEN has sufficient release asset read permissions"
              echo "::error::3. Confirm release $LATEST_TAG is published (not draft)"
              echo "::error::4. Test download manually: gh release download $LATEST_TAG --pattern '*.apk'"
              exit 2
            else
              # For other exit codes, attempt retry with exponential backoff
              echo "::warning::Download failed with exit code $DOWNLOAD_EXIT_CODE. Attempting retry..."
              MAX_RETRIES=3
              RETRY_COUNT=0
              DOWNLOAD_SUCCESS=false

              while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$DOWNLOAD_SUCCESS" = false ]; do
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "📥 APK download retry attempt $RETRY_COUNT of $MAX_RETRIES..."
                
                if gh release download "$LATEST_TAG" --pattern "*.apk" --dir ./artifacts 2>/dev/null; then
                  DOWNLOAD_SUCCESS=true
                  echo "✅ APK download succeeded on retry attempt $RETRY_COUNT"
                else
                  RETRY_EXIT_CODE=$?
                  if [ $RETRY_EXIT_CODE -eq 2 ]; then
                    echo "::error title=APK Download Failed (Systematic)::Retry failed with exit code 2. This indicates a persistent issue."
                    echo "::error::Investigation steps:"
                    echo "::error::1. Check if release assets were modified or removed during download"
                    echo "::error::2. Verify GITHUB_TOKEN permissions have not changed"
                    echo "::error::3. Confirm GitHub API is functioning correctly"
                    exit 2
                  fi
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    DELAY=$((2 ** $RETRY_COUNT))  # Exponential backoff: 2, 4, 8 seconds
                    echo "::warning::Retry attempt $RETRY_COUNT failed with exit code $RETRY_EXIT_CODE. Retrying in ${DELAY} seconds..."
                    sleep $DELAY
                  fi
                fi
              done

              if [ "$DOWNLOAD_SUCCESS" = false ]; then
                echo "::error title=APK Download Failed After Retries::Failed to download APK after $MAX_RETRIES retry attempts."
                echo "::error::Investigation steps:"
                echo "::error::1. Check GitHub API status: https://www.githubstatus.com/"
                echo "::error::2. Verify network connectivity from GitHub Actions runner"
                echo "::error::3. Test download manually to isolate the issue"
                echo "::error::4. Check for GitHub API rate limiting"
                exit 4
              fi
            fi
          else
            echo "✅ APK download succeeded on first attempt"
          fi

          # Validate APK file was downloaded successfully
          APK_FILE=$(ls ./artifacts/*.apk 2>/dev/null | head -1)
          if [ ! -f "$APK_FILE" ]; then
            echo "::error title=APK Download Verification Failed::APK assets were verified in release but file not found after download."
            echo "::error::This indicates a download process failure despite successful validation."
            echo "::error::Investigation steps:"
            echo "::error::1. Check if download directory ./artifacts was created correctly"
            echo "::error::2. Verify file permissions allow APK file creation"
            echo "::error::3. Check for disk space issues on GitHub Actions runner"
            echo "::error::4. Review download logs for partial download or corruption"
            exit 5
          fi

          # Validate APK file integrity and format
          if [ ! -s "$APK_FILE" ]; then
            echo "::error title=Corrupted APK File::Downloaded APK file is empty or corrupted."
            echo "::error::File: $APK_FILE"
            echo "::error::Release: $LATEST_TAG"
            echo "::error::Investigation steps:"
            echo "::error::1. Check if download was interrupted (network issues)"
            echo "::error::2. Verify original APK file integrity in release $LATEST_TAG assets"
            echo "::error::3. Re-run build-production workflow to generate new APK"
            echo "::error::4. Test manual download: gh release download $LATEST_TAG --pattern '*.apk'"
            exit 6
          fi

          # Validate APK file format (basic ZIP signature check)
          APK_HEADER=$(head -c 4 "$APK_FILE" | od -An -tx1 | tr -d ' ')
          if [ "$APK_HEADER" != "504b0304" ]; then
            echo "::error title=Invalid APK Format::Downloaded file does not have valid APK/ZIP signature."
            echo "::error::File: $APK_FILE"
            echo "::error::Release: $LATEST_TAG"
            echo "::error::Expected ZIP signature: 504b0304, Found: $APK_HEADER"
            echo "::error::Investigation steps:"
            echo "::error::1. Verify file was not corrupted during upload to GitHub release $LATEST_TAG"
            echo "::error::2. Check if file is actually an APK and not another format (inspect in GitHub web UI)"
            echo "::error::3. Re-run build-production workflow to generate and upload new APK"
            echo "::error::4. Test file integrity: file $APK_FILE"
            exit 7
          fi

          # Additional file size validation (APK should be at least 1MB for a real app)
          APK_SIZE=$(stat -c%s "$APK_FILE")
          MIN_SIZE=1048576  # 1MB minimum
          if [ $APK_SIZE -lt $MIN_SIZE ]; then
            echo "::warning::APK file size ($APK_SIZE bytes) is smaller than expected minimum (1MB)"
            echo "::warning::This may indicate an incomplete or test build"
          fi

          echo "✅ Successfully downloaded and validated APK: $APK_FILE"
          echo "📋 Release: $LATEST_TAG"
          echo "📁 File size: $(stat -c%s "$APK_FILE") bytes"
          echo "🔍 Format: Valid APK/ZIP signature verified"
          echo "apk-path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "build-successful=true" >> $GITHUB_OUTPUT
        id: download-apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Run Maestro Tests Against Production
      # Use direct test execution since we have the APK file locally
      # This ensures production validation tests the exact same APK that will be deployed,
      # maintaining consistency between build and validation phases.
      - name: Setup testing environment
        uses: ./.github/actions/setup-dev-environment
        with:
          devbox-config: android-testing

      - name: Run Maestro Tests Against Production
        shell: bash
        working-directory: devbox/android-testing
        env:
          SKIP_DATA_CLEANUP: true
          TEST_ENVIRONMENT: production
        run: |
          # Set APK path for the test script to use
          export APK_PATH="${{ steps.download-apk.outputs.apk-path }}"
          # Run integration test with the downloaded APK
          devbox run integration_test_android
          echo "tests-passed=$?" >> $GITHUB_OUTPUT
        id: maestro-tests

      # Process results
      # Results now reflect APK download success instead of build success,
      # maintaining the same output format for downstream processes.
      - name: Process Test Results
        run: |
          echo "Production validation completed"
          echo "APK download successful: ${{ steps.download-apk.outputs.build-successful }}"
          echo "Tests passed: ${{ steps.maestro-tests.outputs.tests-passed }}"

      # Alert on failure - GitHub will automatically send email notifications
      - name: Production Validation Failed
        if: failure()
        run: |
          echo "::error title=Production Validation Failed::Production validation against deployment ${{ github.event.inputs.terraform_deployment_id || 'unknown' }} has failed. Manual intervention required."
          echo "::error::Frontend deployment should be blocked pending investigation"
          echo "::error::Possible failure causes:"
          echo "::error::• GitHub release artifact download failure (check build-production workflow)"
          echo "::error::• APK file corruption or invalid format (check release assets)"
          echo "::error::• Maestro test execution failure against production infrastructure"
          echo "::error::• Production server connectivity or configuration issues"
          echo "::error::Investigation steps:"
          echo "::error::1. Check workflow logs for specific error messages and exit codes"
          echo "::error::2. Verify latest GitHub release contains valid APK assets"
          echo "::error::3. Confirm production infrastructure is accessible and healthy"
          echo "::error::4. Review Maestro test results and anonymous user creation logs"
          echo "::error::5. Check SKIP_DATA_CLEANUP environment variable preservation"
          exit 1

      # Success notification
      - name: Production Validation Succeeded
        if: success()
        run: |
          echo "::notice title=Production Validation Passed::Production validation against deployment ${{ github.event.inputs.terraform_deployment_id || 'auto-triggered' }} completed successfully"
          echo "::notice::Frontend deployment can proceed with confidence"
