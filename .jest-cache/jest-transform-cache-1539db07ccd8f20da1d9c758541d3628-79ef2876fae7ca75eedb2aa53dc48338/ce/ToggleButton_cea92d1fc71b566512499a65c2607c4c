705e2ae0f01a8e255735de231cf5cf14
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress", "rippleColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleButton = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _ToggleButtonGroup = require("./ToggleButtonGroup");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _forwardRef = require("../../utils/forwardRef");
var _IconButton = _interopRequireDefault(require("../IconButton/IconButton"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var ToggleButton = exports.ToggleButton = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
    size = _ref.size,
    themeOverrides = _ref.theme,
    accessibilityLabel = _ref.accessibilityLabel,
    disabled = _ref.disabled,
    style = _ref.style,
    value = _ref.value,
    status = _ref.status,
    _onPress = _ref.onPress,
    rippleColor = _ref.rippleColor,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var borderRadius = theme.roundness;
  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {
    var checked = context && context.value === value || status === 'checked';
    var backgroundColor = (0, _utils.getToggleButtonColor)({
      theme: theme,
      checked: checked
    });
    var borderColor = theme.isV3 ? theme.colors.outline : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
    return React.createElement(_IconButton.default, _extends({
      borderless: false,
      icon: icon,
      onPress: function onPress(e) {
        if (_onPress) {
          _onPress(e);
        }
        if (context) {
          context.onValueChange(!checked ? value : null);
        }
      },
      size: size,
      accessibilityLabel: accessibilityLabel,
      accessibilityState: {
        disabled: disabled,
        selected: checked
      },
      disabled: disabled,
      style: [styles.content, {
        backgroundColor: backgroundColor,
        borderRadius: borderRadius,
        borderColor: borderColor
      }, style],
      ref: ref,
      theme: theme,
      rippleColor: rippleColor
    }, rest));
  });
});
var styles = _reactNative.StyleSheet.create({
  content: {
    width: 42,
    height: 42,
    margin: 0
  }
});
var _default = exports.default = ToggleButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb2xvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfVG9nZ2xlQnV0dG9uR3JvdXAiLCJfdXRpbHMiLCJfdGhlbWluZyIsIl9jb2xvcnMiLCJfZm9yd2FyZFJlZiIsIl9JY29uQnV0dG9uIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidCIsIldlYWtNYXAiLCJyIiwibiIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJUb2dnbGVCdXR0b24iLCJleHBvcnRzIiwiZm9yd2FyZFJlZiIsIl9yZWYiLCJyZWYiLCJpY29uIiwic2l6ZSIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJkaXNhYmxlZCIsInN0eWxlIiwidmFsdWUiLCJzdGF0dXMiLCJvblByZXNzIiwicmlwcGxlQ29sb3IiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9leGNsdWRlZCIsInVzZUludGVybmFsVGhlbWUiLCJib3JkZXJSYWRpdXMiLCJyb3VuZG5lc3MiLCJjcmVhdGVFbGVtZW50IiwiVG9nZ2xlQnV0dG9uR3JvdXBDb250ZXh0IiwiQ29uc3VtZXIiLCJjb250ZXh0IiwiY2hlY2tlZCIsImJhY2tncm91bmRDb2xvciIsImdldFRvZ2dsZUJ1dHRvbkNvbG9yIiwiYm9yZGVyQ29sb3IiLCJpc1YzIiwiY29sb3JzIiwib3V0bGluZSIsImRhcmsiLCJ3aGl0ZSIsImJsYWNrIiwiYWxwaGEiLCJyZ2IiLCJzdHJpbmciLCJib3JkZXJsZXNzIiwib25WYWx1ZUNoYW5nZSIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsInNlbGVjdGVkIiwic3R5bGVzIiwiY29udGVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlQnV0dG9uL1RvZ2dsZUJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQVVBLElBQUFFLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLElBQUFJLGtCQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxRQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxPQUFBLEdBQUFQLE9BQUE7QUFFQSxJQUFBUSxXQUFBLEdBQUFSLE9BQUE7QUFFQSxJQUFBUyxXQUFBLEdBQUFOLHNCQUFBLENBQUFILE9BQUE7QUFBa0QsU0FBQUcsdUJBQUFPLENBQUE7RUFBQSxPQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBQUEsU0FBQVgsd0JBQUFXLENBQUEsRUFBQUcsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBZix1QkFBQSxZQUFBQSx3QkFBQVcsQ0FBQSxFQUFBRyxDQUFBO0lBQUEsS0FBQUEsQ0FBQSxJQUFBSCxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxTQUFBRCxDQUFBO0lBQUEsSUFBQU8sQ0FBQTtNQUFBQyxDQUFBO01BQUFDLENBQUE7UUFBQUMsU0FBQTtRQUFBUixPQUFBLEVBQUFGO01BQUE7SUFBQSxhQUFB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