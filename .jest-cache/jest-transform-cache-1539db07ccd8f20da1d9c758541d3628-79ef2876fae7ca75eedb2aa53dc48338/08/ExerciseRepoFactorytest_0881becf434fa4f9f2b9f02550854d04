a8fc5002667cfa5814f12398fbbab1e9
_getJestObj().mock('@legendapp/state', function () {
  return {
    observable: jest.fn(),
    observe: jest.fn(),
    computed: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@/lib/data/firebase/initializer', function () {
  return {
    initializeFirebaseServices: jest.fn(),
    getDb: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/supabase/SupabaseClient', function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/store', function () {
  return {
    exercises$: {
      get: jest.fn(),
      set: jest.fn()
    },
    user$: {
      get: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/data/sync/syncConfig', function () {
  return {
    syncExerciseToSupabase: jest.fn(),
    deleteExerciseFromSupabase: jest.fn(),
    syncHelpers: {
      isSyncing: jest.fn(),
      isOnline: jest.fn(),
      getPendingChangesCount: jest.fn(),
      forceSync: jest.fn(),
      hasErrors: jest.fn(),
      getErrorMessage: jest.fn()
    }
  };
});
_getJestObj().mock('@/lib/models/Exercise', function () {
  return {
    ExerciseValidator: {
      validateExerciseInput: jest.fn(),
      sanitizeExerciseName: jest.fn()
    }
  };
});
_getJestObj().mock('firebase/firestore', function () {
  return {
    collection: jest.fn(),
    addDoc: jest.fn(),
    deleteDoc: jest.fn(),
    doc: jest.fn(),
    onSnapshot: jest.fn(),
    query: jest.fn(),
    orderBy: jest.fn()
  };
});
_getJestObj().mock('@/lib/data/firebase/logger', function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn(),
      warn: jest.fn(),
      debug: jest.fn()
    }
  };
});
_getJestObj().mock('uuid', function () {
  return {
    v4: jest.fn(function () {
      return 'test-uuid';
    })
  };
});
_getJestObj().mock('expo-constants', function () {
  return {
    default: {
      expoConfig: {
        extra: {}
      }
    }
  };
});
_getJestObj().mock('@/lib/repo/FirebaseExerciseRepo');
_getJestObj().mock('@/lib/repo/SupabaseExerciseRepo');
var _ExerciseRepoFactory = require("@/lib/repo/ExerciseRepoFactory");
var _FirebaseExerciseRepo = require("@/lib/repo/FirebaseExerciseRepo");
var _SupabaseExerciseRepo = require("@/lib/repo/SupabaseExerciseRepo");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalEnv = process.env;
var MockedFirebaseExerciseRepo = jest.mocked(_FirebaseExerciseRepo.FirebaseExerciseRepo);
var MockedSupabaseExerciseRepo = jest.mocked(_SupabaseExerciseRepo.SupabaseExerciseRepo);
describe('ExerciseRepoFactory', function () {
  beforeEach(function () {
    process.env = Object.assign({}, originalEnv);
    _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
    jest.clearAllMocks();
    MockedFirebaseExerciseRepo.getInstance.mockReturnValue({});
    MockedSupabaseExerciseRepo.getInstance.mockReturnValue({});
  });
  afterEach(function () {
    process.env = originalEnv;
  });
  describe('getInstance', function () {
    test('returns Firebase implementation when USE_SUPABASE_DATA is false', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      var repo = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedFirebaseExerciseRepo.getInstance).toHaveBeenCalled();
      expect(MockedSupabaseExerciseRepo.getInstance).not.toHaveBeenCalled();
    });
    test('returns Firebase implementation when USE_SUPABASE_DATA is undefined', function () {
      delete process.env.USE_SUPABASE_DATA;
      var repo = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedFirebaseExerciseRepo.getInstance).toHaveBeenCalled();
      expect(MockedSupabaseExerciseRepo.getInstance).not.toHaveBeenCalled();
    });
    test('returns Supabase implementation when USE_SUPABASE_DATA is true', function () {
      process.env.USE_SUPABASE_DATA = 'true';
      var repo = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedSupabaseExerciseRepo.getInstance).toHaveBeenCalled();
      expect(MockedFirebaseExerciseRepo.getInstance).not.toHaveBeenCalled();
    });
    test('returns same Firebase instance on multiple calls', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      var repo1 = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      var repo2 = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedFirebaseExerciseRepo.getInstance).toHaveBeenCalledTimes(1);
    });
    test('returns same Supabase instance on multiple calls', function () {
      process.env.USE_SUPABASE_DATA = 'true';
      var repo1 = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      var repo2 = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedSupabaseExerciseRepo.getInstance).toHaveBeenCalledTimes(1);
    });
  });
  describe('getCurrentDataSource', function () {
    test('returns "firebase" when USE_SUPABASE_DATA is false', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
    test('returns "firebase" when USE_SUPABASE_DATA is undefined', function () {
      delete process.env.USE_SUPABASE_DATA;
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
    test('returns "supabase" when USE_SUPABASE_DATA is true', function () {
      process.env.USE_SUPABASE_DATA = 'true';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('supabase');
    });
    test('handles string case insensitivity', function () {
      process.env.USE_SUPABASE_DATA = 'TRUE';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('supabase');
    });
    test('treats non-"true" strings as false', function () {
      process.env.USE_SUPABASE_DATA = 'maybe';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
  });
  describe('resetInstances', function () {
    test('clears cached instances', function () {
      process.env.USE_SUPABASE_DATA = 'false';
      _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedFirebaseExerciseRepo.getInstance).toHaveBeenCalledTimes(1);
      _ExerciseRepoFactory.ExerciseRepoFactory.resetInstances();
      _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      expect(MockedFirebaseExerciseRepo.getInstance).toHaveBeenCalledTimes(2);
    });
  });
  describe('Expo Constants integration', function () {
    test('prefers process.env over Expo Constants', function () {
      var Constants = require('expo-constants').default;
      Constants.expoConfig.extra.useSupabaseData = true;
      process.env.USE_SUPABASE_DATA = 'false';
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('firebase');
    });
    test('falls back to Expo Constants when process.env not set', function () {
      delete process.env.USE_SUPABASE_DATA;
      var Constants = require('expo-constants').default;
      Constants.expoConfig.extra.useSupabaseData = true;
      expect(_ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource()).toBe('supabase');
    });
  });
  describe('Dynamic require error handling', function () {
    test('handles require errors gracefully', function () {
      delete process.env.USE_SUPABASE_DATA;
      var result = _ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource();
      expect(['firebase', 'supabase']).toContain(result);
    });
    test('covers catch block in shouldUseSupabase', function () {
      var originalConsoleError = console.error;
      console.error = jest.fn();
      try {
        delete process.env.USE_SUPABASE_DATA;
        var result = _ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource();
        expect(typeof result).toBe('string');
      } finally {
        console.error = originalConsoleError;
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,