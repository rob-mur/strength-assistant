4cf63d423775384ce09e0c516b6993a7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processFilter;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _processColor = _interopRequireDefault(require("./processColor"));
function processFilter(filter) {
  var result = [];
  if (filter == null) {
    return result;
  }
  if (typeof filter === 'string') {
    filter = filter.replace(/\n/g, ' ');
    var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
    var matches;
    while (matches = regex.exec(filter)) {
      var filterName = matches[1].toLowerCase();
      if (filterName === 'drop-shadow') {
        var dropShadow = parseDropShadow(matches[2]);
        if (dropShadow != null) {
          result.push({
            dropShadow: dropShadow
          });
        } else {
          return [];
        }
      } else {
        var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
        var amount = _getFilterAmount(camelizedName, matches[2]);
        if (amount != null) {
          var filterFunction = {};
          filterFunction[camelizedName] = amount;
          result.push(filterFunction);
        } else {
          return [];
        }
      }
    }
  } else if (Array.isArray(filter)) {
    for (var _filterFunction of filter) {
      var _Object$entries$ = (0, _slicedToArray2.default)(Object.entries(_filterFunction)[0], 2),
        _filterName = _Object$entries$[0],
        filterValue = _Object$entries$[1];
      if (_filterName === 'dropShadow') {
        var _dropShadow = parseDropShadow(filterValue);
        if (_dropShadow == null) {
          return [];
        }
        result.push({
          dropShadow: _dropShadow
        });
      } else {
        var _amount = _getFilterAmount(_filterName, filterValue);
        if (_amount != null) {
          var resultObject = {};
          resultObject[_filterName] = _amount;
          result.push(resultObject);
        } else {
          return [];
        }
      }
    }
  } else {
    throw new TypeError(`${typeof filter} filter is not a string or array`);
  }
  return result;
}
function _getFilterAmount(filterName, filterArgs) {
  var filterArgAsNumber;
  var unit;
  if (typeof filterArgs === 'string') {
    var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
    var match = argsWithUnitsRegex.exec(filterArgs);
    if (!match || isNaN(Number(match[1]))) {
      return undefined;
    }
    filterArgAsNumber = Number(match[1]);
    unit = match[3];
  } else if (typeof filterArgs === 'number') {
    filterArgAsNumber = filterArgs;
  } else {
    return undefined;
  }
  switch (filterName) {
    case 'hueRotate':
      if (filterArgAsNumber === 0) {
        return 0;
      }
      if (unit !== 'deg' && unit !== 'rad') {
        return undefined;
      }
      return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
    case 'blur':
      if (unit && unit !== 'px' || filterArgAsNumber < 0) {
        return undefined;
      }
      return filterArgAsNumber;
    case 'brightness':
    case 'contrast':
    case 'grayscale':
    case 'invert':
    case 'opacity':
    case 'saturate':
    case 'sepia':
      if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
        return undefined;
      }
      if (unit === '%') {
        filterArgAsNumber /= 100;
      }
      return filterArgAsNumber;
    default:
      return undefined;
  }
}
function parseDropShadow(rawDropShadow) {
  var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
  var parsedDropShadow = {
    offsetX: 0,
    offsetY: 0
  };
  var offsetX;
  var offsetY;
  for (var arg in dropShadow) {
    var value = void 0;
    switch (arg) {
      case 'offsetX':
        value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
        if (value == null) {
          return null;
        }
        offsetX = value;
        break;
      case 'offsetY':
        value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
        if (value == null) {
          return null;
        }
        offsetY = value;
        break;
      case 'standardDeviation':
        value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
        if (value == null || value < 0) {
          return null;
        }
        parsedDropShadow.standardDeviation = value;
        break;
      case 'color':
        var color = (0, _processColor.default)(dropShadow.color);
        if (color == null) {
          return null;
        }
        parsedDropShadow.color = color;
        break;
      default:
        return null;
    }
  }
  if (offsetX == null || offsetY == null) {
    return null;
  }
  parsedDropShadow.offsetX = offsetX;
  parsedDropShadow.offsetY = offsetY;
  return parsedDropShadow;
}
function parseDropShadowString(rawDropShadow) {
  var dropShadow = {
    offsetX: 0,
    offsetY: 0
  };
  var offsetX;
  var offsetY;
  var lengthCount = 0;
  var keywordDetectedAfterLength = false;
  for (var arg of rawDropShadow.split(/\s+(?![^(]*\))/)) {
    var processedColor = (0, _processColor.default)(arg);
    if (processedColor != null) {
      if (dropShadow.color != null) {
        return null;
      }
      if (offsetX != null) {
        keywordDetectedAfterLength = true;
      }
      dropShadow.color = arg;
      continue;
    }
    switch (lengthCount) {
      case 0:
        offsetX = arg;
        lengthCount++;
        break;
      case 1:
        if (keywordDetectedAfterLength) {
          return null;
        }
        offsetY = arg;
        lengthCount++;
        break;
      case 2:
        if (keywordDetectedAfterLength) {
          return null;
        }
        dropShadow.standardDeviation = arg;
        lengthCount++;
        break;
      default:
        return null;
    }
  }
  if (offsetX == null || offsetY == null) {
    return null;
  }
  dropShadow.offsetX = offsetX;
  dropShadow.offsetY = offsetY;
  return dropShadow;
}
function parseLength(length) {
  var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
  var match = argsWithUnitsRegex.exec(length);
  if (!match || Number.isNaN(match[1])) {
    return null;
  }
  if (match[3] != null && match[3] !== 'px') {
    return null;
  }
  if (match[3] == null && match[1] !== '0') {
    return null;
  }
  return Number(match[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,