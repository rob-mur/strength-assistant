240f451de2a19004ad35e190ab8a7c28
_getJestObj().mock('@react-native-firebase/auth', function () {
  var mockUser = {
    uid: 'test-uid',
    email: 'test@example.com',
    isAnonymous: false
  };
  var mockAuth = {
    onAuthStateChanged: jest.fn(function () {
      return jest.fn();
    }),
    signInAnonymously: jest.fn(function () {
      return Promise.resolve({
        user: mockUser
      });
    }),
    createUserWithEmailAndPassword: jest.fn(function () {
      return Promise.resolve({
        user: mockUser
      });
    }),
    signInWithEmailAndPassword: jest.fn(function () {
      return Promise.resolve({
        user: mockUser
      });
    }),
    signOut: jest.fn(function () {
      return Promise.resolve();
    }),
    currentUser: mockUser,
    useEmulator: jest.fn()
  };
  var auth = function auth() {
    return mockAuth;
  };
  return {
    __esModule: true,
    default: auth,
    FirebaseAuthTypes: {
      AuthErrorCode: {}
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  if (!RN.Platform) {
    RN.Platform = {};
  }
  RN.Platform.OS = 'web';
  return RN;
});
_getJestObj().mock('@supabase/supabase-js', function () {
  var mockUser = {
    id: 'test-user-id',
    email: 'test@example.com',
    created_at: new Date().toISOString()
  };
  var mockAuthResponse = {
    data: {
      user: mockUser,
      session: {
        user: mockUser
      }
    },
    error: null
  };
  var mockSupabaseClient = {
    auth: {
      getSession: jest.fn(function () {
        return Promise.resolve({
          data: {
            session: {
              user: mockUser,
              access_token: 'test-token'
            }
          },
          error: null
        });
      }),
      signUp: jest.fn(function () {
        return Promise.resolve(mockAuthResponse);
      }),
      signInWithPassword: jest.fn(function () {
        return Promise.resolve(mockAuthResponse);
      }),
      signInAnonymously: jest.fn(function () {
        return Promise.resolve({
          data: {
            user: Object.assign({}, mockUser, {
              email: undefined
            }),
            session: {
              user: Object.assign({}, mockUser, {
                email: undefined
              })
            }
          },
          error: null
        });
      }),
      signOut: jest.fn(function () {
        return Promise.resolve({
          error: null
        });
      }),
      getUser: jest.fn(function () {
        return Promise.resolve({
          data: {
            user: mockUser
          },
          error: null
        });
      }),
      onAuthStateChange: jest.fn(function () {
        return {
          data: {
            subscription: {}
          },
          unsubscribe: jest.fn()
        };
      })
    },
    from: jest.fn(function () {
      return {
        select: jest.fn(function () {
          return {
            data: [],
            error: null
          };
        }),
        insert: jest.fn(function () {
          return {
            data: null,
            error: null
          };
        }),
        update: jest.fn(function () {
          return {
            data: null,
            error: null
          };
        }),
        delete: jest.fn(function () {
          return {
            data: null,
            error: null
          };
        })
      };
    })
  };
  return {
    createClient: jest.fn(function () {
      return mockSupabaseClient;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
Object.defineProperty(global, 'navigator', {
  value: {
    onLine: true
  },
  writable: true,
  configurable: true
});
process.env.EXPO_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';
process.env.USE_SUPABASE_DATA = 'false';
process.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR = 'true';
global.testUtils = {
  TestDevice: undefined,
  mockFactories: undefined,
  testDataBuilders: undefined
};
var isMemoryOptimizationEnabled = true;
jest.setTimeout(5000);
var originalConsoleError = console.error;
console.error = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args[0] && typeof args[0] === 'string' && args[0].includes('Warning:')) {
    return;
  }
  originalConsoleError.apply(console, args);
};
beforeEach(function () {
  if (isMemoryOptimizationEnabled) {
    jest.clearAllTimers();
  }
});
afterEach((0, _asyncToGenerator2.default)(function* () {
  if (isMemoryOptimizationEnabled) {
    jest.clearAllMocks();
  }
}));
beforeAll(function () {
  process.env.NODE_ENV = 'test';
  process.env.JEST_TEST_ENVIRONMENT = 'true';
});
afterAll(function () {
  jest.clearAllMocks();
  jest.restoreAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,