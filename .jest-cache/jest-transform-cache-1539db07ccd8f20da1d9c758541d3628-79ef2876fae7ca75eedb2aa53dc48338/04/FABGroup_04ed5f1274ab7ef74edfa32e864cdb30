bba37b44c6106a488e0d4a45c0a1ac12
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FABGroup = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _FAB = _interopRequireDefault(require("./FAB"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _Card = _interopRequireDefault(require("../Card/Card"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
var FABGroup = function FABGroup(_ref) {
  var actions = _ref.actions,
    icon = _ref.icon,
    open = _ref.open,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    toggleStackOnLongPress = _ref.toggleStackOnLongPress,
    accessibilityLabel = _ref.accessibilityLabel,
    themeOverrides = _ref.theme,
    style = _ref.style,
    fabStyle = _ref.fabStyle,
    visible = _ref.visible,
    label = _ref.label,
    testID = _ref.testID,
    onStateChange = _ref.onStateChange,
    colorProp = _ref.color,
    _ref$delayLongPress = _ref.delayLongPress,
    delayLongPress = _ref$delayLongPress === void 0 ? 200 : _ref$delayLongPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    _ref$enableLongPressW = _ref.enableLongPressWhenStackOpened,
    enableLongPressWhenStackOpened = _ref$enableLongPressW === void 0 ? false : _ref$enableLongPressW,
    customBackdropColor = _ref.backdropColor,
    rippleColor = _ref.rippleColor;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _ref2 = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
    top = _ref2.top,
    bottom = _ref2.bottom,
    right = _ref2.right,
    left = _ref2.left;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
    backdrop = _React$useRef.current;
  var animations = React.useRef(actions.map(function () {
    return new _reactNative.Animated.Value(open ? 1 : 0);
  }));
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isClosingAnimationFinished = _React$useState2[0],
    setIsClosingAnimationFinished = _React$useState2[1];
  var _React$useState3 = React.useState(null),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    prevActions = _React$useState4[0],
    setPrevActions = _React$useState4[1];
  var scale = theme.animation.scale;
  var isV3 = theme.isV3;
  React.useEffect(function () {
    if (open) {
      setIsClosingAnimationFinished(false);
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 1,
        duration: 250 * scale,
        useNativeDriver: true
      }), _reactNative.Animated.stagger(isV3 ? 15 : 50 * scale, animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        });
      }).reverse())]).start();
    } else {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 0,
        duration: 200 * scale,
        useNativeDriver: true
      })].concat((0, _toConsumableArray2.default)(animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        });
      })))).start(function (_ref3) {
        var finished = _ref3.finished;
        if (finished) {
          setIsClosingAnimationFinished(true);
        }
      });
    }
  }, [open, actions, backdrop, scale, isV3]);
  var close = function close() {
    return onStateChange({
      open: false
    });
  };
  var toggle = function toggle() {
    return onStateChange({
      open: !open
    });
  };
  var handlePress = function handlePress(e) {
    onPress === null || onPress === void 0 || onPress(e);
    if (!toggleStackOnLongPress || open) {
      toggle();
    }
  };
  var handleLongPress = function handleLongPress(e) {
    if (!open || enableLongPressWhenStackOpened) {
      onLongPress === null || onLongPress === void 0 || onLongPress(e);
      if (toggleStackOnLongPress) {
        toggle();
      }
    }
  };
  var _ref4 = (0, _utils.getFABGroupColors)({
      theme: theme,
      customBackdropColor: customBackdropColor
    }),
    labelColor = _ref4.labelColor,
    backdropColor = _ref4.backdropColor,
    stackedFABBackgroundColor = _ref4.stackedFABBackgroundColor;
  var backdropOpacity = open ? backdrop.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [0, 1, 1]
  }) : backdrop;
  var opacities = animations.current;
  var scales = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 1;
  });
  var translations = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [24, -8]
    }) : -8;
  });
  var labelTranslations = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [8, -8]
    }) : -8;
  });
  var containerPaddings = {
    paddingBottom: bottom,
    paddingRight: right,
    paddingLeft: left,
    paddingTop: top
  };
  var actionsContainerVisibility = {
    display: isClosingAnimationFinished ? 'none' : 'flex'
  };
  if (actions.length !== (prevActions === null || prevActions === void 0 ? void 0 : prevActions.length)) {
    animations.current = actions.map(function (_, i) {
      return animations.current[i] || new _reactNative.Animated.Value(open ? 1 : 0);
    });
    setPrevActions(actions);
  }
  return React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: [styles.container, containerPaddings, style]
  }, React.createElement(AnimatedPressable, {
    accessibilityRole: "button",
    onPress: close,
    pointerEvents: open ? 'auto' : 'none',
    style: [styles.backdrop, {
      opacity: backdropOpacity,
      backgroundColor: backdropColor
    }]
  }), React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: styles.safeArea
  }, React.createElement(_reactNative.View, {
    pointerEvents: open ? 'box-none' : 'none',
    style: actionsContainerVisibility
  }, actions.map(function (it, i) {
    var _it$labelTextColor;
    var labelTextStyle = Object.assign({
      color: (_it$labelTextColor = it.labelTextColor) != null ? _it$labelTextColor : labelColor
    }, isV3 ? theme.fonts.titleMedium : {});
    var marginHorizontal = typeof it.size === 'undefined' || it.size === 'small' ? 24 : 16;
    var accessibilityLabel = typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label;
    var size = typeof it.size !== 'undefined' ? it.size : 'small';
    var handleActionPress = function handleActionPress(e) {
      it.onPress(e);
      close();
    };
    return React.createElement(_reactNative.View, {
      key: i,
      style: [styles.item, {
        marginHorizontal: marginHorizontal
      }, it.wrapperStyle],
      pointerEvents: open ? 'box-none' : 'none',
      accessibilityRole: "button",
      importantForAccessibility: open ? 'yes' : 'no-hide-descendants',
      accessibilityElementsHidden: !open,
      accessible: open,
      accessibilityLabel: accessibilityLabel
    }, it.label && React.createElement(_reactNative.View, null, React.createElement(_Card.default, {
      mode: isV3 ? 'contained' : 'elevated',
      onPress: handleActionPress,
      accessibilityHint: it.accessibilityHint,
      importantForAccessibility: "no-hide-descendants",
      accessibilityElementsHidden: true,
      style: [styles.containerStyle, {
        transform: [isV3 ? {
          translateY: labelTranslations[i]
        } : {
          scale: scales[i]
        }],
        opacity: opacities[i]
      }, isV3 && styles.v3ContainerStyle, it.containerStyle]
    }, React.createElement(_Text.default, {
      variant: "titleMedium",
      importantForAccessibility: "no-hide-descendants",
      accessibilityElementsHidden: true,
      style: [labelTextStyle, it.labelStyle],
      maxFontSizeMultiplier: it.labelMaxFontSizeMultiplier
    }, it.label))), React.createElement(_FAB.default, {
      size: size,
      icon: it.icon,
      color: it.color,
      style: [{
        transform: [{
          scale: scales[i]
        }],
        opacity: opacities[i],
        backgroundColor: stackedFABBackgroundColor
      }, isV3 && {
        transform: [{
          translateY: translations[i]
        }]
      }, it.style],
      accessibilityElementsHidden: true,
      theme: theme,
      onPress: handleActionPress,
      importantForAccessibility: "no-hide-descendants",
      testID: it.testID,
      visible: open,
      rippleColor: it.rippleColor
    }));
  })), React.createElement(_FAB.default, {
    onPress: handlePress,
    onLongPress: handleLongPress,
    delayLongPress: delayLongPress,
    icon: icon,
    color: colorProp,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: {
      expanded: open
    },
    style: [styles.fab, fabStyle],
    theme: theme,
    visible: visible,
    label: label,
    testID: testID,
    variant: variant,
    rippleColor: rippleColor
  })));
};
exports.FABGroup = FABGroup;
FABGroup.displayName = 'FAB.Group';
var _default = exports.default = FABGroup;
var styles = _reactNative.StyleSheet.create({
  safeArea: {
    alignItems: 'flex-end'
  },
  container: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'flex-end'
  }),
  fab: {
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 0
  },
  backdrop: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject),
  containerStyle: {
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  item: {
    marginBottom: 16,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center'
  },
  v3ContainerStyle: {
    backgroundColor: 'transparent',
    elevation: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,