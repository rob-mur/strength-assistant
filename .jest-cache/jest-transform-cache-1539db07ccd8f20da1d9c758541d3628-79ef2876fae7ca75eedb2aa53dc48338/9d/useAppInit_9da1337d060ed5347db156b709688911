3bc0462c777bd14f39f2fb2477498301
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAppInit = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jetbrainsMono = require("@expo-google-fonts/jetbrains-mono");
var _notoSans = require("@expo-google-fonts/noto-sans");
var _vectorIcons = require("@expo/vector-icons");
var _expoFont = require("expo-font");
var _expoRouter = require("expo-router");
var _react = require("react");
var _logger = require("@/lib/data/firebase/logger");
var _sync = require("@/lib/data/sync");
var useAppInit = exports.useAppInit = function useAppInit() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isAppReady = _useState2[0],
    setAppReady = _useState2[1];
  var _useFonts = (0, _expoFont.useFonts)(Object.assign({
      NotoSans_400Regular: _notoSans.NotoSans_400Regular,
      JetBrainsMono_400Regular: _jetbrainsMono.JetBrainsMono_400Regular
    }, _vectorIcons.MaterialCommunityIcons.font)),
    _useFonts2 = (0, _slicedToArray2.default)(_useFonts, 2),
    fontsLoaded = _useFonts2[0],
    fontError = _useFonts2[1];
  (0, _react.useEffect)(function () {
    if (fontError) {
      _logger.logger.error("Font loading error", {
        service: "App Init",
        platform: "React Native",
        operation: "font_loading",
        error: {
          message: fontError.message,
          stack: fontError.stack
        }
      });
      throw fontError;
    }
  }, [fontError]);
  (0, _react.useEffect)(function () {
    var prepare = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        var startTime = Date.now();
        _logger.logger.info("Starting app initialization", {
          service: "App Init",
          platform: "React Native",
          operation: "init"
        });
        try {
          _logger.logger.info("Initializing offline-first data layer...", {
            service: "App Init",
            platform: "React Native",
            operation: "data_layer_init"
          });
          yield (0, _sync.initializeDataLayer)();
          _logger.logger.info("Offline-first data layer initialized successfully", {
            service: "App Init",
            platform: "React Native",
            operation: "data_layer_init",
            duration: Date.now() - startTime
          });
        } catch (error) {
          _logger.logger.error("App initialization error", {
            service: "App Init",
            platform: "React Native",
            operation: "init",
            duration: Date.now() - startTime,
            error: {
              message: error.message,
              stack: error.stack
            }
          });
          if (typeof window !== 'undefined') {
            _logger.logger.warn("Web environment detected, continuing with degraded functionality for testing", {
              service: "App Init",
              platform: "React Native",
              operation: "init"
            });
          } else {
            _logger.logger.warn("App will continue with limited functionality", {
              service: "App Init",
              platform: "React Native",
              operation: "init"
            });
          }
        } finally {
          setAppReady(true);
          _logger.logger.info("App initialization complete", {
            service: "App Init",
            platform: "React Native",
            operation: "init",
            duration: Date.now() - startTime
          });
        }
      });
      return function prepare() {
        return _ref.apply(this, arguments);
      };
    }();
    prepare();
  }, []);
  (0, _react.useEffect)(function () {
    if (fontsLoaded && isAppReady) {
      _logger.logger.info("Fonts loaded and app ready, hiding splash screen", {
        service: "App Init",
        platform: "React Native",
        operation: "splash_screen"
      });
      _expoRouter.SplashScreen.hideAsync();
    }
  }, [fontsLoaded, isAppReady]);
  return fontsLoaded && isAppReady;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,