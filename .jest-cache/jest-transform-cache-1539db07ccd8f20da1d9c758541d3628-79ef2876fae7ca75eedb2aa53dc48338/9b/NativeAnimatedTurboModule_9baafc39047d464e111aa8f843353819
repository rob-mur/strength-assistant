dabe7fd57e70f25120935e50201fabf4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _shouldUseTurboAnimatedModule = _interopRequireDefault(require("../../../../Libraries/Animated/shouldUseTurboAnimatedModule"));
var TurboModuleRegistry = _interopRequireWildcard(require("../../../../Libraries/TurboModule/TurboModuleRegistry"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
var _default = exports.default = NativeModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2hvdWxkVXNlVHVyYm9BbmltYXRlZE1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiVHVyYm9Nb2R1bGVSZWdpc3RyeSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOYXRpdmVNb2R1bGUiLCJzaG91bGRVc2VUdXJib0FuaW1hdGVkTW9kdWxlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTmF0aXZlQW5pbWF0ZWRUdXJib01vZHVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7VHVyYm9Nb2R1bGV9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9UdXJib01vZHVsZS9SQ1RFeHBvcnQnO1xuXG5pbXBvcnQgc2hvdWxkVXNlVHVyYm9BbmltYXRlZE1vZHVsZSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvQW5pbWF0ZWQvc2hvdWxkVXNlVHVyYm9BbmltYXRlZE1vZHVsZSc7XG5pbXBvcnQgKiBhcyBUdXJib01vZHVsZVJlZ2lzdHJ5IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9UdXJib01vZHVsZS9UdXJib01vZHVsZVJlZ2lzdHJ5JztcblxudHlwZSBFbmRSZXN1bHQgPSB7ZmluaXNoZWQ6IGJvb2xlYW4sIHZhbHVlPzogbnVtYmVyLCAuLi59O1xudHlwZSBFbmRDYWxsYmFjayA9IChyZXN1bHQ6IEVuZFJlc3VsdCkgPT4gdm9pZDtcbnR5cGUgU2F2ZVZhbHVlQ2FsbGJhY2sgPSAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcblxuZXhwb3J0IHR5cGUgRXZlbnRNYXBwaW5nID0ge1xuICBuYXRpdmVFdmVudFBhdGg6IEFycmF5PHN0cmluZz4sXG4gIGFuaW1hdGVkVmFsdWVUYWc6ID9udW1iZXIsXG59O1xuXG4vLyBUaGUgY29uZmlnIGhhcyBkaWZmZXJlbnQga2V5cyBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgdGhlIE5vZGVcbi8vIFRPRE8oVDU0ODk2ODg4KTogTWFrZSB0aGVzZSB0eXBlcyBzdHJpY3RcbmV4cG9ydCB0eXBlIEFuaW1hdGVkTm9kZUNvbmZpZyA9IE9iamVjdDtcbmV4cG9ydCB0eXBlIEFuaW1hdGluZ05vZGVDb25maWcgPSBPYmplY3Q7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlYyBleHRlbmRzIFR1cmJvTW9kdWxlIHtcbiAgK3N0YXJ0T3BlcmF0aW9uQmF0Y2g6ICgpID0+IHZvaWQ7XG4gICtmaW5pc2hPcGVyYXRpb25CYXRjaDogKCkgPT4gdm9pZDtcbiAgK2NyZWF0ZUFuaW1hdGVkTm9kZTogKHRhZzogbnVtYmVyLCBjb25maWc6IEFuaW1hdGVkTm9kZUNvbmZpZykgPT4gdm9pZDtcbiAgK3VwZGF0ZUFuaW1hdGVkTm9kZUNvbmZpZz86ICh0YWc6IG51bWJlciwgY29uZmlnOiBBbmltYXRlZE5vZGVDb25maWcpID0+IHZvaWQ7XG4gICtnZXRWYWx1ZTogKHRhZzogbnVtYmVyLCBzYXZlVmFsdWVDYWxsYmFjazogU2F2ZVZhbHVlQ2FsbGJhY2spID0+IHZvaWQ7XG4gICtzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWU6ICh0YWc6IG51bWJlcikgPT4gdm9pZDtcbiAgK3N0b3BMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlOiAodGFnOiBudW1iZXIpID0+IHZvaWQ7XG4gICtjb25uZWN0QW5pbWF0ZWROb2RlczogKHBhcmVudFRhZzogbnVtYmVyLCBjaGlsZFRhZzogbnVtYmVyKSA9PiB2b2lkO1xuICArZGlzY29ubmVjdEFuaW1hdGVkTm9kZXM6IChwYXJlbnRUYWc6IG51bWJlciwgY2hpbGRUYWc6IG51bWJlcikgPT4gdm9pZDtcbiAgK3N0YXJ0QW5pbWF0aW5nTm9kZTogKFxuICAgIGFuaW1hdGlvbklkOiBudW1iZXIsXG4gICAgbm9kZVRhZzogbnVtYmVyLFxuICAgIGNvbmZpZzogQW5pbWF0aW5nTm9kZUNvbmZpZyxcbiAgICBlbmRDYWxsYmFjazogRW5kQ2FsbGJhY2ssXG4gICkgPT4gdm9pZDtcbiAgK3N0b3BBbmltYXRpb246IChhbmltYXRpb25JZDogbnVtYmVyKSA9PiB2b2lkO1xuICArc2V0QW5pbWF0ZWROb2RlVmFsdWU6IChub2RlVGFnOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gICtzZXRBbmltYXRlZE5vZGVPZmZzZXQ6IChub2RlVGFnOiBudW1iZXIsIG9mZnNldDogbnVtYmVyKSA9PiB2b2lkO1xuICArZmxhdHRlbkFuaW1hdGVkTm9kZU9mZnNldDogKG5vZGVUYWc6IG51bWJlcikgPT4gdm9pZDtcbiAgK2V4dHJhY3RBbmltYXRlZE5vZGVPZmZzZXQ6IChub2RlVGFnOiBudW1iZXIpID0+IHZvaWQ7XG4gICtjb25uZWN0QW5pbWF0ZWROb2RlVG9WaWV3OiAobm9kZVRhZzogbnVtYmVyLCB2aWV3VGFnOiBudW1iZXIpID0+IHZvaWQ7XG4gICtkaXNjb25uZWN0QW5pbWF0ZWROb2RlRnJvbVZpZXc6IChub2RlVGFnOiBudW1iZXIsIHZpZXdUYWc6IG51bWJlcikgPT4gdm9pZDtcbiAgK3Jlc3RvcmVEZWZhdWx0VmFsdWVzOiAobm9kZVRhZzogbnVtYmVyKSA9PiB2b2lkO1xuICArZHJvcEFuaW1hdGVkTm9kZTogKHRhZzogbnVtYmVyKSA9PiB2b2lkO1xuICArYWRkQW5pbWF0ZWRFdmVudFRvVmlldzogKFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBldmVudE1hcHBpbmc6IEV2ZW50TWFwcGluZyxcbiAgKSA9PiB2b2lkO1xuICArcmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3OiAoXG4gICAgdmlld1RhZzogbnVtYmVyLFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIGFuaW1hdGVkTm9kZVRhZzogbnVtYmVyLFxuICApID0+IHZvaWQ7XG5cbiAgLy8gRXZlbnRzXG4gICthZGRMaXN0ZW5lcjogKGV2ZW50TmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICArcmVtb3ZlTGlzdGVuZXJzOiAoY291bnQ6IG51bWJlcikgPT4gdm9pZDtcblxuICAvLyBBbGwgb2YgdGhlIGFib3ZlIGluIGEgYmF0Y2hlZCBtb2RlXG4gICtxdWV1ZUFuZEV4ZWN1dGVCYXRjaGVkT3BlcmF0aW9ucz86IChvcGVyYXRpb25zQW5kQXJnczogQXJyYXk8YW55PikgPT4gdm9pZDtcbn1cblxuY29uc3QgTmF0aXZlTW9kdWxlOiA/U3BlYyA9IHNob3VsZFVzZVR1cmJvQW5pbWF0ZWRNb2R1bGUoKVxuICA/IFR1cmJvTW9kdWxlUmVnaXN0cnkuZ2V0PFNwZWM+KCdOYXRpdmVBbmltYXRlZFR1cmJvTW9kdWxlJylcbiAgOiBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCBOYXRpdmVNb2R1bGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUEsSUFBQUEsNkJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFBNkYsU0FBQUUsd0JBQUFDLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFILHVCQUFBLFlBQUFBLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQTREN0YsSUFBTW1CLFlBQW1CLEdBQUcsSUFBQUMscUNBQTRCLEVBQUMsQ0FBQyxHQUN0RHZCLG1CQUFtQixDQUFDYyxHQUFHLENBQU8sMkJBQTJCLENBQUMsR0FDMUQsSUFBSTtBQUFDLElBQUFVLFFBQUEsR0FBQUMsT0FBQSxDQUFBYixPQUFBLEdBRU1VLFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=