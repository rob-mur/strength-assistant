16f89090a26ad28ca49f0c6e4d2bc8fe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ListAccordionGroupContext = void 0;
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var ListAccordionGroupContext = exports.ListAccordionGroupContext = React.createContext(null);
var ListAccordionGroup = function ListAccordionGroup(_ref) {
  var expandedIdProp = _ref.expandedId,
    onAccordionPress = _ref.onAccordionPress,
    children = _ref.children;
  var _React$useState = React.useState(undefined),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    expandedId = _React$useState2[0],
    setExpandedId = _React$useState2[1];
  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {
    setExpandedId(function (currentExpandedId) {
      return currentExpandedId === newExpandedId ? undefined : newExpandedId;
    });
  };
  return React.createElement(ListAccordionGroupContext.Provider, {
    value: {
      expandedId: expandedIdProp || expandedId,
      onAccordionPress: onAccordionPress || onAccordionPressDefault
    }
  }, children);
};
ListAccordionGroup.displayName = 'List.AccordionGroup';
var _default = exports.default = ListAccordionGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkxpc3RBY2NvcmRpb25Hcm91cENvbnRleHQiLCJleHBvcnRzIiwiY3JlYXRlQ29udGV4dCIsIkxpc3RBY2NvcmRpb25Hcm91cCIsIl9yZWYiLCJleHBhbmRlZElkUHJvcCIsImV4cGFuZGVkSWQiLCJvbkFjY29yZGlvblByZXNzIiwiY2hpbGRyZW4iLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsInVuZGVmaW5lZCIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJzZXRFeHBhbmRlZElkIiwib25BY2NvcmRpb25QcmVzc0RlZmF1bHQiLCJuZXdFeHBhbmRlZElkIiwiY3VycmVudEV4cGFuZGVkSWQiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9MaXN0L0xpc3RBY2NvcmRpb25Hcm91cC50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQStCLFNBQUFELHdCQUFBRSxDQUFBLEVBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFBO0VBQUEsUUFBQUosdUJBQUEsWUFBQUEsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQTtJQUFBLEtBQUFBLENB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