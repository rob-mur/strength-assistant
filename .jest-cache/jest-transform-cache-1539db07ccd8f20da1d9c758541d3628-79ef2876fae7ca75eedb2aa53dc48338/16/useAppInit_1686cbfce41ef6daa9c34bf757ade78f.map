{"version":3,"names":["_jetbrainsMono","require","_notoSans","_vectorIcons","_expoFont","_expoRouter","_react","_logger","_sync","useAppInit","exports","_useState","useState","_useState2","_slicedToArray2","default","isAppReady","setAppReady","_useFonts","useFonts","Object","assign","NotoSans_400Regular","JetBrainsMono_400Regular","MaterialCommunityIcons","font","_useFonts2","fontsLoaded","fontError","useEffect","logger","error","service","platform","operation","message","stack","prepare","_ref","_asyncToGenerator2","startTime","Date","now","info","initializeDataLayer","duration","window","warn","apply","arguments","SplashScreen","hideAsync"],"sources":["useAppInit.ts"],"sourcesContent":["import {\n\tJetBrainsMono_400Regular,\n} from \"@expo-google-fonts/jetbrains-mono\";\nimport { NotoSans_400Regular } from \"@expo-google-fonts/noto-sans\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { useFonts } from \"expo-font\";\nimport { SplashScreen } from \"expo-router\";\nimport { useEffect, useState } from \"react\";\n\nimport { logger } from \"@/lib/data/firebase/logger\";\nimport { initializeDataLayer } from \"@/lib/data/sync\";\n\nexport const useAppInit = () => {\n\tconst [isAppReady, setAppReady] = useState(false);\n\n\tconst [fontsLoaded, fontError] = useFonts({\n\t\tNotoSans_400Regular,\n\t\tJetBrainsMono_400Regular,\n\t\t...MaterialCommunityIcons.font,\n\t});\n\n\tuseEffect(() => {\n\t\tif (fontError) {\n\t\t\tlogger.error(\"Font loading error\", {\n\t\t\t\tservice: \"App Init\",\n\t\t\t\tplatform: \"React Native\",\n\t\t\t\toperation: \"font_loading\",\n\t\t\t\terror: {\n\t\t\t\t\tmessage: fontError.message,\n\t\t\t\t\tstack: fontError.stack\n\t\t\t\t}\n\t\t\t});\n\t\t\tthrow fontError;\n\t\t}\n\t}, [fontError]);\n\n\tuseEffect(() => {\n\t\tconst prepare = async () => {\n\t\t\tconst startTime = Date.now();\n\n\t\t\tlogger.info(\"Starting app initialization\", {\n\t\t\t\tservice: \"App Init\",\n\t\t\t\tplatform: \"React Native\",\n\t\t\t\toperation: \"init\"\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tlogger.info(\"Initializing offline-first data layer...\", {\n\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\toperation: \"data_layer_init\"\n\t\t\t\t});\n\n\t\t\t\tawait initializeDataLayer();\n\n\t\t\t\tlogger.info(\"Offline-first data layer initialized successfully\", {\n\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\toperation: \"data_layer_init\",\n\t\t\t\t\tduration: Date.now() - startTime\n\t\t\t\t});\n\t\t\t} catch (error: any) {\n\t\t\t\tlogger.error(\"App initialization error\", {\n\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\toperation: \"init\",\n\t\t\t\t\tduration: Date.now() - startTime,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// In web/Chrome testing environments, continue with degraded functionality\n\t\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\t\tlogger.warn(\"Web environment detected, continuing with degraded functionality for testing\", {\n\t\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\t\toperation: \"init\"\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"App will continue with limited functionality\", {\n\t\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\t\toperation: \"init\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tsetAppReady(true);\n\t\t\t\tlogger.info(\"App initialization complete\", {\n\t\t\t\t\tservice: \"App Init\",\n\t\t\t\t\tplatform: \"React Native\",\n\t\t\t\t\toperation: \"init\",\n\t\t\t\t\tduration: Date.now() - startTime\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tprepare();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (fontsLoaded && isAppReady) {\n\t\t\tlogger.info(\"Fonts loaded and app ready, hiding splash screen\", {\n\t\t\t\tservice: \"App Init\",\n\t\t\t\tplatform: \"React Native\",\n\t\t\t\toperation: \"splash_screen\"\n\t\t\t});\n\t\t\tSplashScreen.hideAsync();\n\t\t}\n\t}, [fontsLoaded, isAppReady]);\n\n\treturn fontsLoaded && isAppReady;\n};\n"],"mappings":"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","ignoreList":[]}