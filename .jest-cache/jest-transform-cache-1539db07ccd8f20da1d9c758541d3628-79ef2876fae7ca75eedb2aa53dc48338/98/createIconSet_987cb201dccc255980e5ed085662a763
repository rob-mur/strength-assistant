4cfc79c6054fcc1196d7fd11726be1c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_ICON_COLOR", {
  enumerable: true,
  get: function get() {
    return _createIconSet.DEFAULT_ICON_COLOR;
  }
});
Object.defineProperty(exports, "DEFAULT_ICON_SIZE", {
  enumerable: true,
  get: function get() {
    return _createIconSet.DEFAULT_ICON_SIZE;
  }
});
exports.default = _default;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var Font = _interopRequireWildcard(require("expo-font"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _createIconSet = _interopRequireWildcard(require("./vendor/react-native-vector-icons/lib/create-icon-set"));
var _iconButton = _interopRequireDefault(require("./vendor/react-native-vector-icons/lib/icon-button"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _default(glyphMap, fontName, expoAssetId, fontStyle) {
  var _Icon;
  var font = (0, _defineProperty2.default)({}, fontName, expoAssetId);
  var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName, null, fontStyle);
  return _Icon = function (_React$Component) {
    function Icon() {
      var _this;
      (0, _classCallCheck2.default)(this, Icon);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, Icon, [].concat(args));
      _this._mounted = false;
      _this.state = {
        fontIsLoaded: Font.isLoaded(fontName)
      };
      return _this;
    }
    (0, _inherits2.default)(Icon, _React$Component);
    return (0, _createClass2.default)(Icon, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = (0, _asyncToGenerator2.default)(function* () {
          this._mounted = true;
          if (!this.state.fontIsLoaded) {
            yield Font.loadAsync(font);
            this._mounted && this.setState({
              fontIsLoaded: true
            });
          }
        });
        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }
        return componentDidMount;
      }()
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._icon) {
          this._icon.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {
          console.warn(`"${this.props.name}" is not a valid icon name for family "${fontName}"`);
        }
        if (!this.state.fontIsLoaded) {
          return (0, _jsxRuntime.jsx)(_reactNative.Text, {});
        }
        return (0, _jsxRuntime.jsx)(RNVIconComponent, Object.assign({
          ref: function ref(view) {
            _this2._icon = view;
          }
        }, this.props));
      }
    }]);
  }(_react.default.Component), _Icon.defaultProps = RNVIconComponent.defaultProps, _Icon.Button = (0, _iconButton.default)(_Icon), _Icon.glyphMap = glyphMap, _Icon.getRawGlyphMap = function () {
    return glyphMap;
  }, _Icon.getFontFamily = function () {
    return fontName;
  }, _Icon.loadFont = function () {
    return Font.loadAsync(font);
  }, _Icon.font = font, _Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,