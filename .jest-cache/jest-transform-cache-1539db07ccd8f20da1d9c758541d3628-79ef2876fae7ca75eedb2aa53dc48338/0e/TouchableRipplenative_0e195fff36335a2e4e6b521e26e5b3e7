afb7ae084b6ab108e41e0a75c5024bb4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["style", "background", "borderless", "disabled", "rippleColor", "underlayColor", "children", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Pressable = require("./Pressable");
var _utils = require("./utils");
var _settings = require("../../core/settings");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _hasTouchHandler = _interopRequireDefault(require("../../utils/hasTouchHandler"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_VERSION_PIE = 28;
var _TouchableRipple = function TouchableRipple(_ref, ref) {
  var style = _ref.style,
    background = _ref.background,
    _ref$borderless = _ref.borderless,
    borderless = _ref$borderless === void 0 ? false : _ref$borderless,
    disabledProp = _ref.disabled,
    rippleColor = _ref.rippleColor,
    underlayColor = _ref.underlayColor,
    children = _ref.children,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _React$useContext = React.useContext(_settings.SettingsContext),
    rippleEffectEnabled = _React$useContext.rippleEffectEnabled;
  var onPress = rest.onPress,
    onLongPress = rest.onLongPress,
    onPressIn = rest.onPressIn,
    onPressOut = rest.onPressOut;
  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut
  });
  var disabled = disabledProp || !hasPassedTouchHandler;
  var _ref2 = (0, _utils.getTouchableRippleColors)({
      theme: theme,
      rippleColor: rippleColor,
      underlayColor: underlayColor
    }),
    calculatedRippleColor = _ref2.calculatedRippleColor,
    calculatedUnderlayColor = _ref2.calculatedUnderlayColor;
  var useForeground = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_PIE && borderless;
  if (_TouchableRipple.supported) {
    var androidRipple = rippleEffectEnabled ? background != null ? background : {
      color: calculatedRippleColor,
      borderless: borderless,
      foreground: useForeground
    } : undefined;
    return React.createElement(_Pressable.Pressable, _extends({}, rest, {
      ref: ref,
      disabled: disabled,
      style: [borderless && styles.overflowHidden, style],
      android_ripple: androidRipple
    }), React.Children.only(children));
  }
  return React.createElement(_Pressable.Pressable, _extends({}, rest, {
    ref: ref,
    disabled: disabled,
    style: [borderless && styles.overflowHidden, style]
  }), function (_ref3) {
    var pressed = _ref3.pressed;
    return React.createElement(React.Fragment, null, pressed && rippleEffectEnabled && React.createElement(_reactNative.View, {
      testID: "touchable-ripple-underlay",
      style: [styles.underlay, {
        backgroundColor: calculatedUnderlayColor
      }]
    }), React.Children.only(children));
  });
};
_TouchableRipple.supported = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
var styles = _reactNative.StyleSheet.create({
  overflowHidden: {
    overflow: 'hidden'
  },
  underlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {
    zIndex: 2
  })
});
var Component = (0, _forwardRef.forwardRef)(_TouchableRipple);
var _default = exports.default = Component;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9QcmVzc2FibGUiLCJfdXRpbHMiLCJfc2V0dGluZ3MiLCJfdGhlbWluZyIsIl9mb3J3YXJkUmVmIiwiX2hhc1RvdWNoSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsIkFORFJPSURfVkVSU0lPTl9MT0xMSVBPUCIsIkFORFJPSURfVkVSU0lPTl9QSUUiLCJUb3VjaGFibGVSaXBwbGUiLCJfcmVmIiwicmVmIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwiX3JlZiRib3JkZXJsZXNzIiwiYm9yZGVybGVzcyIsImRpc2FibGVkUHJvcCIsImRpc2FibGVkIiwicmlwcGxlQ29sb3IiLCJ1bmRlcmxheUNvbG9yIiwiY2hpbGRyZW4iLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwicmVzdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZXhjbHVkZWQiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiX1JlYWN0JHVzZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiU2V0dGluZ3NDb250ZXh0IiwicmlwcGxlRWZmZWN0RW5hYmxlZCIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsIm9uUHJlc3NJbiIsIm9uUHJlc3NPdXQiLCJoYXNQYXNzZWRUb3VjaEhhbmRsZXIiLCJfcmVmMiIsImdldFRvdWNoYWJsZVJpcHBsZUNvbG9ycyIsImNhbGN1bGF0ZWRSaXBwbGVDb2xvciIsImNhbGN1bGF0ZWRVbmRlcmxheUNvbG9yIiwidXNlRm9yZWdyb3VuZCIsIlBsYXRmb3JtIiwiT1MiLCJWZXJzaW9uIiwic3VwcG9ydGVkIiwiYW5kcm9pZFJpcHBsZSIsImNvbG9yIiwiZm9yZWdyb3VuZCIsInVuZGVmaW5lZCIsImNyZWF0ZUVsZW1lbnQiLCJQcmVzc2FibGUiLCJzdHlsZXMiLCJvdmVyZmxvd0hpZGRlbiIsImFuZHJvaWRfcmlwcGxlIiwiQ2hpbGRyZW4iLCJvbmx5IiwiX3JlZjMiLCJwcmVzc2VkIiwiRnJhZ21lbnQiLCJWaWV3IiwidGVzdElEIiwidW5kZXJsYXkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwib3ZlcmZsb3ciLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJ6SW5kZXgiLCJDb21wb25lbnQiLCJmb3J3YXJkUmVmIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVG91Y2hhYmxlUmlwcGxlL1RvdWNoYWJsZVJpcHBsZS5uYXRpdmUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFZQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxTQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxnQkFBQSxHQUFBQyxzQkFBQSxDQUFBUixPQUFBO0FBQTBELFNBQUFRLHVCQUFBQyxDQUFBO0VBQUEsT0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUFBLFNBQUFWLHdCQUFBVSxDQUFBLEVB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