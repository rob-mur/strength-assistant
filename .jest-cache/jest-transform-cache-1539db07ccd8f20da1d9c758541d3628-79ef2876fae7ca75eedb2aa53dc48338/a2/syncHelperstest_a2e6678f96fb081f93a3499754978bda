dc6a5af1a03e5cf0a65d30ce78bec7a0
_getJestObj().mock("@/lib/data/supabase/SupabaseClient", function () {
  return {
    supabaseClient: {
      getCurrentUser: jest.fn(),
      getSupabaseClient: jest.fn()
    }
  };
});
_getJestObj().mock("@/lib/data/store", function () {
  return {
    exercises$: {
      get: jest.fn().mockReturnValue([]),
      set: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _syncConfig = require("@/lib/data/sync/syncConfig");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("syncHelpers", function () {
  afterEach(function () {
    delete global.navigator;
  });
  describe("isSyncing", function () {
    test("returns false by default", function () {
      expect(_syncConfig.syncHelpers.isSyncing()).toBe(false);
    });
  });
  describe("isOnline", function () {
    test("returns true when navigator.onLine is true", function () {
      global.navigator = {
        onLine: true
      };
      expect(_syncConfig.syncHelpers.isOnline()).toBe(true);
    });
    test("returns false when navigator.onLine is false", function () {
      global.navigator = {
        onLine: false
      };
      expect(_syncConfig.syncHelpers.isOnline()).toBe(false);
    });
    test("returns true when navigator is undefined", function () {
      expect(_syncConfig.syncHelpers.isOnline()).toBe(true);
    });
    test("returns true when navigator.onLine is undefined", function () {
      global.navigator = {};
      expect(_syncConfig.syncHelpers.isOnline()).toBe(true);
    });
  });
  describe("getPendingChangesCount", function () {
    test("returns 0 by default", function () {
      expect(_syncConfig.syncHelpers.getPendingChangesCount()).toBe(0);
    });
  });
  describe("hasErrors", function () {
    test("returns false by default", function () {
      expect(_syncConfig.syncHelpers.hasErrors()).toBe(false);
    });
  });
  describe("getErrorMessage", function () {
    test("returns undefined by default", function () {
      expect(_syncConfig.syncHelpers.getErrorMessage()).toBeUndefined();
    });
  });
  describe("forceSync", function () {
    test("executes without throwing when user is not authenticated", (0, _asyncToGenerator2.default)(function* () {
      var _require = require("@/lib/data/supabase/SupabaseClient"),
        supabaseClient = _require.supabaseClient;
      supabaseClient.getCurrentUser.mockResolvedValue(null);
      yield expect(_syncConfig.syncHelpers.forceSync()).resolves.not.toThrow();
    }));
    test("handles errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require("@/lib/data/supabase/SupabaseClient"),
        supabaseClient = _require2.supabaseClient;
      var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
      supabaseClient.getCurrentUser.mockRejectedValue(new Error("Auth failed"));
      yield expect(_syncConfig.syncHelpers.forceSync()).resolves.not.toThrow();
      expect(consoleErrorSpy).toHaveBeenCalledWith('Failed to force sync:', expect.any(Error));
      consoleErrorSpy.mockRestore();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,