{"version":3,"names":["EventEmitter","exports","_classCallCheck2","default","_createClass2","key","value","addListener","eventName","listener","_this$listeners","_this$listeners3","_this","listeners","Map","has","_this$listeners2","set","Set","previousListenerCount","listenerCount","get","add","startObserving","remove","removeListener","_this$listeners4","hasRemovedListener","delete","stopObserving","removeAllListeners","_this$listeners5","clear","emit","_this$listeners6","_len","arguments","length","args","Array","_key","forEach","apply","error","console","_this$listeners$get$s","_this$listeners7","size","NativeModule","_ref","_callSuper","_inherits2","SharedObject","_ref2","release","SharedRef","_ref3","_this2","_len2","_key2","concat","nativeRefType"],"sources":["CoreModule.ts"],"sourcesContent":["import {\n  type EventEmitter as EventEmitterType,\n  type EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport type { SharedRef as SharedRefType } from '../ts-declarations/SharedRef';\n\nexport class EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n\n    const previousListenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.add(listener);\n\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.clear();\n    if (previousListenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    const listeners = new Set(this.listeners?.get(eventName));\n\n    listeners.forEach((listener) => {\n      // When the listener throws an error, don't stop the execution of subsequent listeners and\n      // don't propagate the error to the `emit` function. The motivation behind this is that\n      // errors thrown from a module or user's code shouldn't affect other modules' behavior.\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n\n  startObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n\n  stopObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototypes?: { [viewName: string]: object };\n  __expo_module_name__?: string;\n}\n\nexport class SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    // no-op on Web, but subclasses can override it if needed.\n  }\n}\n\nexport class SharedRef<\n    TNativeRefType extends string = 'unknown',\n    TEventsMap extends EventsMap = Record<never, never>,\n  >\n  extends SharedObject<TEventsMap>\n  implements SharedRefType<TNativeRefType>\n{\n  nativeRefType: string = 'unknown';\n}\n"],"mappings":"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","ignoreList":[]}