302285560750a3acc96b71b57edef6b5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = exports.FirebaseLogger = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var FirebaseLogger = exports.FirebaseLogger = function () {
  function FirebaseLogger() {
    (0, _classCallCheck2.default)(this, FirebaseLogger);
  }
  return (0, _createClass2.default)(FirebaseLogger, [{
    key: "createMessage",
    value: function createMessage(level, message, context) {
      var prefix = `[${context.service}${context.platform ? ` ${context.platform}` : ''}]`;
      return `${prefix} ${message}`;
    }
  }, {
    key: "logWithContext",
    value: function logWithContext(level, message, context) {
      var formattedMessage = this.createMessage(level, message, context);
      if (level === 'error') {
        console.error(formattedMessage, context);
      } else if (level === 'warn') {
        console.warn(formattedMessage, context);
      } else {
        console.log(formattedMessage, context);
      }
    }
  }, {
    key: "debug",
    value: function debug(message, context) {
      this.logWithContext('log', message, context);
    }
  }, {
    key: "info",
    value: function info(message, context) {
      this.logWithContext('log', message, context);
    }
  }, {
    key: "warn",
    value: function warn(message, context) {
      this.logWithContext('warn', message, context);
    }
  }, {
    key: "error",
    value: function error(message, context) {
      this.logWithContext('error', message, context);
    }
  }]);
}();
var logger = exports.logger = new FirebaseLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaXJlYmFzZUxvZ2dlciIsImV4cG9ydHMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImNyZWF0ZU1lc3NhZ2UiLCJsZXZlbCIsIm1lc3NhZ2UiLCJjb250ZXh0IiwicHJlZml4Iiwic2VydmljZSIsInBsYXRmb3JtIiwibG9nV2l0aENvbnRleHQiLCJmb3JtYXR0ZWRNZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwid2FybiIsImxvZyIsImRlYnVnIiwiaW5mbyIsImxvZ2dlciJdLCJzb3VyY2VzIjpbImxvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIExvZ0NvbnRleHQge1xuXHRzZXJ2aWNlOiBzdHJpbmc7XG5cdHBsYXRmb3JtOiBzdHJpbmc7XG5cdG9wZXJhdGlvbj86IHN0cmluZztcblx0ZHVyYXRpb24/OiBudW1iZXI7XG5cdGNvbmZpZz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXHRlbXVsYXRvcj86IHtcblx0XHRob3N0OiBzdHJpbmc7XG5cdFx0cG9ydDogbnVtYmVyO1xuXHR9O1xuXHRlcnJvcj86IHtcblx0XHRtZXNzYWdlOiBzdHJpbmc7XG5cdFx0Y29kZT86IHN0cmluZztcblx0XHRzdGFjaz86IHN0cmluZztcblx0fTtcbn1cblxuZXhwb3J0IGNsYXNzIEZpcmViYXNlTG9nZ2VyIHtcblx0cHJpdmF0ZSBjcmVhdGVNZXNzYWdlKGxldmVsOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgY29udGV4dDogTG9nQ29udGV4dCk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcHJlZml4ID0gYFske2NvbnRleHQuc2VydmljZX0ke2NvbnRleHQucGxhdGZvcm0gPyBgICR7Y29udGV4dC5wbGF0Zm9ybX1gIDogJyd9XWA7XG5cdFx0cmV0dXJuIGAke3ByZWZpeH0gJHttZXNzYWdlfWA7XG5cdH1cblxuXHRwcml2YXRlIGxvZ1dpdGhDb250ZXh0KGxldmVsOiAnbG9nJyB8ICd3YXJuJyB8ICdlcnJvcicsIG1lc3NhZ2U6IHN0cmluZywgY29udGV4dDogTG9nQ29udGV4dCk6IHZvaWQge1xuXHRcdGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSB0aGlzLmNyZWF0ZU1lc3NhZ2UobGV2ZWwsIG1lc3NhZ2UsIGNvbnRleHQpO1xuXHRcdFxuXHRcdGlmIChsZXZlbCA9PT0gJ2Vycm9yJykge1xuXHRcdFx0Y29uc29sZS5lcnJvcihmb3JtYXR0ZWRNZXNzYWdlLCBjb250ZXh0KTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSAnd2FybicpIHtcblx0XHRcdGNvbnNvbGUud2Fybihmb3JtYXR0ZWRNZXNzYWdlLCBjb250ZXh0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2coZm9ybWF0dGVkTWVzc2FnZSwgY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cblx0ZGVidWcobWVzc2FnZTogc3RyaW5nLCBjb250ZXh0OiBMb2dDb250ZXh0KTogdm9pZCB7XG5cdFx0dGhpcy5sb2dXaXRoQ29udGV4dCgnbG9nJywgbWVzc2FnZSwgY29udGV4dCk7XG5cdH1cblxuXHRpbmZvKG1lc3NhZ2U6IHN0cmluZywgY29udGV4dDogTG9nQ29udGV4dCk6IHZvaWQge1xuXHRcdHRoaXMubG9nV2l0aENvbnRleHQoJ2xvZycsIG1lc3NhZ2UsIGNvbnRleHQpO1xuXHR9XG5cblx0d2FybihtZXNzYWdlOiBzdHJpbmcsIGNvbnRleHQ6IExvZ0NvbnRleHQpOiB2b2lkIHtcblx0XHR0aGlzLmxvZ1dpdGhDb250ZXh0KCd3YXJuJywgbWVzc2FnZSwgY29udGV4dCk7XG5cdH1cblxuXHRlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGNvbnRleHQ6IExvZ0NvbnRleHQpOiB2b2lkIHtcblx0XHR0aGlzLmxvZ1dpdGhDb250ZXh0KCdlcnJvcicsIG1lc3NhZ2UsIGNvbnRleHQpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgRmlyZWJhc2VMb2dnZXIoKTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFpQmFBLGNBQWMsR0FBQUMsT0FBQSxDQUFBRCxjQUFBO0VBQUEsU0FBQUEsZUFBQTtJQUFBLElBQUFFLGdCQUFBLENBQUFDLE9BQUEsUUFBQUgsY0FBQTtFQUFBO0VBQUEsV0FBQUksYUFBQSxDQUFBRCxPQUFBLEVBQUFILGNBQUE7SUFBQUssR0FBQTtJQUFBQyxLQUFBLEVBQzFCLFNBQVFDLGFBQWFBLENBQUNDLEtBQWEsRUFBRUMsT0FBZSxFQUFFQyxPQUFtQixFQUFVO01BQ2xGLElBQU1DLE1BQU0sR0FBRyxJQUFJRCxPQUFPLENBQUNFLE9BQU8sR0FBR0YsT0FBTyxDQUFDRyxRQUFRLEdBQUcsSUFBSUgsT0FBTyxDQUFDRyxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUc7TUFDdEYsT0FBTyxHQUFHRixNQUFNLElBQUlGLE9BQU8sRUFBRTtJQUM5QjtFQUFDO0lBQUFKLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQVFRLGNBQWNBLENBQUNOLEtBQStCLEVBQUVDLE9BQWUsRUFBRUMsT0FBbUIsRUFBUTtNQUNuRyxJQUFNSyxnQkFBZ0IsR0FBRyxJQUFJLENBQUNSLGFBQWEsQ0FBQ0MsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sQ0FBQztNQUVwRSxJQUFJRixLQUFLLEtBQUssT0FBTyxFQUFFO1FBQ3RCUSxPQUFPLENBQUNDLEtBQUssQ0FBQ0YsZ0JBQWdCLEVBQUVMLE9BQU8sQ0FBQztNQUN6QyxDQUFDLE1BQU0sSUFBSUYsS0FBSyxLQUFLLE1BQU0sRUFBRTtRQUM1QlEsT0FBTyxDQUFDRSxJQUFJLENBQUNILGdCQUFnQixFQUFFTCxPQUFPLENBQUM7TUFDeEMsQ0FBQyxNQUFNO1FBQ05NLE9BQU8sQ0FBQ0csR0FBRyxDQUFDSixnQkFBZ0IsRUFBRUwsT0FBTyxDQUFDO01BQ3ZDO0lBQ0Q7RUFBQztJQUFBTCxHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBYyxLQUFLQSxDQUFDWCxPQUFlLEVBQUVDLE9BQW1CLEVBQVE7TUFDakQsSUFBSSxDQUFDSSxjQUFjLENBQUMsS0FBSyxFQUFFTCxPQUFPLEVBQUVDLE9BQU8sQ0FBQztJQUM3QztFQUFDO0lBQUFMLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFlLElBQUlBLENBQUNaLE9BQWUsRUFBRUMsT0FBbUIsRUFBUTtNQUNoRCxJQUFJLENBQUNJLGNBQWMsQ0FBQyxLQUFLLEVBQUVMLE9BQU8sRUFBRUMsT0FBTyxDQUFDO0lBQzdDO0VBQUM7SUFBQUwsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQVksSUFBSUEsQ0FBQ1QsT0FBZSxFQUFFQyxPQUFtQixFQUFRO01BQ2hELElBQUksQ0FBQ0ksY0FBYyxDQUFDLE1BQU0sRUFBRUwsT0FBTyxFQUFFQyxPQUFPLENBQUM7SUFDOUM7RUFBQztJQUFBTCxHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBVyxLQUFLQSxDQUFDUixPQUFlLEVBQUVDLE9BQW1CLEVBQVE7TUFDakQsSUFBSSxDQUFDSSxjQUFjLENBQUMsT0FBTyxFQUFFTCxPQUFPLEVBQUVDLE9BQU8sQ0FBQztJQUMvQztFQUFDO0FBQUE7QUFHSyxJQUFNWSxNQUFNLEdBQUFyQixPQUFBLENBQUFxQixNQUFBLEdBQUcsSUFBSXRCLGNBQWMsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119