b9dd6d38fdc6864e1d9c3f6ea9add9b5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;
exports.default = createIconSet;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ensureNativeModuleAvailable = _interopRequireDefault(require("./ensure-native-module-available"));
var _createIconSourceCache = _interopRequireDefault(require("./create-icon-source-cache"));
var _iconButton = _interopRequireDefault(require("./icon-button"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["name", "size", "color", "style", "children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var NativeIconAPI = exports.NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
var DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_SIZE = 12;
var DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_COLOR = 'black';
function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
  var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;
  var fontReference = _reactNative.Platform.select({
    windows: `/Assets/${fontFile}#${fontFamily}`,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily
  });
  var Icon = function (_PureComponent) {
    function Icon() {
      var _this;
      (0, _classCallCheck2.default)(this, Icon);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, Icon, [].concat(args));
      _this.root = null;
      return _this;
    }
    (0, _inherits2.default)(Icon, _PureComponent);
    return (0, _createClass2.default)(Icon, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          name = _this$props.name,
          size = _this$props.size,
          color = _this$props.color,
          style = _this$props.style,
          children = _this$props.children,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var glyph = name ? glyphMap[name] || '?' : '';
        if (typeof glyph === 'number') {
          glyph = String.fromCodePoint(glyph);
        }
        var styleDefaults = {
          fontSize: size,
          color: color
        };
        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal'
        };
        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
        return (0, _jsxRuntime.jsxs)(_reactNative.Text, Object.assign({
          selectable: false
        }, props, {
          children: [glyph, children]
        }));
      }
    }]);
  }(_react.PureComponent);
  Icon.defaultProps = {
    size: DEFAULT_ICON_SIZE,
    allowFontScaling: false
  };
  var imageSourceCache = (0, _createIconSourceCache.default)();
  function resolveGlyph(name) {
    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }
  function getImageSourceSync(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
    (0, _ensureNativeModuleAvailable.default)();
    var glyph = resolveGlyph(name);
    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);
      var value = {
        uri: imagePath,
        scale: _reactNative.PixelRatio.get()
      };
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error) {
      imageSourceCache.setError(cacheKey, error);
      throw error;
    }
  }
  function getImageSource(_x) {
    return _getImageSource.apply(this, arguments);
  }
  function _getImageSource() {
    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = resolveGlyph(name);
      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = `${glyph}:${size}:${processedColor}`;
      if (imageSourceCache.has(cacheKey)) {
        return imageSourceCache.get(cacheKey);
      }
      try {
        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);
        var value = {
          uri: imagePath,
          scale: _reactNative.PixelRatio.get()
        };
        imageSourceCache.setValue(cacheKey, value);
        return value;
      } catch (error) {
        imageSourceCache.setError(cacheKey, error);
        throw error;
      }
    });
    return _getImageSource.apply(this, arguments);
  }
  function loadFont() {
    return _loadFont.apply(this, arguments);
  }
  function _loadFont() {
    _loadFont = (0, _asyncToGenerator2.default)(function* () {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();
        if (!file) {
          throw new Error('Unable to load font, because no file was specified. ');
        }
        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));
      }
    });
    return _loadFont.apply(this, arguments);
  }
  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }
  function getRawGlyphMap() {
    return glyphMap;
  }
  function getFontFamily() {
    return fontReference;
  }
  Icon.Button = (0, _iconButton.default)(Icon);
  Icon.getImageSource = getImageSource;
  Icon.getImageSourceSync = getImageSourceSync;
  Icon.loadFont = loadFont;
  Icon.hasIcon = hasIcon;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.getFontFamily = getFontFamily;
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,