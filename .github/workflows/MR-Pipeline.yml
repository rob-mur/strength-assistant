name: MR Pipeline

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev
          - prod-apk
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  test:
    needs: check-skip
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: 📦 Setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.lock') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧪 Run TypeScript check
        run: npx tsc

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 🎨 Run Prettier check
        run: npm run format:check

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Get yarn cache directory path
        id: npm-cache-dir-path
        run: echo "dir=$()" >> $GITHUB_OUTPUT

      - name: 📦 Setup yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.lock') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: |
          yarn install
          yarn global add eas-cli@latest

      - name: 📱 Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: 🔄 Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: 📱 Build Development APK
        run: |
          # Build with increased memory limit
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile development --local --non-interactive --output=./app-dev.apk

      - name: 📱 Build Preview APK (no dev server)
        run: |
          # Build with increased memory limit
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile preview --local --non-interactive --output=./app-release.apk

      - name: 📦 Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-dev.apk
            ./app-release.apk
          retention-days: 7

  run_android_e2e:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: # only these combinations work stable on `ubuntu-*`:
        # api-level: [26, 27, 28]
        # arch: [x86, x86_64]
        # target: [default]
        # Print all available Android emulators: `sdkmanager --list --verbose | grep system-images`
        include:
          - api-level: 26
            target: google_apis
            arch: x86

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-builds

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Install Maestro
        run: MAESTRO_VERSION=1.30.4 curl -Ls 'https://get.maestro.mobile.dev' | bash

      - name: Run Maestro E2E tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          cores: 2
          ram-size: 2048M
          force-avd-creation: false
          emulator-boot-timeout: 900 # 15min
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
          script: |
            # check memory usage
            npx envinfo

            # verify emulator is running
            adb devices

            # Install app
            adb install app-release.apk || (adb kill-server && adb start-server && adb devices && adb install app-release.apk)

            # Run e2e
            maestro test .maestro/android/*

