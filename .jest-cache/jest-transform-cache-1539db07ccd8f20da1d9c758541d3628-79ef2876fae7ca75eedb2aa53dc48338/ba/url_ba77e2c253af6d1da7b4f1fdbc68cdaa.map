{"version":3,"names":["_whatwgUrlWithoutUnicode","require","isSetup","BLOB_URL_PREFIX","getBlobUrlPrefix","BlobModule","globalThis","RN$Bridgeless","nativeModuleProxy","__turboModuleProxy","constants","getConstants","BLOB_URI_SCHEME","encodeURIComponent","BLOB_URI_HOST","URL","createObjectURL","blob","Error","data","blobId","offset","size","revokeObjectURL","_url","canParse","url","base","_unused"],"sources":["url.ts"],"sourcesContent":["/**\n * Copyright © 2023-present 650 Industries, Inc. (aka Expo)\n * Copyright © Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This file should not import `react-native` in order to remain self-contained.\n\n/// <reference path=\"../ts-declarations/whatwg-url-without-unicode.d.ts\" />\nimport { URL, URLSearchParams } from 'whatwg-url-without-unicode';\n\ndeclare namespace globalThis {\n  const RN$Bridgeless: undefined | boolean;\n  const nativeModuleProxy: Record<string, unknown>;\n  function __turboModuleProxy(name: string): unknown;\n}\n\n// TODO(@kitten): Provide BlobModule types matching native module\ninterface NativeBlobModule {\n  BLOB_URI_SCHEME: string;\n  BLOB_URI_HOST: string;\n}\ninterface TurboBlobModule {\n  getConstants(): {\n    BLOB_URI_SCHEME: string;\n    BLOB_URI_HOST: string;\n  };\n}\n\nlet isSetup = false;\nlet BLOB_URL_PREFIX: string | null = null;\n\nfunction getBlobUrlPrefix() {\n  if (isSetup) return BLOB_URL_PREFIX;\n  isSetup = true;\n  // if iOS: let BLOB_URL_PREFIX = 'blob:'\n\n  // Pull the blob module without importing React Native.\n  const BlobModule =\n    globalThis.RN$Bridgeless !== true\n      ? // Legacy RN implementation\n        (globalThis.nativeModuleProxy['BlobModule'] as NativeBlobModule)\n      : // Newer RN implementation\n        (globalThis.__turboModuleProxy('BlobModule') as TurboBlobModule);\n\n  const constants = 'BLOB_URI_SCHEME' in BlobModule ? BlobModule : BlobModule.getConstants();\n\n  if (constants && typeof constants.BLOB_URI_SCHEME === 'string') {\n    BLOB_URL_PREFIX = encodeURIComponent(constants.BLOB_URI_SCHEME) + ':';\n    if (typeof constants.BLOB_URI_HOST === 'string') {\n      BLOB_URL_PREFIX += `//${encodeURIComponent(constants.BLOB_URI_HOST)}/`;\n    }\n  }\n  return BLOB_URL_PREFIX;\n}\n\ndeclare module 'whatwg-url-without-unicode' {\n  // TODO(@kitten): Clarify where this came from\n  type BlobLike = Blob & { data?: { blobId: string; offset: number } };\n\n  interface URLConstructor {\n    createObjectURL(blob: BlobLike): string;\n    revokeObjectURL(url: URL): void;\n    canParse(url: string, base?: string): boolean;\n  }\n}\n\n/**\n * To allow Blobs be accessed via `content://` URIs,\n * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:\n *\n * ```xml\n * <manifest>\n *   <application>\n *     <provider\n *       android:name=\"com.facebook.react.modules.blob.BlobProvider\"\n *       android:authorities=\"@string/blob_provider_authority\"\n *       android:exported=\"false\"\n *     />\n *   </application>\n * </manifest>\n * ```\n * And then define the `blob_provider_authority` string in `res/values/strings.xml`.\n * Use a dotted name that's entirely unique to your app:\n *\n * ```xml\n * <resources>\n *   <string name=\"blob_provider_authority\">your.app.package.blobs</string>\n * </resources>\n * ```\n */\nURL.createObjectURL = function createObjectURL(blob) {\n  if (getBlobUrlPrefix() == null) {\n    throw new Error('Cannot create URL for blob');\n  }\n  return `${getBlobUrlPrefix()}${encodeURIComponent(blob.data!.blobId)}?offset=${encodeURIComponent(\n    blob.data!.offset\n  )}&size=${encodeURIComponent(blob.size)}`;\n};\n\nURL.revokeObjectURL = function revokeObjectURL(_url) {\n  // Do nothing.\n};\n\nURL.canParse = function canParse(url: string, base?: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url, base);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport { URL, URLSearchParams };\n"],"mappings":";;;;;;;;;;;;;;;AAWA,IAAAA,wBAAA,GAAAC,OAAA;AAoBA,IAAIC,OAAO,GAAG,KAAK;AACnB,IAAIC,eAA8B,GAAG,IAAI;AAEzC,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,IAAIF,OAAO,EAAE,OAAOC,eAAe;EACnCD,OAAO,GAAG,IAAI;EAId,IAAMG,UAAU,GACdC,UAAU,CAACC,aAAa,KAAK,IAAI,GAE5BD,UAAU,CAACE,iBAAiB,CAAC,YAAY,CAAC,GAE1CF,UAAU,CAACG,kBAAkB,CAAC,YAAY,CAAqB;EAEtE,IAAMC,SAAS,GAAG,iBAAiB,IAAIL,UAAU,GAAGA,UAAU,GAAGA,UAAU,CAACM,YAAY,CAAC,CAAC;EAE1F,IAAID,SAAS,IAAI,OAAOA,SAAS,CAACE,eAAe,KAAK,QAAQ,EAAE;IAC9DT,eAAe,GAAGU,kBAAkB,CAACH,SAAS,CAACE,eAAe,CAAC,GAAG,GAAG;IACrE,IAAI,OAAOF,SAAS,CAACI,aAAa,KAAK,QAAQ,EAAE;MAC/CX,eAAe,IAAI,KAAKU,kBAAkB,CAACH,SAAS,CAACI,aAAa,CAAC,GAAG;IACxE;EACF;EACA,OAAOX,eAAe;AACxB;AAqCAY,4BAAG,CAACC,eAAe,GAAG,SAASA,eAAeA,CAACC,IAAI,EAAE;EACnD,IAAIb,gBAAgB,CAAC,CAAC,IAAI,IAAI,EAAE;IAC9B,MAAM,IAAIc,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAO,GAAGd,gBAAgB,CAAC,CAAC,GAAGS,kBAAkB,CAACI,IAAI,CAACE,IAAI,CAAEC,MAAM,CAAC,WAAWP,kBAAkB,CAC/FI,IAAI,CAACE,IAAI,CAAEE,MACb,CAAC,SAASR,kBAAkB,CAACI,IAAI,CAACK,IAAI,CAAC,EAAE;AAC3C,CAAC;AAEDP,4BAAG,CAACQ,eAAe,GAAG,SAASA,eAAeA,CAACC,IAAI,EAAE,CAErD,CAAC;AAEDT,4BAAG,CAACU,QAAQ,GAAG,SAASA,QAAQA,CAACC,GAAW,EAAEC,IAAa,EAAW;EACpE,IAAI;IAEF,IAAIZ,4BAAG,CAACW,GAAG,EAAEC,IAAI,CAAC;IAClB,OAAO,IAAI;EACb,CAAC,CAAC,OAAAC,OAAA,EAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]}