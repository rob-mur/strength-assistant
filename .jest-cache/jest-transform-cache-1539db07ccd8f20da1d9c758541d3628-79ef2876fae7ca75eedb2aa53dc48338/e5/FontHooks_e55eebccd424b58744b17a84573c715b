ff8955767604217188b20ff576cd5a14
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFonts = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _Font = require("./Font");
function isMapLoaded(map) {
  if (typeof map === 'string') {
    return (0, _Font.isLoaded)(map);
  } else {
    return Object.keys(map).every(function (fontFamily) {
      return (0, _Font.isLoaded)(fontFamily);
    });
  }
}
function useRuntimeFonts(map) {
  var _useState = (0, _react.useState)(isMapLoaded(map)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loaded = _useState2[0],
    setLoaded = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    (0, _Font.loadAsync)(map).then(function () {
      if (isMounted) {
        setLoaded(true);
      }
    }).catch(function (error) {
      if (isMounted) {
        setError(error);
      }
    });
    return function () {
      isMounted = false;
    };
  }, []);
  return [loaded, error];
}
function useStaticFonts(map) {
  (0, _Font.loadAsync)(map);
  return [true, null];
}
var useFonts = exports.useFonts = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX0ZvbnQiLCJpc01hcExvYWRlZCIsIm1hcCIsImlzTG9hZGVkIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5IiwiZm9udEZhbWlseSIsInVzZVJ1bnRpbWVGb250cyIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJsb2FkZWQiLCJzZXRMb2FkZWQiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImVycm9yIiwic2V0RXJyb3IiLCJ1c2VFZmZlY3QiLCJpc01vdW50ZWQiLCJsb2FkQXN5bmMiLCJ0aGVuIiwiY2F0Y2giLCJ1c2VTdGF0aWNGb250cyIsInVzZUZvbnRzIiwiZXhwb3J0cyIsIndpbmRvdyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Gb250SG9va3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgbG9hZEFzeW5jLCBpc0xvYWRlZCB9IGZyb20gJy4vRm9udCc7XG5pbXBvcnQgeyBGb250U291cmNlIH0gZnJvbSAnLi9Gb250LnR5cGVzJztcblxuZnVuY3Rpb24gaXNNYXBMb2FkZWQobWFwOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCBGb250U291cmNlPikge1xuICBpZiAodHlwZW9mIG1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaXNMb2FkZWQobWFwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5ldmVyeSgoZm9udEZhbWlseSkgPT4gaXNMb2FkZWQoZm9udEZhbWlseSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVJ1bnRpbWVGb250cyhtYXA6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIEZvbnRTb3VyY2U+KTogW2Jvb2xlYW4sIEVycm9yIHwgbnVsbF0ge1xuICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gdXNlU3RhdGUoXG4gICAgLy8gRm9yIHdlYiByZWh5ZHJhdGlvbiwgd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgZm9udHMgYXJlIGFscmVhZHkgbG9hZGVkIGR1cmluZyB0aGUgc3RhdGljIHJlbmRlci5cbiAgICAvLyBOYXRpdmUgd2lsbCBhbHNvIGJlbmVmaXQgZnJvbSB0aGlzIG9wdGltaXphdGlvbi5cbiAgICBpc01hcExvYWRlZChtYXApXG4gICk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8RXJyb3IgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBpc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgbG9hZEFzeW5jKG1hcClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgIHNldExvYWRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgIHNldEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBbbG9hZGVkLCBlcnJvcl07XG59XG5cbmZ1bmN0aW9uIHVzZVN0YXRpY0ZvbnRzKG1hcDogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgRm9udFNvdXJjZT4pOiBbYm9vbGVhbiwgRXJyb3IgfCBudWxsXSB7XG4gIGxvYWRBc3luYyhtYXApO1xuICByZXR1cm4gW3RydWUsIG51bGxdO1xufVxuXG4vLyBAbmVlZHNBdWRpdFxuLyoqXG4gKiBMb2FkIGEgbWFwIG9mIGZvbnRzIGF0IHJ1bnRpbWUgd2l0aCBbYGxvYWRBc3luY2BdKCNsb2FkYXN5bmNmb250ZmFtaWx5b3Jmb250bWFwLXNvdXJjZSkuIFRoaXMgcmV0dXJucyBhIGBib29sZWFuYCBpZiB0aGUgZm9udHMgYXJlXG4gKiBsb2FkZWQgYW5kIHJlYWR5IHRvIHVzZS4gSXQgYWxzbyByZXR1cm5zIGFuIGVycm9yIGlmIHNvbWV0aGluZyB3ZW50IHdyb25nLCB0byB1c2UgaW4gZGV2ZWxvcG1lbnQuXG4gKlxuICogPiBOb3RlLCB0aGUgZm9udHMgYXJlIG5vdCBcInJlbG9hZGVkXCIgd2hlbiB5b3UgZHluYW1pY2FsbHkgY2hhbmdlIHRoZSBmb250IG1hcC5cbiAqXG4gKiBAcGFyYW0gbWFwIEEgbWFwIG9mIGBmb250RmFtaWx5YHMgdG8gW2BGb250U291cmNlYF0oI2ZvbnRzb3VyY2Upcy4gQWZ0ZXIgbG9hZGluZyB0aGUgZm9udCB5b3UgY2FuXG4gKiB1c2UgdGhlIGtleSBpbiB0aGUgYGZvbnRGYW1pbHlgIHN0eWxlIHByb3Agb2YgYSBgVGV4dGAgZWxlbWVudC5cbiAqXG4gKiBAcmV0dXJuXG4gKiAtIF9fbG9hZGVkX18gKGBib29sZWFuYCkgLSBBIGJvb2xlYW4gdG8gZGV0ZWN0IGlmIHRoZSBmb250IGZvciBgZm9udEZhbWlseWAgaGFzIGZpbmlzaGVkXG4gKiBsb2FkaW5nLlxuICogLSBfX2Vycm9yX18gKGBFcnJvciB8IG51bGxgKSAtIEFuIGVycm9yIGVuY291bnRlcmVkIHdoZW4gbG9hZGluZyB0aGUgZm9udHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3QgW2xvYWRlZCwgZXJyb3JdID0gdXNlRm9udHMoe1xuICogICAnSW50ZXItQmxhY2snOiByZXF1aXJlKCcuL2Fzc2V0cy9mb250cy9JbnRlci1CbGFjay5vdGYnKSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VGb250czogKG1hcDogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgRm9udFNvdXJjZT4pID0+IFtib29sZWFuLCBFcnJvciB8IG51bGxdID1cbiAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyB1c2VTdGF0aWNGb250cyA6IHVzZVJ1bnRpbWVGb250cztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBR0EsU0FBU0UsV0FBV0EsQ0FBQ0MsR0FBd0M7RUFDM0QsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO0lBQzNCLE9BQU8sSUFBQUMsY0FBUSxFQUFDRCxHQUFHLENBQUM7RUFDdEIsQ0FBQyxNQUFNO0lBQ0wsT0FBT0UsTUFBTSxDQUFDQyxJQUFJLENBQUNILEdBQUcsQ0FBQyxDQUFDSSxLQUFLLENBQUMsVUFBQ0MsVUFBVTtNQUFBLE9BQUssSUFBQUosY0FBUSxFQUFDSSxVQUFVLENBQUM7SUFBQSxFQUFDO0VBQ3JFO0FBQ0Y7QUFFQSxTQUFTQyxlQUFlQSxDQUFDTixHQUF3QztFQUMvRCxJQUFBTyxTQUFBLEdBQTRCLElBQUFDLGVBQVEsRUFHbENULFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLENBQ2pCO0lBQUFTLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFKTUssTUFBTSxHQUFBSCxVQUFBO0lBQUVJLFNBQVMsR0FBQUosVUFBQTtFQUt4QixJQUFBSyxVQUFBLEdBQTBCLElBQUFOLGVBQVEsRUFBZSxJQUFJLENBQUM7SUFBQU8sVUFBQSxPQUFBTCxlQUFBLENBQUFDLE9BQUEsRUFBQUcsVUFBQTtJQUEvQ0UsS0FBSyxHQUFBRCxVQUFBO0lBQUVFLFFBQVEsR0FBQUYsVUFBQTtFQUV0QixJQUFBRyxnQkFBUyxFQUFDLFlBQUs7SUFDYixJQUFJQyxTQUFTLEdBQUcsSUFBSTtJQUVwQixJQUFBQyxlQUFTLEVBQUNwQixHQUFHLENBQUMsQ0FDWHFCLElBQUksQ0FBQyxZQUFLO01BQ1QsSUFBSUYsU0FBUyxFQUFFO1FBQ2JOLFNBQVMsQ0FBQyxJQUFJLENBQUM7TUFDakI7SUFDRixDQUFDLENBQUMsQ0FDRFMsS0FBSyxDQUFDLFVBQUNOLEtBQUssRUFBSTtNQUNmLElBQUlHLFNBQVMsRUFBRTtRQUNiRixRQUFRLENBQUNELEtBQUssQ0FBQztNQUNqQjtJQUNGLENBQUMsQ0FBQztJQUVKLE9BQU8sWUFBSztNQUNWRyxTQUFTLEdBQUcsS0FBSztJQUNuQixDQUFDO0VBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLE9BQU8sQ0FBQ1AsTUFBTSxFQUFFSSxLQUFLLENBQUM7QUFDeEI7QUFFQSxTQUFTTyxjQUFjQSxDQUFDdkIsR0FBd0M7RUFDOUQsSUFBQW9CLGVBQVMsRUFBQ3BCLEdBQUcsQ0FBQztFQUNkLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0FBQ3JCO0FBd0JPLElBQU13QixRQUFRLEdBQUFDLE9BQUEsQ0FBQUQsUUFBQSxHQUNuQixPQUFPRSxNQUFNLEtBQUssV0FBVyxHQUFHSCxjQUFjLEdBQUdqQixlQUFlIiwiaWdub3JlTGlzdCI6W119