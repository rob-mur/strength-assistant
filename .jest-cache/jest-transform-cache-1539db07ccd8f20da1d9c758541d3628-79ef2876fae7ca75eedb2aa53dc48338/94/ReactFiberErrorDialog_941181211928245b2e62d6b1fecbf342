2f4e3020c683c8cd2fedbf8faa4bfb76
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ExceptionsManager = _interopRequireWildcard(require("./ExceptionsManager"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ReactFiberErrorDialog = {
  showErrorDialog: function showErrorDialog(_ref) {
    var componentStack = _ref.componentStack,
      errorValue = _ref.error;
    var error;
    if (errorValue instanceof Error) {
      error = errorValue;
    } else if (typeof errorValue === 'string') {
      error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
      error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }
    try {
      error.componentStack = componentStack;
      error.isComponentError = true;
    } catch (_unused) {}
    _ExceptionsManager.default.handleException(error, false);
    return false;
  }
};
var _default = exports.default = ReactFiberErrorDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXhjZXB0aW9uc01hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlYWN0RmliZXJFcnJvckRpYWxvZyIsInNob3dFcnJvckRpYWxvZyIsIl9yZWYiLCJjb21wb25lbnRTdGFjayIsImVycm9yVmFsdWUiLCJlcnJvciIsIkVycm9yIiwiU3ludGhldGljRXJyb3IiLCJpc0NvbXBvbmVudEVycm9yIiwiX3VudXNlZCIsIkV4Y2VwdGlvbnNNYW5hZ2VyIiwiaGFuZGxlRXhjZXB0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUmVhY3RGaWJlckVycm9yRGlhbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RXh0ZW5kZWRFcnJvcn0gZnJvbSAnLi9FeHRlbmRlZEVycm9yJztcblxuaW1wb3J0IEV4Y2VwdGlvbnNNYW5hZ2VyLCB7U3ludGhldGljRXJyb3J9IGZyb20gJy4vRXhjZXB0aW9uc01hbmFnZXInO1xuXG5leHBvcnQgdHlwZSBDYXB0dXJlZEVycm9yID0ge1xuICArY29tcG9uZW50U3RhY2s6IHN0cmluZyxcbiAgK2Vycm9yOiBtaXhlZCxcbiAgK2Vycm9yQm91bmRhcnk6ID97Li4ufSxcbiAgLi4uXG59O1xuXG5jb25zdCBSZWFjdEZpYmVyRXJyb3JEaWFsb2cgPSB7XG4gIC8qKlxuICAgKiBJbnRlcmNlcHQgbGlmZWN5Y2xlIGVycm9ycyBhbmQgZW5zdXJlIHRoZXkgYXJlIHNob3duIHdpdGggdGhlIGNvcnJlY3Qgc3RhY2tcbiAgICogdHJhY2Ugd2l0aGluIHRoZSBuYXRpdmUgcmVkYm94IGNvbXBvbmVudC5cbiAgICovXG4gIHNob3dFcnJvckRpYWxvZyh7Y29tcG9uZW50U3RhY2ssIGVycm9yOiBlcnJvclZhbHVlfTogQ2FwdHVyZWRFcnJvcik6IGJvb2xlYW4ge1xuICAgIGxldCBlcnJvcjogP0V4dGVuZGVkRXJyb3I7XG5cbiAgICAvLyBUeXBpY2FsbHksIGBlcnJvclZhbHVlYCBzaG91bGQgYmUgYW4gZXJyb3IuIEhvd2V2ZXIsIG90aGVyIHZhbHVlcyBzdWNoIGFzXG4gICAgLy8gc3RyaW5ncyAob3IgZXZlbiBudWxsKSBhcmUgc29tZXRpbWVzIHRocm93bi5cbiAgICBpZiAoZXJyb3JWYWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvKiAkRmxvd0ZpeE1lW2NsYXNzLW9iamVjdC1zdWJ0eXBpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3JcbiAgICAgICAqIHRoaXMgcGFyYW1ldGVycyAqL1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF1cbiAgICAgIGVycm9yID0gKGVycm9yVmFsdWU6IEV4dGVuZGVkRXJyb3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvKiAkRmxvd0ZpeE1lW2NsYXNzLW9iamVjdC1zdWJ0eXBpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3JcbiAgICAgICAqIHRoaXMgcGFyYW1ldGVycyAqL1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF1cbiAgICAgIGVycm9yID0gKG5ldyBTeW50aGV0aWNFcnJvcihlcnJvclZhbHVlKTogRXh0ZW5kZWRFcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvclxuICAgICAgICogdGhpcyBwYXJhbWV0ZXJzICovXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XVxuICAgICAgZXJyb3IgPSAobmV3IFN5bnRoZXRpY0Vycm9yKCdVbnNwZWNpZmllZCBlcnJvcicpOiBFeHRlbmRlZEVycm9yKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGVycm9yLmNvbXBvbmVudFN0YWNrID0gY29tcG9uZW50U3RhY2s7XG4gICAgICBlcnJvci5pc0NvbXBvbmVudEVycm9yID0gdHJ1ZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElnbm9yZWQuXG4gICAgfVxuXG4gICAgRXhjZXB0aW9uc01hbmFnZXIuaGFuZGxlRXhjZXB0aW9uKGVycm9yLCBmYWxzZSk7XG5cbiAgICAvLyBSZXR1cm4gZmFsc2UgaGVyZSB0byBwcmV2ZW50IFJlYWN0RmliZXJFcnJvckxvZ2dlciBkZWZhdWx0IGJlaGF2aW9yIG9mXG4gICAgLy8gbG9nZ2luZyBlcnJvciBkZXRhaWxzIHRvIGNvbnNvbGUuZXJyb3IuIENhbGxzIHRvIGNvbnNvbGUuZXJyb3IgYXJlXG4gICAgLy8gYXV0b21hdGljYWxseSByb3V0ZWQgdG8gdGhlIG5hdGl2ZSByZWRib3ggY29udHJvbGxlciwgd2hpY2ggd2UndmUgYWxyZWFkeVxuICAgIC8vIGRvbmUgYWJvdmUgYnkgY2FsbGluZyBFeGNlcHRpb25zTWFuYWdlci5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEZpYmVyRXJyb3JEaWFsb2c7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFZQSxJQUFBQSxrQkFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQXNFLFNBQUFELHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFTdEUsSUFBTW1CLHFCQUFxQixHQUFHO0VBSzVCQyxlQUFlLFdBQWZBLGVBQWVBLENBQUFDLElBQUEsRUFBOEQ7SUFBQSxJQUE1REMsY0FBYyxHQUFBRCxJQUFBLENBQWRDLGNBQWM7TUFBU0MsVUFBVSxHQUFBRixJQUFBLENBQWpCRyxLQUFLO0lBQ3BDLElBQUlBLEtBQXFCO0lBSXpCLElBQUlELFVBQVUsWUFBWUUsS0FBSyxFQUFFO01BSS9CRCxLQUFLLEdBQUlELFVBQTBCO0lBQ3JDLENBQUMsTUFBTSxJQUFJLE9BQU9BLFVBQVUsS0FBSyxRQUFRLEVBQUU7TUFJekNDLEtBQUssR0FBSSxJQUFJRSxpQ0FBYyxDQUFDSCxVQUFVLENBQWlCO0lBQ3pELENBQUMsTUFBTTtNQUlMQyxLQUFLLEdBQUksSUFBSUUsaUNBQWMsQ0FBQyxtQkFBbUIsQ0FBaUI7SUFDbEU7SUFDQSxJQUFJO01BQ0ZGLEtBQUssQ0FBQ0YsY0FBYyxHQUFHQSxjQUFjO01BQ3JDRSxLQUFLLENBQUNHLGdCQUFnQixHQUFHLElBQUk7SUFDL0IsQ0FBQyxDQUFDLE9BQUFDLE9BQUEsRUFBTSxDQUVSO0lBRUFDLDBCQUFpQixDQUFDQyxlQUFlLENBQUNOLEtBQUssRUFBRSxLQUFLLENBQUM7SUFNL0MsT0FBTyxLQUFLO0VBQ2Q7QUFDRixDQUFDO0FBQUMsSUFBQU8sUUFBQSxHQUFBQyxPQUFBLENBQUF2QixPQUFBLEdBRWFVLHFCQUFxQiIsImlnbm9yZUxpc3QiOltdfQ==