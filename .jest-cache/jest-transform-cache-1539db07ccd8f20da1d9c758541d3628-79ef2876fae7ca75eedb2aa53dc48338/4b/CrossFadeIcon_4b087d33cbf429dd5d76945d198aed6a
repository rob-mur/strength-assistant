6b994d6ef353e4ea6107c92e68f2a663
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Icon = _interopRequireWildcard(require("./Icon"));
var _theming = require("../core/theming");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var CrossFadeIcon = function CrossFadeIcon(_ref) {
  var color = _ref.color,
    size = _ref.size,
    source = _ref.source,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'cross-fade-icon' : _ref$testID;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _React$useState = React.useState(function () {
      return source;
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    currentIcon = _React$useState2[0],
    setCurrentIcon = _React$useState2[1];
  var _React$useState3 = React.useState(null),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    previousIcon = _React$useState4[0],
    setPreviousIcon = _React$useState4[1];
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(1)),
    fade = _React$useRef.current;
  var scale = theme.animation.scale;
  if (currentIcon !== source) {
    setPreviousIcon(function () {
      return currentIcon;
    });
    setCurrentIcon(function () {
      return source;
    });
  }
  React.useEffect(function () {
    if ((0, _Icon.isValidIcon)(previousIcon) && !(0, _Icon.isEqualIcon)(previousIcon, currentIcon)) {
      fade.setValue(1);
      _reactNative.Animated.timing(fade, {
        duration: scale * 200,
        toValue: 0,
        useNativeDriver: true
      }).start();
    }
  }, [currentIcon, previousIcon, fade, scale]);
  var opacityPrev = fade;
  var opacityNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 0]
  }) : 1;
  var rotatePrev = fade.interpolate({
    inputRange: [0, 1],
    outputRange: ['-90deg', '0deg']
  });
  var rotateNext = previousIcon ? fade.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '-180deg']
  }) : '0deg';
  return React.createElement(_reactNative.View, {
    style: [styles.content, {
      height: size,
      width: size
    }]
  }, previousIcon ? React.createElement(_reactNative.Animated.View, {
    style: [styles.icon, {
      opacity: opacityPrev,
      transform: [{
        rotate: rotatePrev
      }]
    }],
    testID: `${testID}-previous`
  }, React.createElement(_Icon.default, {
    source: previousIcon,
    size: size,
    color: color,
    theme: theme
  })) : null, React.createElement(_reactNative.Animated.View, {
    style: [styles.icon, {
      opacity: opacityNext,
      transform: [{
        rotate: rotateNext
      }]
    }],
    testID: `${testID}-current`
  }, React.createElement(_Icon.default, {
    source: currentIcon,
    size: size,
    color: color,
    theme: theme
  })));
};
var _default = exports.default = CrossFadeIcon;
var styles = _reactNative.StyleSheet.create({
  content: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9JY29uIiwiX3RoZW1pbmciLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJDcm9zc0ZhZGVJY29uIiwiX3JlZiIsImNvbG9yIiwic2l6ZSIsInNvdXJjZSIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJfcmVmJHRlc3RJRCIsInRlc3RJRCIsInVzZUludGVybmFsVGhlbWUiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJjdXJyZW50SWNvbiIsInNldEN1cnJlbnRJY29uIiwiX1JlYWN0JHVzZVN0YXRlMyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJwcmV2aW91c0ljb24iLCJzZXRQcmV2aW91c0ljb24iLCJfUmVhY3QkdXNlUmVmIiwidXNlUmVmIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImZhZGUiLCJjdXJyZW50Iiwic2NhbGUiLCJhbmltYXRpb24iLCJ1c2VFZmZlY3QiLCJpc1ZhbGlkSWNvbiIsImlzRXF1YWxJY29uIiwic2V0VmFsdWUiLCJ0aW1pbmciLCJkdXJhdGlvbiIsInRvVmFsdWUiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsIm9wYWNpdHlQcmV2Iiwib3BhY2l0eU5leHQiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsInJvdGF0ZVByZXYiLCJyb3RhdGVOZXh0IiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRlbnQiLCJoZWlnaHQiLCJ3aWR0aCIsImljb24iLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwicm90YXRlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ3Jvc3NGYWRlSWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsS0FBQSxHQUFBSCx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQW1ELFNBQUFELHdCQUFBSyxDQUFBLEVBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFBO0VBQUEsUUFBQVAsdUJBQUEsWUFBQUEsd0JBQUFLLENBQUEsRUFBQUMsQ0FBQTtJQUFBLEtBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQTtJQUFBLElBQUFNLENBQUE7TUFBQUMsQ0FBQTtNQUFBQyxDQUFBO1FBQUFDLFNBQUE7UUFBQUMsT0FBQSxFQUFBVjtNQUFBO0lBQUEsYUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBO0lBQUEsSUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQTtNQUFBLElBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBO01BQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUE7SUFBQTtJQUFBLFNBQUFQLEVBQUEsSUFBQUQs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