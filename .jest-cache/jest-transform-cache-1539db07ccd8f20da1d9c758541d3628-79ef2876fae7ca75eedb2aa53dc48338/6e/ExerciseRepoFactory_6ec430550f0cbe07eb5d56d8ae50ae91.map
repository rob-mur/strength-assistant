{"version":3,"names":["_FirebaseExerciseRepo","require","_SupabaseExerciseRepo","ExerciseRepoFactory","exports","_classCallCheck2","default","_createClass2","key","value","getInstance","useSupabase","shouldUseSupabase","_this$supabaseInstanc","supabaseInstance","SupabaseExerciseRepo","_this$firebaseInstanc","firebaseInstance","FirebaseExerciseRepo","useSupabaseProcess","process","env","USE_SUPABASE_DATA","useSupabaseEnv","_Constants$expoConfig","_require","Constants","expoConfig","extra","useSupabaseData","_unused","undefined","toLowerCase","Boolean","getCurrentDataSource","resetInstances"],"sources":["ExerciseRepoFactory.ts"],"sourcesContent":["import { IExerciseRepo } from \"./IExerciseRepo\";\nimport { FirebaseExerciseRepo } from \"./FirebaseExerciseRepo\";\nimport { SupabaseExerciseRepo } from \"./SupabaseExerciseRepo\";\n\n/**\n * Factory class for creating appropriate Exercise Repository instances\n * Based on the USE_SUPABASE_DATA environment variable\n */\nexport class ExerciseRepoFactory {\n  private static firebaseInstance: FirebaseExerciseRepo | null = null;\n  private static supabaseInstance: SupabaseExerciseRepo | null = null;\n\n  /**\n   * Creates and returns the appropriate ExerciseRepo implementation\n   * based on the USE_SUPABASE_DATA environment variable\n   */\n  static getInstance(): IExerciseRepo {\n    const useSupabase = this.shouldUseSupabase();\n    \n    if (useSupabase) {\n      this.supabaseInstance ??= SupabaseExerciseRepo.getInstance();\n      return this.supabaseInstance;\n    } else {\n      this.firebaseInstance ??= FirebaseExerciseRepo.getInstance();\n      return this.firebaseInstance;\n    }\n  }\n\n  /**\n   * Determines whether to use Supabase based on environment variable\n   */\n  private static shouldUseSupabase(): boolean {\n    // Check process.env first (preferred for web builds and testing)\n    const useSupabaseProcess = process.env.USE_SUPABASE_DATA;\n    \n    // Fall back to expo-constants if process.env not set\n    let useSupabaseEnv;\n    try {\n      // Use require for compatibility with Jest mocking\n      const { default: Constants } = require('expo-constants');\n      useSupabaseEnv = Constants.expoConfig?.extra?.useSupabaseData;\n    } catch {\n      useSupabaseEnv = undefined;\n    }\n    \n    // Prefer process.env, fall back to expo config\n    const useSupabase = useSupabaseProcess ?? useSupabaseEnv;\n    \n    // Convert string values to boolean\n    if (typeof useSupabase === 'string') {\n      return useSupabase.toLowerCase() === 'true';\n    }\n    \n    return Boolean(useSupabase);\n  }\n\n  /**\n   * Get the current data source being used\n   */\n  static getCurrentDataSource(): 'firebase' | 'supabase' {\n    return this.shouldUseSupabase() ? 'supabase' : 'firebase';\n  }\n\n  /**\n   * Force reset of instances (useful for testing)\n   */\n  static resetInstances(): void {\n    this.firebaseInstance = null;\n    this.supabaseInstance = null;\n  }\n}"],"mappings":";;;;;;;AACA,IAAAA,qBAAA,GAAAC,OAAA;AACA,IAAAC,qBAAA,GAAAD,OAAA;AAA8D,IAMjDE,mBAAmB,GAAAC,OAAA,CAAAD,mBAAA;EAAA,SAAAA,oBAAA;IAAA,IAAAE,gBAAA,CAAAC,OAAA,QAAAH,mBAAA;EAAA;EAAA,WAAAI,aAAA,CAAAD,OAAA,EAAAH,mBAAA;IAAAK,GAAA;IAAAC,KAAA,EAQ9B,SAAOC,WAAWA,CAAA,EAAkB;MAClC,IAAMC,WAAW,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAE5C,IAAID,WAAW,EAAE;QAAA,IAAAE,qBAAA;QACf,CAAAA,qBAAA,OAAI,CAACC,gBAAgB,YAAAD,qBAAA,GAArB,IAAI,CAACC,gBAAgB,GAAKC,0CAAoB,CAACL,WAAW,CAAC,CAAC;QAC5D,OAAO,IAAI,CAACI,gBAAgB;MAC9B,CAAC,MAAM;QAAA,IAAAE,qBAAA;QACL,CAAAA,qBAAA,OAAI,CAACC,gBAAgB,YAAAD,qBAAA,GAArB,IAAI,CAACC,gBAAgB,GAAKC,0CAAoB,CAACR,WAAW,CAAC,CAAC;QAC5D,OAAO,IAAI,CAACO,gBAAgB;MAC9B;IACF;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAKD,SAAeG,iBAAiBA,CAAA,EAAY;MAE1C,IAAMO,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;MAGxD,IAAIC,cAAc;MAClB,IAAI;QAAA,IAAAC,qBAAA;QAEF,IAAAC,QAAA,GAA+BxB,OAAO,CAAC,gBAAgB,CAAC;UAAvCyB,SAAS,GAAAD,QAAA,CAAlBnB,OAAO;QACfiB,cAAc,IAAAC,qBAAA,GAAGE,SAAS,CAACC,UAAU,cAAAH,qBAAA,GAApBA,qBAAA,CAAsBI,KAAK,qBAA3BJ,qBAAA,CAA6BK,eAAe;MAC/D,CAAC,CAAC,OAAAC,OAAA,EAAM;QACNP,cAAc,GAAGQ,SAAS;MAC5B;MAGA,IAAMpB,WAAW,GAAGQ,kBAAkB,WAAlBA,kBAAkB,GAAII,cAAc;MAGxD,IAAI,OAAOZ,WAAW,KAAK,QAAQ,EAAE;QACnC,OAAOA,WAAW,CAACqB,WAAW,CAAC,CAAC,KAAK,MAAM;MAC7C;MAEA,OAAOC,OAAO,CAACtB,WAAW,CAAC;IAC7B;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAKD,SAAOyB,oBAAoBA,CAAA,EAA4B;MACrD,OAAO,IAAI,CAACtB,iBAAiB,CAAC,CAAC,GAAG,UAAU,GAAG,UAAU;IAC3D;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAKD,SAAO0B,cAAcA,CAAA,EAAS;MAC5B,IAAI,CAAClB,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACH,gBAAgB,GAAG,IAAI;IAC9B;EAAC;AAAA;AA7DUX,mBAAmB,CACfc,gBAAgB,GAAgC,IAAI;AADxDd,mBAAmB,CAEfW,gBAAgB,GAAgC,IAAI","ignoreList":[]}