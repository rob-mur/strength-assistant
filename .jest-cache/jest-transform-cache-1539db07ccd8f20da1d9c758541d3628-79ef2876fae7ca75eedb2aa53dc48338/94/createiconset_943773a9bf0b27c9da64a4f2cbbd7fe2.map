{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_ensureNativeModuleAvailable","_interopRequireDefault","_createIconSourceCache","_iconButton","_jsxRuntime","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","NativeIconAPI","exports","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","Icon","_PureComponent","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","root","_inherits2","_createClass2","key","value","render","_this$props","props","name","size","color","style","children","_objectWithoutProperties2","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","jsxs","Text","assign","selectable","PureComponent","defaultProps","allowFontScaling","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","undefined","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","imagePath","getImageForFontSync","uri","scale","PixelRatio","setValue","error","setError","getImageSource","_x","_getImageSource","_asyncToGenerator2","getImageForFont","loadFont","_loadFont","file","OS","Error","loadFontWithFileName","_toConsumableArray2","split","hasIcon","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport {Platform, PixelRatio, processColor, Text, NativeModules} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]}