096539dc0464cb4497937c88434de99b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["style", "status", "label", "onPress", "onLongPress", "labelStyle", "theme", "testID", "mode", "position", "accessibilityLabel", "disabled", "labelVariant", "labelMaxFontSizeMultiplier", "rippleColor", "background", "hitSlop"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckboxItem = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Checkbox = _interopRequireDefault(require("./Checkbox"));
var _CheckboxAndroid = _interopRequireDefault(require("./CheckboxAndroid"));
var _CheckboxIOS = _interopRequireDefault(require("./CheckboxIOS"));
var _theming = require("../../core/theming");
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var CheckboxItem = function CheckboxItem(_ref) {
  var style = _ref.style,
    status = _ref.status,
    label = _ref.label,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    labelStyle = _ref.labelStyle,
    themeOverrides = _ref.theme,
    testID = _ref.testID,
    mode = _ref.mode,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'trailing' : _ref$position,
    _ref$accessibilityLab = _ref.accessibilityLabel,
    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,
    disabled = _ref.disabled,
    _ref$labelVariant = _ref.labelVariant,
    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,
    _ref$labelMaxFontSize = _ref.labelMaxFontSizeMultiplier,
    labelMaxFontSizeMultiplier = _ref$labelMaxFontSize === void 0 ? 1.5 : _ref$labelMaxFontSize,
    rippleColor = _ref.rippleColor,
    background = _ref.background,
    hitSlop = _ref.hitSlop,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var checkboxProps = Object.assign({}, props, {
    status: status,
    theme: theme,
    disabled: disabled
  });
  var isLeading = position === 'leading';
  var checkbox;
  if (mode === 'android') {
    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);
  } else if (mode === 'ios') {
    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);
  } else {
    checkbox = React.createElement(_Checkbox.default, checkboxProps);
  }
  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;
  var textAlign = isLeading ? 'right' : 'left';
  var computedStyle = {
    color: disabled ? disabledTextColor : textColor,
    textAlign: textAlign
  };
  return React.createElement(_TouchableRipple.default, {
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "checkbox",
    accessibilityState: {
      checked: status === 'checked',
      disabled: disabled
    },
    onPress: onPress,
    onLongPress: onLongPress,
    testID: testID,
    disabled: disabled,
    rippleColor: rippleColor,
    theme: theme,
    background: background,
    hitSlop: hitSlop
  }, React.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "none",
    importantForAccessibility: "no-hide-descendants"
  }, isLeading && checkbox, React.createElement(_Text.default, {
    variant: labelVariant,
    testID: `${testID}-text`,
    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]
  }, label), !isLeading && checkbox));
};
exports.CheckboxItem = CheckboxItem;
CheckboxItem.displayName = 'Checkbox.Item';
var _default = exports.default = CheckboxItem;
var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    flexShrink: 1,
    flexGrow: 1
  },
  font: {
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9DaGVja2JveCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfQ2hlY2tib3hBbmRyb2lkIiwiX0NoZWNrYm94SU9TIiwiX3RoZW1pbmciLCJfVG91Y2hhYmxlUmlwcGxlIiwiX1RleHQiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJDaGVja2JveEl0ZW0iLCJfcmVmIiwic3R5bGUiLCJzdGF0dXMiLCJsYWJlbCIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsImxhYmVsU3R5bGUiLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwidGVzdElEIiwibW9kZSIsIl9yZWYkcG9zaXRpb24iLCJwb3NpdGlvbiIsIl9yZWYkYWNjZXNzaWJpbGl0eUxhYiIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImRpc2FibGVkIiwiX3JlZiRsYWJlbFZhcmlhbnQiLCJsYWJlbFZhcmlhbnQiLCJfcmVmJGxhYmVsTWF4Rm9udFNpemUiLCJsYWJlbE1heEZvbnRTaXplTXVsdGlwbGllciIsInJpcHBsZUNvbG9yIiwiYmFja2dyb3VuZCIsImhpdFNsb3AiLCJwcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZXhjbHVkZWQiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiY2hlY2tib3hQcm9wcyIsImFzc2lnbiIsImlzTGVhZGluZyIsImNoZWNrYm94IiwiY3JlYXRlRWxlbWVudCIsInRleHRDb2xvciIsImlzVjMiLCJjb2xvcnMiLCJvblN1cmZhY2UiLCJ0ZXh0IiwiZGlzYWJsZWRUZXh0Q29sb3IiLCJvblN1cmZhY2VEaXNhYmxlZCIsInRleHRBbGlnbiIsImNvbXB1dGVkU3R5bGUiLCJjb2xvciIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiY2hlY2tlZCIsIlZpZXciLCJzdHlsZXMiLCJjb250YWluZXIiLCJwb2ludGVyRXZlbnRzIiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsInZhcmlhbnQiLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJmb250IiwiZXhwb3J0cyIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmdWZXJ0aWNhbCIsInBhZGRpbmdIb3Jpem9udGFsIiwiZmxleFNocmluayIsImZsZXhHcm93IiwiZm9udFNpemUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9DaGVja2JveC9DaGVja2JveEl0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFXQSxJQUFBRSxTQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxnQkFBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBRixzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sZ0JBQUEsR0FBQUosc0JBQUEsQ0FBQUgsT0FBQTtBQUdBLElBQUFRLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUgsT0FBQTtBQUFzQyxTQUFBRyx1QkFBQU0sQ0FBQTtFQUFBLE9BQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBVix3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