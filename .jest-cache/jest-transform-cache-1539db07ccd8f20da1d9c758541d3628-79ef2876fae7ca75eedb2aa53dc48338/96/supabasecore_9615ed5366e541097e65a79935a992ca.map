{"version":3,"names":["_supabaseJs","require","_logger","SupabaseService","exports","serviceName","_classCallCheck2","default","initialized","logger","Logger","_createClass2","key","value","logInfo","message","context","info","logWarn","warn","logError","error","assertInitialized","operation","Error","isEmulatorEnabled","process","env","NODE_ENV","_env2","EXPO_PUBLIC_USE_SUPABASE_EMULATOR","getEmulatorHost","EXPO_PUBLIC_SUPABASE_EMULATOR_HOST","getEmulatorPort","parseInt","EXPO_PUBLIC_SUPABASE_EMULATOR_PORT","getSupabaseUrl","host","port","EXPO_PUBLIC_SUPABASE_URL","getSupabaseAnonKey","EXPO_PUBLIC_SUPABASE_ANON_KEY","sanitizeUrl","url","urlObj","URL","protocol","_unused","createSupabaseClient","config","supabaseUrl","supabaseAnonKey","hasUrl","hasKey","emulatorEnabled","emulatorHost","emulatorPort","hasAnonKey","client","createClient","auth","autoRefreshToken","persistSession","detectSessionInUrl","init","startTime","Date","now","getInitMessage","getClientConfig","duration","stack","getSupabaseClient","isReady"],"sources":["supabase-core.ts"],"sourcesContent":["import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\nimport { Database } from \"../../../models/supabase\";\nimport { Logger } from \"./logger\";\n\n/**\n * Base service class for Supabase implementations following Firebase pattern\n * Provides common functionality for web and native platforms\n */\nexport abstract class SupabaseService {\n\tprotected initialized: boolean = false;\n\tprotected client: SupabaseClient<Database> | undefined;\n\tprivate readonly logger: Logger;\n\n\tconstructor(serviceName: string) {\n\t\tthis.logger = new Logger(serviceName);\n\t}\n\n\tprotected logInfo(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logger.info(message, context);\n\t}\n\n\tprotected logWarn(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logger.warn(message, context);\n\t}\n\n\tprotected logError(message: string, context?: Record<string, unknown>): void {\n\t\tthis.logger.error(message, context);\n\t}\n\n\tprotected assertInitialized(operation: string): void {\n\t\tif (!this.initialized) {\n\t\t\tconst error = `Supabase service not initialized. Call init() before ${operation}`;\n\t\t\tthis.logError(error);\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\tprotected isEmulatorEnabled(): boolean {\n\t\t// Check if we're in development mode and should use local Supabase\n\t\treturn (\n\t\t\tprocess.env.NODE_ENV === \"development\" ||\n\t\t\tprocess.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR === \"true\"\n\t\t);\n\t}\n\n\tprotected getEmulatorHost(): string {\n\t\t// Default to localhost for web, but allow override\n\t\t// Native apps might need different host (e.g., 10.0.2.2 for Android emulator)\n\t\treturn process.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST || \"127.0.0.1\";\n\t}\n\n\tprotected getEmulatorPort(): number {\n\t\treturn parseInt(process.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT || \"54321\", 10);\n\t}\n\n\tprotected getSupabaseUrl(): string {\n\t\tif (this.isEmulatorEnabled()) {\n\t\t\tconst host = this.getEmulatorHost();\n\t\t\tconst port = this.getEmulatorPort();\n\t\t\treturn `http://${host}:${port}`;\n\t\t}\n\n\t\treturn process.env.EXPO_PUBLIC_SUPABASE_URL || \"\";\n\t}\n\n\tprotected getSupabaseAnonKey(): string {\n\t\tif (this.isEmulatorEnabled()) {\n\t\t\t// Local Supabase has a default anon key for development\n\t\t\treturn process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\";\n\t\t}\n\n\t\treturn process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || \"\";\n\t}\n\n\tprotected sanitizeUrl(url: string): string {\n\t\t// Remove sensitive information from URLs for logging\n\t\ttry {\n\t\t\tconst urlObj = new URL(url);\n\t\t\treturn `${urlObj.protocol}//${urlObj.host}`;\n\t\t} catch {\n\t\t\treturn \"invalid-url\";\n\t\t}\n\t}\n\n\tprotected createSupabaseClient(config: { detectSessionInUrl: boolean }): void {\n\t\tconst supabaseUrl = this.getSupabaseUrl();\n\t\tconst supabaseAnonKey = this.getSupabaseAnonKey();\n\n\t\tthis.logInfo(\"Supabase configuration check\", {\n\t\t\toperation: \"config_check\",\n\t\t\thasUrl: !!supabaseUrl,\n\t\t\thasKey: !!supabaseAnonKey,\n\t\t\temulatorEnabled: this.isEmulatorEnabled(),\n\t\t\turl: this.sanitizeUrl(supabaseUrl),\n\t\t\temulatorHost: this.getEmulatorHost(),\n\t\t\temulatorPort: this.getEmulatorPort()\n\t\t});\n\n\t\tif (!supabaseUrl || !supabaseAnonKey) {\n\t\t\tconst error = `Missing Supabase configuration. URL: ${!!supabaseUrl}, Key: ${!!supabaseAnonKey}`;\n\t\t\tthis.logError(error, {\n\t\t\t\toperation: \"config_validation\",\n\t\t\t\tsupabaseUrl,\n\t\t\t\thasAnonKey: !!supabaseAnonKey,\n\t\t\t\temulatorEnabled: this.isEmulatorEnabled()\n\t\t\t});\n\t\t\tthrow new Error(error);\n\t\t}\n\n\t\tthis.logInfo(\"Creating Supabase client\", {\n\t\t\toperation: \"create_client\",\n\t\t\turl: this.sanitizeUrl(supabaseUrl)\n\t\t});\n\n\t\tthis.client = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n\t\t\tauth: {\n\t\t\t\tautoRefreshToken: true,\n\t\t\t\tpersistSession: true,\n\t\t\t\tdetectSessionInUrl: config.detectSessionInUrl,\n\t\t\t},\n\t\t});\n\n\t\tthis.logInfo(\"Supabase client created successfully\", {\n\t\t\toperation: \"client_created\"\n\t\t});\n\t}\n\n\t/**\n\t * Get platform-specific client configuration\n\t */\n\tprotected abstract getClientConfig(): { detectSessionInUrl: boolean };\n\n\t/**\n\t * Initialize the Supabase service\n\t */\n\tinit(): void {\n\t\tif (this.initialized) {\n\t\t\tthis.logInfo(\"Already initialized, skipping\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst startTime = Date.now();\n\t\tthis.logInfo(this.getInitMessage(), {\n\t\t\toperation: \"init\",\n\t\t});\n\n\t\ttry {\n\t\t\tthis.createSupabaseClient(this.getClientConfig());\n\n\t\t\tthis.logInfo(\"Supabase client initialized successfully\", {\n\t\t\t\toperation: \"init\",\n\t\t\t\tduration: Date.now() - startTime,\n\t\t\t\turl: this.sanitizeUrl(this.getSupabaseUrl()),\n\t\t\t});\n\n\t\t\tthis.initialized = true;\n\n\t\t\tthis.logInfo(\"Initialization complete\", {\n\t\t\t\toperation: \"init\",\n\t\t\t\tduration: Date.now() - startTime,\n\t\t\t});\n\t\t} catch (error: any) {\n\t\t\tthis.logError(\"Failed to initialize Supabase\", {\n\t\t\t\toperation: \"init\",\n\t\t\t\tduration: Date.now() - startTime,\n\t\t\t\terror: {\n\t\t\t\t\tmessage: error.message,\n\t\t\t\t\tstack: error.stack,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get platform-specific initialization message\n\t */\n\tprotected abstract getInitMessage(): string;\n\n\t/**\n\t * Get the Supabase client instance\n\t */\n\tgetSupabaseClient(): SupabaseClient<Database> {\n\t\tthis.assertInitialized(\"getSupabaseClient()\");\n\t\tif (!this.client) {\n\t\t\tthrow new Error(\"Supabase client not available\");\n\t\t}\n\t\treturn this.client;\n\t}\n\n\t/**\n\t * Check if the service is ready for use\n\t */\n\tisReady(): boolean {\n\t\treturn this.initialized && !!this.client;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}