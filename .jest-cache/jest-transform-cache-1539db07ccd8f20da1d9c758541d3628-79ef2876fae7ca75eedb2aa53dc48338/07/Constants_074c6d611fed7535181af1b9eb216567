d01afb6495eb8ca44b099aa9e06f0473
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppOwnership", {
  enumerable: true,
  get: function get() {
    return _Constants.AppOwnership;
  }
});
Object.defineProperty(exports, "ExecutionEnvironment", {
  enumerable: true,
  get: function get() {
    return _Constants.ExecutionEnvironment;
  }
});
Object.defineProperty(exports, "UserInterfaceIdiom", {
  enumerable: true,
  get: function get() {
    return _Constants.UserInterfaceIdiom;
  }
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _expoModulesCore = require("expo-modules-core");
var _reactNative = require("react-native");
var _Constants = require("./Constants.types");
var _ExponentConstants = _interopRequireDefault(require("./ExponentConstants"));
var _ref;
if (!_ExponentConstants.default) {
  console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
}
var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
var rawUpdatesManifest = null;
if (ExpoUpdates) {
  var updatesManifest;
  if (ExpoUpdates.manifest) {
    updatesManifest = ExpoUpdates.manifest;
  } else if (ExpoUpdates.manifestString) {
    updatesManifest = JSON.parse(ExpoUpdates.manifestString);
  }
  if (updatesManifest && Object.keys(updatesManifest).length > 0) {
    rawUpdatesManifest = updatesManifest;
  }
}
var rawDevLauncherManifest = null;
if (_reactNative.NativeModules.EXDevLauncher) {
  var devLauncherManifest;
  if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
    devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
  }
  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
    rawDevLauncherManifest = devLauncherManifest;
  }
}
var rawAppConfig = null;
if (_ExponentConstants.default && _ExponentConstants.default.manifest) {
  var appConfig = _ExponentConstants.default.manifest;
  if (typeof appConfig === 'string') {
    rawAppConfig = JSON.parse(appConfig);
  } else {
    rawAppConfig = appConfig;
  }
}
var rawManifest = (_ref = rawUpdatesManifest != null ? rawUpdatesManifest : rawDevLauncherManifest) != null ? _ref : rawAppConfig;
var _ref2 = _ExponentConstants.default || {},
  name = _ref2.name,
  appOwnership = _ref2.appOwnership,
  nativeConstants = (0, _objectWithoutProperties2.default)(_ref2, ["name", "appOwnership"]);
var constants = Object.assign({}, nativeConstants, {
  appOwnership: appOwnership != null ? appOwnership : null
});
Object.defineProperties(constants, {
  __unsafeNoWarnManifest: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: false
  },
  __unsafeNoWarnManifest2: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: false
  },
  manifest: {
    get: function get() {
      var maybeManifest = getManifest();
      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: true
  },
  manifest2: {
    get: function get() {
      var maybeManifest = getManifest();
      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: true
  },
  expoConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {
        return rawAppConfig;
      }
      if (isExpoUpdatesManifest(maybeManifest)) {
        var _maybeManifest$extra$, _maybeManifest$extra;
        return (_maybeManifest$extra$ = (_maybeManifest$extra = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra.expoClient) != null ? _maybeManifest$extra$ : null;
      } else if (isEmbeddedManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  expoGoConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (isExpoUpdatesManifest(maybeManifest)) {
        var _maybeManifest$extra$2, _maybeManifest$extra2;
        return (_maybeManifest$extra$2 = (_maybeManifest$extra2 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra2.expoGo) != null ? _maybeManifest$extra$2 : null;
      } else if (isEmbeddedManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  easConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (isExpoUpdatesManifest(maybeManifest)) {
        var _maybeManifest$extra$3, _maybeManifest$extra3;
        return (_maybeManifest$extra$3 = (_maybeManifest$extra3 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra3.eas) != null ? _maybeManifest$extra$3 : null;
      } else if (isEmbeddedManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  __rawManifest_TEST: {
    get: function get() {
      return rawManifest;
    },
    set: function set(value) {
      rawManifest = value;
    },
    enumerable: false
  }
});
function isEmbeddedManifest(manifest) {
  return !isExpoUpdatesManifest(manifest);
}
function isExpoUpdatesManifest(manifest) {
  return 'metadata' in manifest;
}
function getManifest() {
  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!rawManifest) {
    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';
    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && _reactNative.Platform.OS !== 'web') {
      if (!suppressWarning) {
        console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);
      }
    } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {
      throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);
    }
  }
  return rawManifest;
}
var _default = exports.default = constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,