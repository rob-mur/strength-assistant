8bb78ae95c0476a391fbc75fe9737fcd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  initAuth: true,
  getAuthInstance: true,
  signInAnonymouslyWeb: true,
  createAccountWeb: true,
  signInWeb: true,
  signOutWeb: true,
  onAuthStateChangedWeb: true
};
exports.createAccountWeb = createAccountWeb;
exports.getAuthInstance = getAuthInstance;
exports.initAuth = initAuth;
exports.onAuthStateChangedWeb = onAuthStateChangedWeb;
exports.signInAnonymouslyWeb = signInAnonymouslyWeb;
exports.signInWeb = signInWeb;
exports.signOutWeb = signOutWeb;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _auth = require("firebase/auth");
Object.keys(_auth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _auth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _auth[key];
    }
  });
});
var _firebase = require("./firebase.web");
var _firebaseCore = require("./firebase-core");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var AuthWebService = function (_FirebaseService) {
  function AuthWebService() {
    (0, _classCallCheck2.default)(this, AuthWebService);
    return _callSuper(this, AuthWebService, ["Firebase Auth"]);
  }
  (0, _inherits2.default)(AuthWebService, _FirebaseService);
  return (0, _createClass2.default)(AuthWebService, [{
    key: "init",
    value: function init() {
      if (this.initialized) {
        this.logInfo("Already initialized, skipping");
        return;
      }
      var startTime = Date.now();
      this.logInfo("Initializing Firebase Auth...", {
        operation: "init"
      });
      try {
        var app = (0, _firebase.getFirebaseApp)();
        this.logInfo("Got firebase app", {
          operation: "init",
          config: {
            appName: app.name
          }
        });
        this.authInstance = (0, _auth.getAuth)(app);
        this.logInfo("Firebase Auth initialized successfully", {
          operation: "init",
          duration: Date.now() - startTime
        });
        this.setupEmulator();
        this.initialized = true;
        this.logInfo("Auth initialization complete", {
          operation: "init",
          duration: Date.now() - startTime
        });
      } catch (error) {
        this.logError("Failed to initialize Firebase Auth", {
          operation: "init",
          duration: Date.now() - startTime,
          error: {
            message: error.message,
            stack: error.stack
          }
        });
        throw error;
      }
    }
  }, {
    key: "setupEmulator",
    value: function setupEmulator() {
      if (!this.authInstance) return;
      if (this.isEmulatorEnabled()) {
        var host = this.getEmulatorHost();
        var port = 9099;
        var emulatorUrl = `http://${host}:${port}`;
        this.logInfo("Development mode detected, connecting to auth emulator", {
          operation: "emulator_setup",
          emulator: {
            host: host,
            port: port
          }
        });
        try {
          var _delegate;
          if (!((_delegate = this.authInstance._delegate) != null && (_delegate = _delegate._config) != null && _delegate.emulator)) {
            (0, _auth.connectAuthEmulator)(this.authInstance, emulatorUrl, {
              disableWarnings: true
            });
            this.logInfo("Successfully connected to Auth emulator", {
              operation: "emulator_setup",
              emulator: {
                host: host,
                port: port
              }
            });
          } else {
            this.logInfo("Auth emulator already connected", {
              operation: "emulator_setup",
              emulator: {
                host: host,
                port: port
              }
            });
          }
        } catch (error) {
          this.logError("Failed to connect to emulator", {
            operation: "emulator_setup",
            emulator: {
              host: host,
              port: port
            },
            error: {
              message: error.message
            }
          });
          this.logWarn("Continuing without emulator for Chrome testing compatibility");
        }
      } else {
        this.logInfo("Production mode, using production Auth", {
          operation: "emulator_setup"
        });
      }
    }
  }, {
    key: "getAuthInstance",
    value: function getAuthInstance() {
      this.assertInitialized("getAuthInstance()");
      if (!this.authInstance) {
        throw new Error("Auth instance not available");
      }
      return this.authInstance;
    }
  }, {
    key: "isReady",
    value: function isReady() {
      return this.initialized && !!this.authInstance;
    }
  }]);
}(_firebaseCore.FirebaseService);
var authService = new AuthWebService();
function initAuth() {
  authService.init();
}
function getAuthInstance() {
  return authService.getAuthInstance();
}
function signInAnonymouslyWeb() {
  return _signInAnonymouslyWeb.apply(this, arguments);
}
function _signInAnonymouslyWeb() {
  _signInAnonymouslyWeb = (0, _asyncToGenerator2.default)(function* () {
    var authInstance = getAuthInstance();
    var result = yield (0, _auth.signInAnonymously)(authInstance);
    return result.user;
  });
  return _signInAnonymouslyWeb.apply(this, arguments);
}
function createAccountWeb(_x, _x2) {
  return _createAccountWeb.apply(this, arguments);
}
function _createAccountWeb() {
  _createAccountWeb = (0, _asyncToGenerator2.default)(function* (email, password) {
    var authInstance = getAuthInstance();
    var result = yield (0, _auth.createUserWithEmailAndPassword)(authInstance, email, password);
    return result.user;
  });
  return _createAccountWeb.apply(this, arguments);
}
function signInWeb(_x3, _x4) {
  return _signInWeb.apply(this, arguments);
}
function _signInWeb() {
  _signInWeb = (0, _asyncToGenerator2.default)(function* (email, password) {
    var authInstance = getAuthInstance();
    var result = yield (0, _auth.signInWithEmailAndPassword)(authInstance, email, password);
    return result.user;
  });
  return _signInWeb.apply(this, arguments);
}
function signOutWeb() {
  return _signOutWeb.apply(this, arguments);
}
function _signOutWeb() {
  _signOutWeb = (0, _asyncToGenerator2.default)(function* () {
    var authInstance = getAuthInstance();
    yield (0, _auth.signOut)(authInstance);
  });
  return _signOutWeb.apply(this, arguments);
}
function onAuthStateChangedWeb(callback) {
  var authInstance = getAuthInstance();
  return (0, _auth.onAuthStateChanged)(authInstance, callback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,