db2dfee443b6bd0c747c993eb43821aa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupabaseService = void 0;
var _env2 = require("expo/virtual/env");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _supabaseJs = require("@supabase/supabase-js");
var _logger = require("./logger");
var SupabaseService = exports.SupabaseService = function () {
  function SupabaseService(serviceName) {
    (0, _classCallCheck2.default)(this, SupabaseService);
    this.initialized = false;
    this.logger = new _logger.Logger(serviceName);
  }
  return (0, _createClass2.default)(SupabaseService, [{
    key: "logInfo",
    value: function logInfo(message, context) {
      this.logger.info(message, context);
    }
  }, {
    key: "logWarn",
    value: function logWarn(message, context) {
      this.logger.warn(message, context);
    }
  }, {
    key: "logError",
    value: function logError(message, context) {
      this.logger.error(message, context);
    }
  }, {
    key: "assertInitialized",
    value: function assertInitialized(operation) {
      if (!this.initialized) {
        var error = `Supabase service not initialized. Call init() before ${operation}`;
        this.logError(error);
        throw new Error(error);
      }
    }
  }, {
    key: "isEmulatorEnabled",
    value: function isEmulatorEnabled() {
      return process.env.NODE_ENV === "development" || _env2.env.EXPO_PUBLIC_USE_SUPABASE_EMULATOR === "true";
    }
  }, {
    key: "getEmulatorHost",
    value: function getEmulatorHost() {
      return _env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_HOST || "127.0.0.1";
    }
  }, {
    key: "getEmulatorPort",
    value: function getEmulatorPort() {
      return parseInt(_env2.env.EXPO_PUBLIC_SUPABASE_EMULATOR_PORT || "54321", 10);
    }
  }, {
    key: "getSupabaseUrl",
    value: function getSupabaseUrl() {
      if (this.isEmulatorEnabled()) {
        var host = this.getEmulatorHost();
        var port = this.getEmulatorPort();
        return `http://${host}:${port}`;
      }
      return _env2.env.EXPO_PUBLIC_SUPABASE_URL || "";
    }
  }, {
    key: "getSupabaseAnonKey",
    value: function getSupabaseAnonKey() {
      if (this.isEmulatorEnabled()) {
        return _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0";
      }
      return _env2.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || "";
    }
  }, {
    key: "sanitizeUrl",
    value: function sanitizeUrl(url) {
      try {
        var urlObj = new URL(url);
        return `${urlObj.protocol}//${urlObj.host}`;
      } catch (_unused) {
        return "invalid-url";
      }
    }
  }, {
    key: "createSupabaseClient",
    value: function createSupabaseClient(config) {
      var supabaseUrl = this.getSupabaseUrl();
      var supabaseAnonKey = this.getSupabaseAnonKey();
      this.logInfo("Supabase configuration check", {
        operation: "config_check",
        hasUrl: !!supabaseUrl,
        hasKey: !!supabaseAnonKey,
        emulatorEnabled: this.isEmulatorEnabled(),
        url: this.sanitizeUrl(supabaseUrl),
        emulatorHost: this.getEmulatorHost(),
        emulatorPort: this.getEmulatorPort()
      });
      if (!supabaseUrl || !supabaseAnonKey) {
        var error = `Missing Supabase configuration. URL: ${!!supabaseUrl}, Key: ${!!supabaseAnonKey}`;
        this.logError(error, {
          operation: "config_validation",
          supabaseUrl: supabaseUrl,
          hasAnonKey: !!supabaseAnonKey,
          emulatorEnabled: this.isEmulatorEnabled()
        });
        throw new Error(error);
      }
      this.logInfo("Creating Supabase client", {
        operation: "create_client",
        url: this.sanitizeUrl(supabaseUrl)
      });
      this.client = (0, _supabaseJs.createClient)(supabaseUrl, supabaseAnonKey, {
        auth: {
          autoRefreshToken: true,
          persistSession: true,
          detectSessionInUrl: config.detectSessionInUrl
        }
      });
      this.logInfo("Supabase client created successfully", {
        operation: "client_created"
      });
    }
  }, {
    key: "init",
    value: function init() {
      if (this.initialized) {
        this.logInfo("Already initialized, skipping");
        return;
      }
      var startTime = Date.now();
      this.logInfo(this.getInitMessage(), {
        operation: "init"
      });
      try {
        this.createSupabaseClient(this.getClientConfig());
        this.logInfo("Supabase client initialized successfully", {
          operation: "init",
          duration: Date.now() - startTime,
          url: this.sanitizeUrl(this.getSupabaseUrl())
        });
        this.initialized = true;
        this.logInfo("Initialization complete", {
          operation: "init",
          duration: Date.now() - startTime
        });
      } catch (error) {
        this.logError("Failed to initialize Supabase", {
          operation: "init",
          duration: Date.now() - startTime,
          error: {
            message: error.message,
            stack: error.stack
          }
        });
        throw error;
      }
    }
  }, {
    key: "getSupabaseClient",
    value: function getSupabaseClient() {
      this.assertInitialized("getSupabaseClient()");
      if (!this.client) {
        throw new Error("Supabase client not available");
      }
      return this.client;
    }
  }, {
    key: "isReady",
    value: function isReady() {
      return this.initialized && !!this.client;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,