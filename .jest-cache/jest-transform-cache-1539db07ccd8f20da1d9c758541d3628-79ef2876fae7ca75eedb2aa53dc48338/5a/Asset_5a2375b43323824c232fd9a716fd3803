ec52e71181942e4cb7dcf9902c698d63
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Asset = exports.ANDROID_EMBEDDED_URL_BASE_RESOURCE = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _registry = require("@react-native/assets-registry/registry");
var _expoModulesCore = require("expo-modules-core");
var _AssetSources = require("./AssetSources");
var AssetUris = _interopRequireWildcard(require("./AssetUris"));
var _ExpoAsset = require("./ExpoAsset");
var ImageAssets = _interopRequireWildcard(require("./ImageAssets"));
var _LocalAssets = require("./LocalAssets");
var _PlatformUtils = require("./PlatformUtils");
var _resolveAssetSource2 = _interopRequireDefault(require("./resolveAssetSource"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ANDROID_EMBEDDED_URL_BASE_RESOURCE = exports.ANDROID_EMBEDDED_URL_BASE_RESOURCE = 'file:///android_res/';
var Asset = exports.Asset = function () {
  function Asset(_ref) {
    var name = _ref.name,
      type = _ref.type,
      _ref$hash = _ref.hash,
      hash = _ref$hash === void 0 ? null : _ref$hash,
      uri = _ref.uri,
      width = _ref.width,
      height = _ref.height;
    (0, _classCallCheck2.default)(this, Asset);
    this.hash = null;
    this.localUri = null;
    this.width = null;
    this.height = null;
    this.downloading = false;
    this.downloaded = false;
    this._downloadCallbacks = [];
    this.name = name;
    this.type = type;
    this.hash = hash;
    this.uri = uri;
    if (typeof width === 'number') {
      this.width = width;
    }
    if (typeof height === 'number') {
      this.height = height;
    }
    if (hash) {
      var _this$localUri;
      this.localUri = (0, _LocalAssets.getLocalAssetUri)(hash, type);
      if ((_this$localUri = this.localUri) != null && _this$localUri.startsWith(ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {
        this.uri = this.localUri;
        this.localUri = null;
      } else if (this.localUri) {
        this.downloaded = true;
      }
    }
    if (_expoModulesCore.Platform.OS === 'web') {
      if (!name) {
        this.name = AssetUris.getFilename(uri);
      }
      if (!type) {
        this.type = AssetUris.getFileExtension(uri);
      }
    }
  }
  return (0, _createClass2.default)(Asset, [{
    key: "downloadAsync",
    value: function () {
      var _downloadAsync2 = (0, _asyncToGenerator2.default)(function* () {
        var _this = this;
        if (this.downloaded) {
          return this;
        }
        if (this.downloading) {
          yield new Promise(function (resolve, reject) {
            _this._downloadCallbacks.push({
              resolve: resolve,
              reject: reject
            });
          });
          return this;
        }
        this.downloading = true;
        try {
          if (_expoModulesCore.Platform.OS === 'web') {
            if (ImageAssets.isImageType(this.type)) {
              var _yield$ImageAssets$ge = yield ImageAssets.getImageInfoAsync(this.uri),
                width = _yield$ImageAssets$ge.width,
                height = _yield$ImageAssets$ge.height,
                name = _yield$ImageAssets$ge.name;
              this.width = width;
              this.height = height;
              this.name = name;
            } else {
              this.name = AssetUris.getFilename(this.uri);
            }
          }
          this.localUri = yield (0, _ExpoAsset.downloadAsync)(this.uri, this.hash, this.type);
          this.downloaded = true;
          this._downloadCallbacks.forEach(function (_ref2) {
            var resolve = _ref2.resolve;
            return resolve();
          });
        } catch (e) {
          this._downloadCallbacks.forEach(function (_ref3) {
            var reject = _ref3.reject;
            return reject(e);
          });
          throw e;
        } finally {
          this.downloading = false;
          this._downloadCallbacks = [];
        }
        return this;
      });
      function downloadAsync() {
        return _downloadAsync2.apply(this, arguments);
      }
      return downloadAsync;
    }()
  }], [{
    key: "loadAsync",
    value: function loadAsync(moduleId) {
      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];
      return Promise.all(moduleIds.map(function (moduleId) {
        return Asset.fromModule(moduleId).downloadAsync();
      }));
    }
  }, {
    key: "fromModule",
    value: function fromModule(virtualAssetModule) {
      if (typeof virtualAssetModule === 'string') {
        return Asset.fromURI(virtualAssetModule);
      }
      if (typeof virtualAssetModule === 'object' && 'uri' in virtualAssetModule && typeof virtualAssetModule.uri === 'string') {
        var extension = AssetUris.getFileExtension(virtualAssetModule.uri);
        return new Asset({
          name: '',
          type: extension.startsWith('.') ? extension.substring(1) : extension,
          hash: null,
          uri: virtualAssetModule.uri,
          width: virtualAssetModule.width,
          height: virtualAssetModule.height
        });
      }
      var meta = (0, _registry.getAssetByID)(virtualAssetModule);
      if (!meta) {
        throw new Error(`Module "${virtualAssetModule}" is missing from the asset registry`);
      }
      if (!_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
        var _resolveAssetSource = (0, _resolveAssetSource2.default)(virtualAssetModule),
          uri = _resolveAssetSource.uri;
        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash: meta.hash,
          uri: uri,
          width: meta.width,
          height: meta.height
        });
        if (_expoModulesCore.Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {
          asset.localUri = asset.uri;
          asset.downloaded = true;
        }
        Asset.byHash[meta.hash] = asset;
        return asset;
      }
      return Asset.fromMetadata(meta);
    }
  }, {
    key: "fromMetadata",
    value: function fromMetadata(meta) {
      var metaHash = meta.hash;
      if (Asset.byHash[metaHash]) {
        return Asset.byHash[metaHash];
      }
      var _selectAssetSource = (0, _AssetSources.selectAssetSource)(meta),
        uri = _selectAssetSource.uri,
        hash = _selectAssetSource.hash;
      var asset = new Asset({
        name: meta.name,
        type: meta.type,
        hash: hash,
        uri: uri,
        width: meta.width,
        height: meta.height
      });
      Asset.byHash[metaHash] = asset;
      return asset;
    }
  }, {
    key: "fromURI",
    value: function fromURI(uri) {
      if (Asset.byUri[uri]) {
        return Asset.byUri[uri];
      }
      var type = '';
      if (uri.indexOf(';base64') > -1) {
        type = uri.split(';')[0].split('/')[1];
      } else {
        var extension = AssetUris.getFileExtension(uri);
        type = extension.startsWith('.') ? extension.substring(1) : extension;
      }
      var asset = new Asset({
        name: '',
        type: type,
        hash: null,
        uri: uri
      });
      Asset.byUri[uri] = asset;
      return asset;
    }
  }]);
}();
Asset.byHash = {};
Asset.byUri = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,