3da356ca5488c12188749dc06d15afd0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Outline = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _interopRequireWildcard(e, t) {
  if ("function" == typeof WeakMap) var r = new WeakMap(),
    n = new WeakMap();
  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {
    if (!t && e && e.__esModule) return e;
    var o,
      i,
      f = {
        __proto__: null,
        default: e
      };
    if (null === e || "object" != typeof e && "function" != typeof e) return f;
    if (o = t ? n : r) {
      if (o.has(e)) return o.get(e);
      o.set(e, f);
    }
    for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
    return f;
  })(e, t);
}
var Outline = function Outline(_ref) {
  var isV3 = _ref.isV3,
    label = _ref.label,
    activeColor = _ref.activeColor,
    backgroundColor = _ref.backgroundColor,
    hasActiveOutline = _ref.hasActiveOutline,
    focused = _ref.focused,
    outlineColor = _ref.outlineColor,
    roundness = _ref.roundness,
    style = _ref.style;
  return React.createElement(_reactNative.View, {
    testID: "text-input-outline",
    pointerEvents: "none",
    style: [styles.outline, !label && styles.noLabelOutline, {
      backgroundColor: backgroundColor,
      borderRadius: roundness,
      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,
      borderColor: hasActiveOutline ? activeColor : outlineColor
    }, style]
  });
};
exports.Outline = Outline;
var styles = _reactNative.StyleSheet.create({
  outline: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 6,
    bottom: 0
  },
  noLabelOutline: {
    top: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk91dGxpbmUiLCJfcmVmIiwiaXNWMyIsImxhYmVsIiwiYWN0aXZlQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJoYXNBY3RpdmVPdXRsaW5lIiwiZm9jdXNlZCIsIm91dGxpbmVDb2xvciIsInJvdW5kbmVzcyIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJ0ZXN0SUQiLCJwb2ludGVyRXZlbnRzIiwic3R5bGVzIiwib3V0bGluZSIsIm5vTGFiZWxPdXRsaW5lIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsImV4cG9ydHMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwicG9zaXRpb24iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UZXh0SW5wdXQvQWRkb25zL091dGxpbmUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFNc0IsU0FBQUQsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBTCx1QkFBQSxZQUFBQSx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFB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