ff36677efd39bc321382838471daa202
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupabaseExerciseRepo = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Exercise = require("../models/Exercise");
var _state = require("@legendapp/state");
var _store = require("../data/store");
var _syncConfig = require("../data/sync/syncConfig");
var _SupabaseClient = require("../data/supabase/SupabaseClient");
var _uuid = require("uuid");
var _RepositoryUtils = require("./utils/RepositoryUtils");
var SupabaseExerciseRepo = exports.SupabaseExerciseRepo = function () {
  function SupabaseExerciseRepo() {
    (0, _classCallCheck2.default)(this, SupabaseExerciseRepo);
  }
  return (0, _createClass2.default)(SupabaseExerciseRepo, [{
    key: "addExercise",
    value: (function () {
      var _addExercise = (0, _asyncToGenerator2.default)(function* (userId, exercise) {
        var sanitizedName = this.validateAndSanitizeExercise(exercise);
        var authenticatedUser = yield this.validateUserAuthentication(userId);
        var newExercise = this.createNewExercise(sanitizedName, authenticatedUser.id);
        yield this.performOptimisticUpdate(newExercise, function () {
          return (0, _syncConfig.syncExerciseToSupabase)(newExercise);
        });
      });
      function addExercise(_x, _x2) {
        return _addExercise.apply(this, arguments);
      }
      return addExercise;
    }())
  }, {
    key: "validateAndSanitizeExercise",
    value: function validateAndSanitizeExercise(exercise) {
      _Exercise.ExerciseValidator.validateExerciseInput(exercise);
      return _Exercise.ExerciseValidator.sanitizeExerciseName(exercise.name);
    }
  }, {
    key: "validateUserAuthentication",
    value: (function () {
      var _validateUserAuthentication = (0, _asyncToGenerator2.default)(function* (userId) {
        var supabaseUser = yield _SupabaseClient.supabaseClient.getCurrentUser();
        if (!supabaseUser) {
          throw new Error('User not authenticated with Supabase');
        }
        if (userId && userId !== supabaseUser.id) {
          throw new Error(`User ID mismatch: Expected ${userId}, but Supabase user is ${supabaseUser.id}. This may indicate a user mapping issue during Firebase-to-Supabase migration.`);
        }
        return supabaseUser;
      });
      function validateUserAuthentication(_x3) {
        return _validateUserAuthentication.apply(this, arguments);
      }
      return validateUserAuthentication;
    }())
  }, {
    key: "createNewExercise",
    value: function createNewExercise(sanitizedName, userId) {
      return {
        id: (0, _uuid.v4)(),
        name: sanitizedName,
        user_id: userId,
        created_at: new Date().toISOString()
      };
    }
  }, {
    key: "performOptimisticUpdate",
    value: (function () {
      var _performOptimisticUpdate = (0, _asyncToGenerator2.default)(function* (newItem, syncOperation) {
        var currentExercises = _store.exercises$.get();
        var rollbackOperation = function rollbackOperation() {
          return _store.exercises$.set(currentExercises);
        };
        _store.exercises$.set([].concat((0, _toConsumableArray2.default)(currentExercises), [newItem]));
        try {
          yield syncOperation();
        } catch (syncError) {
          rollbackOperation();
          throw syncError;
        }
      });
      function performOptimisticUpdate(_x4, _x5) {
        return _performOptimisticUpdate.apply(this, arguments);
      }
      return performOptimisticUpdate;
    }())
  }, {
    key: "getExerciseById",
    value: (function () {
      var _getExerciseById = (0, _asyncToGenerator2.default)(function* (id, uid) {
        var exercises = _store.exercises$.get();
        return exercises.find(function (exercise) {
          return exercise.id === id && exercise.user_id === uid;
        });
      });
      function getExerciseById(_x6, _x7) {
        return _getExerciseById.apply(this, arguments);
      }
      return getExerciseById;
    }())
  }, {
    key: "getExercises",
    value: function getExercises(_userId) {
      return (0, _state.computed)(function () {
        var currentUser = _store.user$.get();
        if (!currentUser) return [];
        return _store.exercises$.get().filter(function (ex) {
          return ex.user_id === currentUser.id;
        });
      });
    }
  }, {
    key: "deleteExercise",
    value: (function () {
      var _deleteExercise = (0, _asyncToGenerator2.default)(function* (userId, exerciseId) {
        _RepositoryUtils.RepositoryUtils.validateExerciseId(exerciseId);
        var authenticatedUser = yield this.validateUserAuthentication(userId);
        yield this.performOptimisticDelete(exerciseId, authenticatedUser.id);
      });
      function deleteExercise(_x8, _x9) {
        return _deleteExercise.apply(this, arguments);
      }
      return deleteExercise;
    }())
  }, {
    key: "performOptimisticDelete",
    value: (function () {
      var _performOptimisticDelete = (0, _asyncToGenerator2.default)(function* (exerciseId, userId) {
        var currentExercises = _store.exercises$.get();
        var rollbackOperation = function rollbackOperation() {
          return _store.exercises$.set(currentExercises);
        };
        var updatedExercises = currentExercises.filter(function (exercise) {
          return !(exercise.id === exerciseId && exercise.user_id === userId);
        });
        _store.exercises$.set(updatedExercises);
        try {
          yield (0, _syncConfig.deleteExerciseFromSupabase)(exerciseId, userId);
        } catch (syncError) {
          rollbackOperation();
          throw syncError;
        }
      });
      function performOptimisticDelete(_x0, _x1) {
        return _performOptimisticDelete.apply(this, arguments);
      }
      return performOptimisticDelete;
    }())
  }, {
    key: "subscribeToExercises",
    value: function subscribeToExercises(uid, callback) {
      return (0, _state.observe)(function () {
        var currentUser = _store.user$.get();
        if (!currentUser) {
          callback([]);
          return;
        }
        var filteredExercises = _store.exercises$.get().filter(function (ex) {
          return ex.user_id === currentUser.id;
        });
        callback(filteredExercises);
      });
    }
  }, {
    key: "isSyncing",
    value: function isSyncing() {
      return _syncConfig.syncHelpers.isSyncing();
    }
  }, {
    key: "isOnline",
    value: function isOnline() {
      return _syncConfig.syncHelpers.isOnline();
    }
  }, {
    key: "getPendingChangesCount",
    value: function getPendingChangesCount() {
      return _syncConfig.syncHelpers.getPendingChangesCount();
    }
  }, {
    key: "forceSync",
    value: (function () {
      var _forceSync = (0, _asyncToGenerator2.default)(function* () {
        yield _syncConfig.syncHelpers.forceSync();
      });
      function forceSync() {
        return _forceSync.apply(this, arguments);
      }
      return forceSync;
    }())
  }, {
    key: "hasErrors",
    value: function hasErrors() {
      return _syncConfig.syncHelpers.hasErrors();
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage() {
      var _syncHelpers$getError;
      return (_syncHelpers$getError = _syncConfig.syncHelpers.getErrorMessage()) != null ? _syncHelpers$getError : null;
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!SupabaseExerciseRepo.instance) {
        SupabaseExerciseRepo.instance = new SupabaseExerciseRepo();
      }
      return SupabaseExerciseRepo.instance;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,