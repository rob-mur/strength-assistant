3f8a8306f64d181191be9f6b33e6c64c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExerciseRepo = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ExerciseRepoFactory = require("./ExerciseRepoFactory");
var ExerciseRepo = exports.ExerciseRepo = function () {
  function ExerciseRepo() {
    (0, _classCallCheck2.default)(this, ExerciseRepo);
    this.delegate = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
  }
  return (0, _createClass2.default)(ExerciseRepo, [{
    key: "addExercise",
    value: (function () {
      var _addExercise = (0, _asyncToGenerator2.default)(function* (userId, exercise) {
        return this.delegate.addExercise(userId, exercise);
      });
      function addExercise(_x, _x2) {
        return _addExercise.apply(this, arguments);
      }
      return addExercise;
    }())
  }, {
    key: "getExercises",
    value: function getExercises(userId) {
      return this.delegate.getExercises(userId);
    }
  }, {
    key: "subscribeToExercises",
    value: function subscribeToExercises(uid, callback) {
      return this.delegate.subscribeToExercises(uid, callback);
    }
  }, {
    key: "deleteExercise",
    value: (function () {
      var _deleteExercise = (0, _asyncToGenerator2.default)(function* (userId, exerciseId) {
        return this.delegate.deleteExercise(userId, exerciseId);
      });
      function deleteExercise(_x3, _x4) {
        return _deleteExercise.apply(this, arguments);
      }
      return deleteExercise;
    }())
  }, {
    key: "getExerciseById",
    value: (function () {
      var _getExerciseById = (0, _asyncToGenerator2.default)(function* (exerciseId, userId) {
        return this.delegate.getExerciseById(exerciseId, userId);
      });
      function getExerciseById(_x5, _x6) {
        return _getExerciseById.apply(this, arguments);
      }
      return getExerciseById;
    }())
  }, {
    key: "isSyncing",
    value: function isSyncing() {
      return this.delegate.isSyncing();
    }
  }, {
    key: "isOnline",
    value: function isOnline() {
      return this.delegate.isOnline();
    }
  }, {
    key: "getPendingChangesCount",
    value: function getPendingChangesCount() {
      return this.delegate.getPendingChangesCount();
    }
  }, {
    key: "forceSync",
    value: (function () {
      var _forceSync = (0, _asyncToGenerator2.default)(function* () {
        return this.delegate.forceSync();
      });
      function forceSync() {
        return _forceSync.apply(this, arguments);
      }
      return forceSync;
    }())
  }, {
    key: "hasErrors",
    value: function hasErrors() {
      return this.delegate.hasErrors();
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage() {
      return this.delegate.getErrorMessage();
    }
  }, {
    key: "getCurrentDataSource",
    value: function getCurrentDataSource() {
      return _ExerciseRepoFactory.ExerciseRepoFactory.getCurrentDataSource();
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!ExerciseRepo.instance) {
        ExerciseRepo.instance = new ExerciseRepo();
      }
      ExerciseRepo.instance.delegate = _ExerciseRepoFactory.ExerciseRepoFactory.getInstance();
      return ExerciseRepo.instance;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,