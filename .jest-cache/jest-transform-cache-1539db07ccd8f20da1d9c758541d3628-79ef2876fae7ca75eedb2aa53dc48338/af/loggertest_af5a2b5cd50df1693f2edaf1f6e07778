07cf489b524d1925090770262a80e165
var _logger = require("@/lib/data/supabase/supabase/logger");
var mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();
var mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation();
var mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
describe("Logger", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    mockConsoleLog.mockRestore();
    mockConsoleWarn.mockRestore();
    mockConsoleError.mockRestore();
  });
  test("creates logger with service name", function () {
    var logger = new _logger.Logger("TestService");
    expect(logger).toBeInstanceOf(_logger.Logger);
  });
  test("logs info messages with service prefix", function () {
    var logger = new _logger.Logger("TestService");
    var message = "Test info message";
    logger.info(message);
    expect(mockConsoleLog).toHaveBeenCalledWith("[TestService] Test info message", undefined);
  });
  test("logs info messages with context", function () {
    var logger = new _logger.Logger("TestService");
    var message = "Test info message";
    var context = {
      operation: "test",
      duration: 123
    };
    logger.info(message, context);
    expect(mockConsoleLog).toHaveBeenCalledWith("[TestService] Test info message", context);
  });
  test("logs warning messages", function () {
    var logger = new _logger.Logger("TestService");
    var message = "Test warning message";
    var context = {
      operation: "test"
    };
    logger.warn(message, context);
    expect(mockConsoleWarn).toHaveBeenCalledWith("[TestService] Test warning message", context);
  });
  test("logs error messages", function () {
    var logger = new _logger.Logger("TestService");
    var message = "Test error message";
    var context = {
      error: {
        message: "Something went wrong",
        code: "ERR_TEST"
      }
    };
    logger.error(message, context);
    expect(mockConsoleError).toHaveBeenCalledWith("[TestService] Test error message", context);
  });
  test("handles undefined context gracefully", function () {
    var logger = new _logger.Logger("TestService");
    logger.info("Info without context");
    logger.warn("Warning without context");
    logger.error("Error without context");
    expect(mockConsoleLog).toHaveBeenCalledWith("[TestService] Info without context", undefined);
    expect(mockConsoleWarn).toHaveBeenCalledWith("[TestService] Warning without context", undefined);
    expect(mockConsoleError).toHaveBeenCalledWith("[TestService] Error without context", undefined);
  });
  test("formats different service names correctly", function () {
    var webLogger = new _logger.Logger("SupabaseWebService");
    var nativeLogger = new _logger.Logger("SupabaseNativeService");
    webLogger.info("Web message");
    nativeLogger.info("Native message");
    expect(mockConsoleLog).toHaveBeenCalledWith("[SupabaseWebService] Web message", undefined);
    expect(mockConsoleLog).toHaveBeenCalledWith("[SupabaseNativeService] Native message", undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,